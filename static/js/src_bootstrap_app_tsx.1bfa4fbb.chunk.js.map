{"version":3,"file":"static/js/src_bootstrap_app_tsx.1bfa4fbb.chunk.js","mappings":"gIAEAA,OAAOC,eAAeC,EAAS,KAA/BF,CACEG,OAAO,IAETH,OAAOC,eAAeC,EAAS,KAA/BF,CACEI,YAAY,EACZC,IAAK,WACH,OAAOC,EAAMC,WAGjBL,EAAQ,QAAS,EACjBF,OAAOC,eAAeC,EAAS,KAA/BF,CACEI,YAAY,EACZC,IAAK,WACH,OAAOG,EAAQD,WAInB,IAAIE,EAASC,EAAuBC,EAAQ,QAExCC,EAAUF,EAAuBC,EAAQ,QAEzCL,EAAQI,EAAuBC,EAAQ,QAEvCH,EAAUE,EAAuBC,EAAQ,QAE7C,SAASD,EAAuBG,GAAO,OAAOA,GAAOA,EAAIC,WAAaD,EAAM,CAAEN,QAASM,GAEvF,MAAME,EAAS,CAACN,EAAOF,QAASK,EAAQL,SACxCL,EAAQ,GAASa,G,0KCbjB,MAAMC,EAAS,CACbC,MAAOC,SACPC,IAAKD,6DCTP,EAPgB,CACdE,SDkB8B,CAI9BC,YAAa,IACRL,GAMLM,WAAY,IACPN,IC9BcO,EAAAA,M,eCGrB,MACEH,UAAU,MAAEH,IACVO,EAmBJ,EAjBa,KACX,MAAM,cAAEC,IAAkBC,EAAAA,EAAAA,SAM1B,OAJAC,EAAAA,EAAAA,YAAU,KACRF,EAAc,CAAEG,MAAO,UAAWC,KAAM,cACvC,CAACJ,KAGF,SAAC,IAAD,CACEK,OAAQC,OAAOC,OAAOF,OACtBb,MAAOA,EACPgB,IAAI,wBACJC,MAAM,8C,gECeZC,OAAOC,UAAUC,OAAS,WACxB,OAAOC,KAAKC,YAEP,MAAMC,EAAgC,CAC3CC,kBAAmB,CACjBC,eAzBaC,GAOE,qBAARA,GACC,OAARA,GACe,kBAARA,GACQ,mBAARA,GACQ,kBAARA,GACPC,MAAMC,QAAQF,IAXO9B,KACrB,GAAY,OAARA,EAAc,OAAO,EACzB,MAAMiC,EAAQ9C,OAAO+C,eAAelC,GACpC,OAAiB,OAAViC,GAAmD,OAAjC9C,OAAO+C,eAAeD,IAS/CE,CAAcL,IACC,kBAARA,GACPA,aAAeM,EAAAA,WACfN,aAAeO,KACfC,EAAOC,SAAST,KCrBdU,EAAO,OASAC,GAAkBC,EAAAA,EAAAA,kBAC5B,wBACDC,MAAOC,EAAP,KAA4B,IAAlB,SAAEC,GAAe,EACzB,MACEC,MAAM,QAAEC,IACNF,IACJ,MAAO,CAAEE,QAASA,EAAU,MAmBhC,GAXcC,EAAAA,EAAAA,aAAY,CACxBC,KAAMT,EACNU,aAxB0B,CAC1BH,QAAS,GAwBTI,SAAU,GACVC,cAAgBC,IACTA,EAAQC,QACXb,EAAgBc,WAChB,CAACC,EAAD,SAAQ,QAAEC,GAAV,EAA6BtE,OAAOuE,OAAOF,EAAOC,SAIxD,QC7BA,GAXcE,EAAAA,EAAAA,gBAAe,CAC3BC,WAAaC,GACXA,EAAqBlC,GACvBmC,UFLwD,EEMxDC,QAAS,CACPjB,KADO,K,eCJX,MACEvC,UAAYH,MAAF,IACRO,EAESqD,EAAO,KAEhB,SAAC,EAAAC,WAAD,CAAY7D,MAAOA,EAAO8D,MAAI,EAA9B,UACE,SAAC,EAAAC,SAAD,CAAUC,MAAOC,EAAjB,UACE,SAAC,EAAD,S","sources":["static.app.tsx","configs/manifest.config.ts","configs/index.ts","view/index.tsx","model/devTools.ts","model/main.controller.tsx","model/index.ts","bootstrap.app.tsx"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"logo\", {\n  enumerable: true,\n  get: function () {\n    return _logo.default;\n  }\n});\nexports.panels = void 0;\nObject.defineProperty(exports, \"readme\", {\n  enumerable: true,\n  get: function () {\n    return _README.default;\n  }\n});\n\nvar _panel = _interopRequireDefault(require(\"./static/images/panel-1.png\"));\n\nvar _panel2 = _interopRequireDefault(require(\"./static/images/panel-2.png\"));\n\nvar _logo = _interopRequireDefault(require(\"./static/images/logo.png\"));\n\nvar _README = _interopRequireDefault(require(\"./static/docs/README.md\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst panels = [_panel.default, _panel2.default];\nexports.panels = panels;","import { Env } from '@sentre/senhub'\n\nif (\n  typeof process.env.REACT_APP_ID !== 'string' ||\n  typeof process.env.REACT_APP_URL !== 'string'\n)\n  throw new Error('Please add REACT_APP_ID, REACT_APP_URL in .env!')\n\n/**\n * Contructor\n */\n\ntype Conf = {\n  appId: string\n  url: string\n}\n\nconst shared = {\n  appId: process.env.REACT_APP_ID,\n  url: process.env.REACT_APP_URL,\n}\n\nconst conf: Record<Env, Conf> = {\n  /**\n   * Development configurations\n   */\n  development: {\n    ...shared,\n  },\n\n  /**\n   * Production configurations\n   */\n  production: {\n    ...shared,\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { env } from '@sentre/senhub'\nimport manifest from './manifest.config'\n\nconst configs = {\n  manifest: manifest[env],\n}\n\n/**\n * Module exports\n */\nexport default configs\n","import { useEffect } from 'react'\nimport { useUI } from '@sentre/senhub'\n\nimport EmbededView from '@sentre/embeded-view'\n\nimport configs from 'configs'\n\nconst {\n  manifest: { appId },\n} = configs\n\nconst View = () => {\n  const { setBackground } = useUI()\n\n  useEffect(() => {\n    setBackground({ light: '#1b142b', dark: '#1b142b' })\n  }, [setBackground])\n\n  return (\n    <EmbededView\n      wallet={window.sentre.wallet}\n      appId={appId}\n      src=\"https://app.sypool.io\"\n      title=\"Sypool: Synthetic Asset Pools Management\"\n    />\n  )\n}\n\nexport default View\n","import { PublicKey } from '@solana/web3.js'\nimport BN from 'bn.js'\n\n// Bugfix performance\n// https://github.com/zalmoxisus/redux-devtools-extension/blob/master/docs/Troubleshooting.md#excessive-use-of-memory-and-cpu\nexport const devTools = (appName: string): any => {\n  if (process.env.REACT_APP_ENV !== 'development') return false\n  return {\n    name: appName,\n    actionSanitizer: ({ payload, type }: { payload: any; type: string }) => ({\n      payload,\n      type,\n    }),\n  }\n}\n\n// BigInt Serialization Middleware\n// https://redux-toolkit.js.org/api/serializabilityMiddleware\nconst isPlain = (val: any): boolean => {\n  const isPlainObject = (obj: object): boolean => {\n    if (obj === null) return false\n    const proto = Object.getPrototypeOf(obj)\n    return proto !== null && Object.getPrototypeOf(proto) === null\n  }\n  return (\n    typeof val === 'undefined' ||\n    val === null ||\n    typeof val === 'string' ||\n    typeof val === 'boolean' ||\n    typeof val === 'number' ||\n    Array.isArray(val) ||\n    isPlainObject(val) ||\n    typeof val === 'bigint' ||\n    val instanceof PublicKey ||\n    val instanceof BN ||\n    Buffer.isBuffer(val)\n  )\n}\nBigInt.prototype.toJSON = function () {\n  return this.toString() // https://github.com/GoogleChromeLabs/jsbi/issues/30\n}\nexport const bigintSerializationMiddleware = {\n  serializableCheck: {\n    isSerializable: isPlain,\n  },\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\n\n/**\n * Interface & Utility\n */\n\nexport type State = {\n  counter: number\n}\n\n/**\n * Store constructor\n */\n\nconst NAME = 'main'\nconst initialState: State = {\n  counter: 0,\n}\n\n/**\n * Actions\n */\n\nexport const increaseCounter = createAsyncThunk<State, void, { state: any }>(\n  `${NAME}/increaseCounter`,\n  async (_, { getState }) => {\n    const {\n      main: { counter },\n    } = getState()\n    return { counter: counter + 1 }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      increaseCounter.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","import { configureStore } from '@reduxjs/toolkit'\nimport { devTools, bigintSerializationMiddleware } from 'model/devTools'\n\nimport main from 'model/main.controller'\n\n/**\n * Isolated store\n */\nconst model = configureStore({\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware(bigintSerializationMiddleware),\n  devTools: devTools(process.env.REACT_APP_ID as string),\n  reducer: {\n    main,\n  },\n})\n\nexport type AppState = ReturnType<typeof model.getState>\nexport type AppDispatch = typeof model.dispatch\nexport default model\n","import { Provider } from 'react-redux'\nimport { UIProvider } from '@sentre/senhub'\n\nimport View from 'view'\n\nimport model from 'model'\nimport configs from 'configs'\n\nconst {\n  manifest: { appId },\n} = configs\n\nexport const Page = () => {\n  return (\n    <UIProvider appId={appId} antd>\n      <Provider store={model}>\n        <View />\n      </Provider>\n    </UIProvider>\n  )\n}\n\nexport * from 'static.app'\n"],"names":["Object","defineProperty","exports","value","enumerable","get","_logo","default","_README","_panel","_interopRequireDefault","require","_panel2","obj","__esModule","panels","shared","appId","process","url","manifest","development","production","env","configs","setBackground","useUI","useEffect","light","dark","wallet","window","sentre","src","title","BigInt","prototype","toJSON","this","toString","bigintSerializationMiddleware","serializableCheck","isSerializable","val","Array","isArray","proto","getPrototypeOf","isPlainObject","PublicKey","BN","Buffer","isBuffer","NAME","increaseCounter","createAsyncThunk","async","_","getState","main","counter","createSlice","name","initialState","reducers","extraReducers","builder","addCase","fulfilled","state","payload","assign","configureStore","middleware","getDefaultMiddleware","devTools","reducer","Page","UIProvider","antd","Provider","store","model"],"sourceRoot":""}