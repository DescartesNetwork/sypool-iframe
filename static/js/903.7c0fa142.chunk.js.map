{"version":3,"file":"static/js/903.7c0fa142.chunk.js","mappings":"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","sources":["os/store/accounts.reducer.ts","os/store/flags.reducer.ts","os/store/index.ts","os/store/page.reducer.ts","os/store/pools.reducer.ts","os/store/search.reducer.ts","os/store/ui.reducer.ts","os/store/walkthrough.reducer.ts","os/store/wallet.reducer.ts","os/view/wallet/lib/keystoreWallet.ts","shared/devTools.ts","shared/pdb/ipfs.ts","shared/runtime.ts","shared/storage.ts","shared/dataloader/constant.ts","shared/dataloader/request.ts","shared/dataloader/cache.ts","shared/dataloader/index.ts","shared/util.ts"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { account, AccountData } from '@senswap/sen-js'\n\n/**\n * Interface & Utility\n */\n\nexport type AccountsState = Record<string, AccountData>\n\n/**\n * Store constructor\n */\n\nconst NAME = 'accounts'\nconst initialState: AccountsState = {}\n\n/**\n * Actions\n */\n\nexport const getAccounts = createAsyncThunk(\n  `${NAME}/getAccounts`,\n  async ({ owner }: { owner: string }) => {\n    if (!account.isAddress(owner))\n      throw new Error('Invalid owner/wallet address')\n    const { splt } = window.sentre\n    const ownerPublicKey = account.fromAddress(owner)\n    const { value } = await splt.connection.getTokenAccountsByOwner(\n      ownerPublicKey,\n      { programId: splt.spltProgramId },\n    )\n    let bulk: AccountsState = {}\n    value.forEach(({ pubkey, account: { data: buf } }) => {\n      const address = pubkey.toBase58()\n      const data = splt.parseAccountData(buf)\n      return (bulk[address] = data)\n    })\n    return bulk\n  },\n)\n\nexport const getAccount = createAsyncThunk<\n  AccountsState,\n  { address: string },\n  { state: any }\n>(`${NAME}/getAccount`, async ({ address }, { getState }) => {\n  if (!account.isAddress(address)) throw new Error('Invalid account address')\n  const {\n    accounts: { [address]: data },\n  } = getState()\n  if (data) return { [address]: data }\n  const { splt } = window.sentre\n  const raw = await splt.getAccountData(address)\n  return { [address]: raw }\n})\n\nexport const upsetAccount = createAsyncThunk<\n  AccountsState,\n  { address: string; data: AccountData },\n  { state: any }\n>(`${NAME}/upsetAccount`, async ({ address, data }) => {\n  if (!account.isAddress(address)) throw new Error('Invalid address')\n  if (!data) throw new Error('Data is empty')\n  return { [address]: data }\n})\n\nexport const deleteAccount = createAsyncThunk(\n  `${NAME}/deleteAccount`,\n  async ({ address }: { address: string }) => {\n    if (!account.isAddress(address)) throw new Error('Invalid address')\n    return { address }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(getAccounts.fulfilled, (state, { payload }) => payload)\n      .addCase(\n        getAccount.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        upsetAccount.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        deleteAccount.fulfilled,\n        (state, { payload }) => void delete state[payload.address],\n      ),\n})\n\nexport default slice.reducer\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { account } from '@senswap/sen-js'\n\nimport PDB from 'shared/pdb'\n\n/**\n * Interface & Utility\n */\n\ntype FlagsState = {\n  visited: boolean\n  loading: boolean\n}\n\n/**\n * Store constructor\n */\n\nconst NAME = 'flags'\nconst initialState: FlagsState = {\n  visited: true,\n  loading: true,\n}\n\n/**\n * Actions\n */\n\nexport const loadVisited = createAsyncThunk<\n  Partial<FlagsState>,\n  void,\n  { state: any }\n>(`${NAME}/loadVisited`, async (_, { getState }) => {\n  const {\n    wallet: { address: walletAddress },\n  } = getState()\n  if (!account.isAddress(walletAddress))\n    throw new Error('Wallet is not connected yet')\n  const db = new PDB(walletAddress).createInstance('sentre')\n  const visited: boolean = (await db.getItem('visited')) || false\n  return { visited }\n})\n\nexport const updateVisited = createAsyncThunk<\n  Partial<FlagsState>,\n  boolean,\n  { state: any }\n>(`${NAME}/updateVisited`, async (visited, { getState }) => {\n  const {\n    wallet: { address },\n  } = getState()\n  if (!account.isAddress(address))\n    throw new Error('Wallet is not connected yet')\n  const db = new PDB(address).createInstance('sentre')\n  await db.setItem('visited', visited)\n  return { visited }\n})\n\nexport const updateLoading = createAsyncThunk(\n  `${NAME}/updateLoading`,\n  async (loading: boolean) => {\n    return { loading }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(\n        loadVisited.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        updateVisited.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        updateLoading.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      ),\n})\n\nexport default slice.reducer\n","import {\n  createDispatchHook,\n  createSelectorHook,\n  createStoreHook,\n  useDispatch,\n  useSelector,\n} from 'react-redux'\nimport { configureStore } from '@reduxjs/toolkit'\nimport { RootContext } from '@senhub/context'\nimport { devTools, bigintSerializationMiddleware } from 'shared/devTools'\n\nimport ui from './ui.reducer'\nimport flags from './flags.reducer'\nimport page from './page.reducer'\nimport wallet from './wallet.reducer'\nimport accounts from './accounts.reducer'\nimport mints from './mints.reducer'\nimport pools from './pools.reducer'\nimport search from './search.reducer'\nimport walkthrough from './walkthrough.reducer'\n\n/**\n * Root types\n */\nexport type RootState = ReturnType<typeof store.getState>\nexport type RootDispatch = typeof store.dispatch\n\n/**\n * Root hooks\n */\nexport const useRootStore = createStoreHook(RootContext)\nexport const useRootDispatch: typeof useDispatch =\n  createDispatchHook(RootContext)\nexport const useRootSelector: typeof useSelector =\n  createSelectorHook(RootContext)\n\n/**\n * Root store\n */\nconst store = configureStore({\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware(bigintSerializationMiddleware),\n  devTools: devTools('sentre'),\n  reducer: {\n    ui,\n    flags,\n    page,\n    wallet,\n    accounts,\n    mints,\n    pools,\n    search,\n    walkthrough,\n  },\n})\n\nexport default store\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { account } from '@senswap/sen-js'\n\nimport PDB from 'shared/pdb'\nimport configs from 'os/configs'\nimport { env } from 'shared/runtime'\n\nconst {\n  register: { senreg, extra, devAppId },\n} = configs\n\n/**\n * Interface & Utility\n */\n\nexport type PageState = {\n  register: SenReg\n  appIds: AppIds\n}\n\nconst troubleshoot = (register: SenReg, appIds?: AppIds): AppIds => {\n  if (!appIds || !Array.isArray(appIds)) return []\n  if (env === 'development' && !appIds.includes(devAppId))\n    appIds.unshift(devAppId)\n  return appIds.filter((appId) => register[appId])\n}\nconst fetchRegister = async () => {\n  try {\n    const res = await fetch(senreg)\n    return await res.json()\n  } catch (er) {\n    return {}\n  }\n}\n\n/**\n * Store constructor\n */\n\nconst NAME = 'page'\nconst initialState: PageState = {\n  register: {},\n  appIds: [],\n}\n\n/**\n * Actions\n */\n\n// Must fetch register at very first of the process\nexport const loadRegister = createAsyncThunk(\n  `${NAME}/loadRegister`,\n  async () => {\n    const register = await fetchRegister()\n    return { register: { ...register, ...extra } }\n  },\n)\n\n// For sandbox only\nexport const installManifest = createAsyncThunk<\n  Partial<PageState>,\n  ComponentManifest,\n  { state: any }\n>(`${NAME}/installManifest`, async (manifest, { getState }) => {\n  const {\n    wallet: { address: walletAddress },\n    page: { appIds, register },\n  } = getState()\n  if (!account.isAddress(walletAddress))\n    throw new Error('Wallet is not connected yet.')\n  if (appIds.includes(manifest.appId))\n    throw new Error('Cannot run sandbox for an installed application.')\n  const newAppIds: AppIds = [...appIds]\n  newAppIds.push(manifest.appId)\n  const newRegister: SenReg = { ...register }\n  newRegister[manifest.appId] = manifest\n  return { appIds: newAppIds, register: newRegister }\n})\n\n/**\n * App Actions\n */\nexport const loadPage = createAsyncThunk<\n  Partial<PageState>,\n  void,\n  { state: any }\n>(`${NAME}/loadPage`, async (_, { getState }) => {\n  const {\n    wallet: { address: walletAddress },\n    page: { register },\n  } = getState()\n\n  if (!account.isAddress(walletAddress))\n    throw new Error('Wallet is not connected yet.')\n  // Fetch user's apps\n  const db = new PDB(walletAddress).createInstance('sentre')\n  const appIds = troubleshoot(\n    register,\n    (await db.getItem('appIds')) || initialState.appIds,\n  )\n  return { appIds }\n})\n\nexport const updatePage = createAsyncThunk<\n  Partial<PageState>,\n  AppIds,\n  { state: any }\n>(`${NAME}/updatePage`, async (appIds, { getState }) => {\n  const {\n    wallet: { address: walletAddress },\n    page: { register },\n  } = getState()\n  if (!account.isAddress(walletAddress))\n    throw new Error('Wallet is not connected yet.')\n  appIds = troubleshoot(register, appIds)\n  const db = new PDB(walletAddress).createInstance('sentre')\n  await db.setItem('appIds', appIds)\n  return { appIds }\n})\n\nexport const installApp = createAsyncThunk<\n  Partial<PageState>,\n  string,\n  { state: any }\n>(`${NAME}/installApp`, async (appId, { getState }) => {\n  const {\n    wallet: { address: walletAddress },\n    page: { appIds },\n  } = getState()\n  if (!account.isAddress(walletAddress))\n    throw new Error('Wallet is not connected yet.')\n  if (appIds.includes(appId)) return {}\n  const newAppIds: AppIds = [...appIds]\n  newAppIds.push(appId)\n  const db = new PDB(walletAddress).createInstance('sentre')\n  await db.setItem('appIds', newAppIds)\n  return { appIds: newAppIds }\n})\n\nexport const uninstallApp = createAsyncThunk<\n  Partial<PageState>,\n  string,\n  { state: any }\n>(`${NAME}/uninstallApp`, async (appId, { getState }) => {\n  const {\n    wallet: { address: walletAddress },\n    page: { appIds },\n  } = getState()\n  if (!account.isAddress(walletAddress))\n    throw new Error('Wallet is not connected yet.')\n  if (!appIds.includes(appId)) return {}\n  const newAppIds = appIds.filter((_appId: string) => _appId !== appId)\n  const pdb = new PDB(walletAddress)\n  const db = pdb.createInstance('sentre')\n  await db.setItem('appIds', newAppIds)\n  await pdb.dropInstance(appId)\n  return { appIds: newAppIds }\n})\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(\n        loadRegister.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        installManifest.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        loadPage.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        updatePage.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        installApp.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        uninstallApp.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      ),\n})\n\nexport default slice.reducer\n","import { AccountInfo, PublicKey } from '@solana/web3.js'\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { account, PoolData } from '@senswap/sen-js'\nimport configs from 'os/configs'\n\nconst {\n  sol: { taxmanAddress },\n} = configs\n\n/**\n * Interface & Utility\n */\n\nexport type PoolsState = Record<string, PoolData>\n\n/**\n * Store constructor\n */\n\nconst NAME = 'pools'\nconst initialState: PoolsState = {}\n\n/**\n * Actions\n */\n\nexport const getPools = createAsyncThunk(`${NAME}/getPools`, async () => {\n  const { swap } = window.sentre\n  // Get all pools\n  const value: Array<{ pubkey: PublicKey; account: AccountInfo<Buffer> }> =\n    await swap.connection.getProgramAccounts(swap.swapProgramId, {\n      filters: [\n        { dataSize: 257 },\n        { memcmp: { bytes: taxmanAddress, offset: 65 } },\n      ],\n    })\n  let bulk: PoolsState = {}\n  value.forEach(({ pubkey, account: { data: buf } }) => {\n    const address = pubkey.toBase58()\n    const data = swap.parsePoolData(buf)\n    bulk[address] = data\n  })\n  return bulk\n})\n\nexport const getPool = createAsyncThunk<\n  PoolsState,\n  { address: string },\n  { state: any }\n>(`${NAME}/getPool`, async ({ address }, { getState }) => {\n  if (!account.isAddress(address)) throw new Error('Invalid pool address')\n  const {\n    pools: { [address]: data },\n  } = getState()\n  if (data) return { [address]: data }\n  const { swap } = window.sentre\n  const raw = await swap.getPoolData(address)\n  return { [address]: raw }\n})\n\nexport const upsetPool = createAsyncThunk<\n  PoolsState,\n  { address: string; data: PoolData },\n  { state: any }\n>(`${NAME}/upsetPool`, async ({ address, data }) => {\n  if (!account.isAddress(address)) throw new Error('Invalid pool address')\n  if (!data) throw new Error('Data is empty')\n  return { [address]: data }\n})\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(getPools.fulfilled, (state, { payload }) => payload)\n      .addCase(\n        getPool.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        upsetPool.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      ),\n})\n\nexport default slice.reducer\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\n\n/**\n * Interface & Utility\n */\n\ntype SearchState = {\n  visible: boolean\n  value: string\n  loading: boolean\n  disabled: boolean\n}\n\n/**\n * Store constructor\n */\n\nconst NAME = 'search'\nconst initialState: SearchState = {\n  visible: false,\n  value: '',\n  loading: false,\n  disabled: false,\n}\n\n/**\n * Actions\n */\n\nexport const setVisible = createAsyncThunk(\n  `${NAME}/setVisible`,\n  async (visible: boolean) => {\n    return { visible }\n  },\n)\n\nexport const setValue = createAsyncThunk(\n  `${NAME}/setValue`,\n  async (value: string) => {\n    return { value }\n  },\n)\n\nexport const setLoading = createAsyncThunk(\n  `${NAME}/setLoading`,\n  async (loading: boolean) => {\n    return { loading }\n  },\n)\n\nexport const setDisabled = createAsyncThunk(\n  `${NAME}/setDisabled`,\n  async (disabled: boolean) => {\n    return { disabled }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(\n        setVisible.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        setValue.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        setLoading.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        setDisabled.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      ),\n})\n\nexport default slice.reducer\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\n\n/**\n * Interface & Utility\n */\n\nexport type Infix = 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\nexport type Theme = 'light' | 'dark'\nexport type Background = Record<Theme, string | undefined>\n\nexport type UIState = {\n  theme: Theme\n  width: number\n  infix: Infix\n  touchable: boolean\n  visibleActionCenter: boolean\n  visibleInstaller: boolean\n  background: Background\n}\n\nconst getInfix = (): Infix => {\n  const width = window.innerWidth\n  if (width < 576) return 'xs'\n  if (width < 768) return 'sm'\n  if (width < 992) return 'md'\n  if (width < 1200) return 'lg'\n  if (width < 1400) return 'xl'\n  return 'xxl'\n}\nconst isTouchable = () => {\n  return 'ontouchstart' in window || navigator.maxTouchPoints > 0\n}\nconst getTheme = (): Theme => {\n  if (window.matchMedia('(prefers-color-scheme: light)').matches) return 'light'\n  return 'dark'\n}\n\n/**\n * Store constructor\n */\n\nconst NAME = 'ui'\nconst initialState: UIState = {\n  theme: getTheme(),\n  width: window.innerWidth,\n  infix: getInfix(),\n  touchable: isTouchable(),\n  visibleActionCenter: false,\n  visibleInstaller: false,\n  background: {\n    light: '',\n    dark: '',\n  },\n}\n\n/**\n * Actions\n */\n\nexport const setTheme = createAsyncThunk(\n  `${NAME}/setTheme`,\n  async (theme: Theme) => {\n    return { theme }\n  },\n)\n\nexport const resize = createAsyncThunk(`${NAME}/resize`, async () => {\n  const width = window.innerWidth\n  const infix = getInfix()\n  return { width, infix }\n})\n\nexport const setVisibleActionCenter = createAsyncThunk(\n  `${NAME}/setVisibleActionCenter`,\n  async (visible: boolean) => {\n    return { visibleActionCenter: visible }\n  },\n)\n\nexport const setVisibleInstaller = createAsyncThunk(\n  `${NAME}/setVisibleInstaller`,\n  async (visible: boolean) => {\n    return { visibleInstaller: visible }\n  },\n)\n\nexport const setBackground = createAsyncThunk(\n  `${NAME}/setBackground`,\n  async (background: Background) => {\n    return { background }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(\n        setTheme.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        resize.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        setVisibleActionCenter.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        setVisibleInstaller.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        setBackground.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      ),\n})\n\nexport default slice.reducer\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\n\n/**\n * Interface & Utility\n */\nexport enum WalkThroughType {\n  Default,\n  NewComer,\n}\n\ntype WalkThorughState = {\n  type: WalkThroughType\n  run: boolean\n  step: number\n}\n\n/**\n * Store constructor\n */\n\nconst NAME = 'walkthrough'\nconst initialState: WalkThorughState = {\n  type: WalkThroughType.Default,\n  run: false,\n  step: 0,\n}\n\n/**\n * Actions\n */\n\nexport const setWalkthrough = createAsyncThunk<\n  Partial<WalkThorughState>,\n  Partial<WalkThorughState>,\n  { state: any }\n>(`${NAME}/setWalkthrough`, async (state) => {\n  return { ...state }\n})\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      setWalkthrough.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { Lamports, SPLT, Swap, WalletInterface } from '@senswap/sen-js'\n\nimport configs from 'os/configs'\nimport { GuestWallet } from 'os/view/wallet/lib'\n\n/**\n * Interface & Utility\n */\n\nexport type WalletState = {\n  visible: boolean\n  address: string\n  lamports: bigint\n}\n\nconst initializeWindow = async (wallet?: WalletInterface) => {\n  const {\n    sol: { node, spltAddress, splataAddress, swapAddress },\n  } = configs\n  window.sentre = {\n    wallet: wallet || new GuestWallet(),\n    lamports: new Lamports(node),\n    splt: new SPLT(spltAddress, splataAddress, node),\n    swap: new Swap(swapAddress, spltAddress, splataAddress, node),\n  }\n}\n\nconst destroyWindow = async () => {\n  if (window.sentre?.wallet) window.sentre.wallet.disconnect()\n  await initializeWindow()\n}\n\n/**\n * Store constructor\n */\n\nconst NAME = 'wallet'\nconst initialState: WalletState = {\n  visible: false,\n  address: '',\n  lamports: BigInt(0),\n}\n\n/**\n * Actions\n */\n\nexport const openWallet = createAsyncThunk(`${NAME}/openWallet`, async () => {\n  return { visible: true }\n})\n\nexport const closeWallet = createAsyncThunk(`${NAME}/closeWallet`, async () => {\n  return { visible: false }\n})\n\nexport const connectWallet = createAsyncThunk(\n  `${NAME}/connectWallet`,\n  async (wallet: any) => {\n    if (!wallet) throw new Error('Invalid wallet instance')\n    await initializeWindow(wallet)\n    const address = await wallet.getAddress()\n    const lamports = await window.sentre.lamports.getLamports(address)\n    return { address, lamports: BigInt(lamports), visible: false }\n  },\n)\n\nexport const updateWallet = createAsyncThunk(\n  `${NAME}/updateWallet`,\n  async ({ lamports }: Partial<WalletState>) => {\n    return { lamports }\n  },\n)\n\nexport const disconnectWallet = createAsyncThunk(\n  `${NAME}/disconnectWallet`,\n  async () => {\n    await destroyWindow()\n    window.location.reload() // Reset all redux store\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(\n        openWallet.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        closeWallet.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        connectWallet.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        updateWallet.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        disconnectWallet.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      ),\n})\n\nexport default slice.reducer\n","import { account, Keystore } from '@senswap/sen-js'\n\nimport SecretKeyWallet from './secretkeyWallet'\n\nclass KeystoreWallet extends SecretKeyWallet {\n  constructor(keystore: Keystore, password: string) {\n    super(KeystoreWallet.extractSecretKey(keystore, password), password)\n  }\n\n  static extractSecretKey = (keystore: Keystore, password: string): string => {\n    const keypair = account.fromKeystore(keystore, password)\n    if (!keypair) throw new Error('Invalid ketstore or password')\n    const secretKey = Buffer.from(keypair.secretKey).toString('hex')\n    return secretKey\n  }\n}\n\nexport default KeystoreWallet\n","import { PublicKey } from '@solana/web3.js'\nimport BN from 'bn.js'\n\n// Bugfix performance\n// https://github.com/zalmoxisus/redux-devtools-extension/blob/master/docs/Troubleshooting.md#excessive-use-of-memory-and-cpu\nexport const devTools = (appName: string): any => {\n  if (process.env.REACT_APP_ENV !== 'development') return false\n  return {\n    name: appName,\n    actionSanitizer: ({ payload, type }: { payload: any; type: string }) => ({\n      payload,\n      type,\n    }),\n  }\n}\n\n// BigInt Serialization Middleware\n// https://redux-toolkit.js.org/api/serializabilityMiddleware\nconst isPlain = (val: any): boolean => {\n  const isPlainObject = (obj: object): boolean => {\n    if (obj === null) return false\n    const proto = Object.getPrototypeOf(obj)\n    return proto !== null && Object.getPrototypeOf(proto) === null\n  }\n  return (\n    typeof val === 'undefined' ||\n    val === null ||\n    typeof val === 'string' ||\n    typeof val === 'boolean' ||\n    typeof val === 'number' ||\n    Array.isArray(val) ||\n    isPlainObject(val) ||\n    typeof val === 'bigint' ||\n    val instanceof PublicKey ||\n    val instanceof BN ||\n    val instanceof Buffer\n  )\n}\nBigInt.prototype.toJSON = function () {\n  return this.toString() // https://github.com/GoogleChromeLabs/jsbi/issues/30\n}\nexport const bigintSerializationMiddleware = {\n  serializableCheck: {\n    isSerializable: isPlain,\n  },\n}\n","import { create, isIPFS } from 'ipfs-core'\nimport { asyncWait } from 'shared/util'\n\nclass IPFS {\n  private _ipfs: any = async () => {\n    try {\n      if (!window.ipfs) window.ipfs = await create()\n      return window.ipfs\n    } catch (er) {\n      await asyncWait(500)\n      return await this._ipfs()\n    }\n  }\n\n  static isCID = (cid: string | undefined | null): boolean => {\n    try {\n      if (!cid) return false\n      return isIPFS.multihash(cid)\n    } catch (er) {\n      return false\n    }\n  }\n\n  get = async (cid: string) => {\n    if (!IPFS.isCID(cid)) throw new Error('Invalid CID')\n    const ipfs = await this._ipfs()\n    const stream = await ipfs.cat(cid)\n    let raw = ''\n    for await (const chunk of stream) raw += Buffer.from(chunk).toString()\n    const data = JSON.parse(raw)\n    return data\n  }\n\n  set = async (data: object): Promise<string> => {\n    if (!data) throw new Error('Empty data')\n    const raw = JSON.stringify(data)\n    const ipfs = await this._ipfs()\n    const { cid } = await ipfs.add(raw)\n    return cid.toString()\n  }\n}\n\nexport default IPFS\n","import { Connection } from '@solana/web3.js'\nimport storage from './storage'\n\n/**\n * Environment\n */\nconst getEnv = () => {\n  switch (process.env.REACT_APP_ENV) {\n    case 'development':\n      return 'development'\n    case 'staging':\n      return 'staging'\n    case 'production':\n      return 'production'\n    default:\n      return 'development'\n  }\n}\nexport type Env = 'development' | 'staging' | 'production'\nexport const env: Env = getEnv()\n\n/**\n * Network\n */\nconst getNetwork = () => {\n  switch (storage.get('network')) {\n    case 'devnet':\n      return 'devnet'\n    case 'testnet':\n      return 'testnet'\n    case 'mainnet':\n      return 'mainnet'\n    default:\n      return 'mainnet'\n  }\n}\nexport type Net = 'devnet' | 'testnet' | 'mainnet'\nexport const net: Net = getNetwork()\n\nexport const onSwitchNetwork = (value: Net) => {\n  storage.set('network', value)\n  return window.location.reload()\n}\n\n/**\n * Chain ID\n */\nconst getChainId = () => {\n  switch (net) {\n    case 'devnet':\n      return 103\n    case 'testnet':\n      return 102\n    case 'mainnet':\n      return 101\n    default:\n      return 101\n  }\n}\nexport type ChainId = 101 | 102 | 103\nexport const chainId: ChainId = getChainId()\n\n/**\n * RPC Node\n */\nconst CLUSTERS: Record<Net, string[]> = {\n  devnet: [\n    'https://api.devnet.solana.com',\n    'https://psytrbhymqlkfrhudd.dev.genesysgo.net:8899/',\n  ],\n  testnet: ['https://api.testnet.solana.com'],\n  mainnet: [\n    'https://ssc-dao.genesysgo.net/',\n    'https://solana-api.projectserum.com',\n    'https://solitary-autumn-water.solana-mainnet.quiknode.pro/dcbac9d444818a20ac583541dec35b44c6840888/',\n  ],\n}\nconst getRPC = () => {\n  const rpcs = CLUSTERS[net]\n  const rpc = rpcs[Math.floor(Math.random() * rpcs.length)]\n  console.log('Debug OS RPC:', rpc)\n  return rpc\n}\nexport const rpc: string = getRPC()\n\n/**\n * Ping Solana cluster\n * @param nodeRpc - Solana's RPC cluster\n * @returns ping time\n */\nexport const pingCluster = async (nodeRpc: string): Promise<number> => {\n  const connection = new Connection(nodeRpc)\n  const start = Date.now()\n  await connection.getVersion()\n  const end = Date.now()\n  return end - start\n}\n","const KEY = 'sentre'\nconst driver = window.localStorage\n\nconst convert = (value: string | null) => {\n  try {\n    if (!value) return null\n    return JSON.parse(value)\n  } catch (e) {\n    return null\n  }\n}\n\nconst storage = {\n  set: (key: string, value: any) => {\n    let data = convert(driver.getItem(KEY))\n    if (!data || typeof data !== 'object') data = {}\n    data[key] = value\n    driver.setItem(KEY, JSON.stringify(data))\n  },\n  get: (key: string) => {\n    let data = convert(driver.getItem(KEY))\n    if (!data || typeof data !== 'object') return null\n    return data[key]\n  },\n  clear: (key: string) => {\n    storage.set(key, null)\n  },\n}\n\nexport default storage\n","export type LimitConfig = {\n  calls: number\n  time: number\n}\n\nexport type CacheConfig = {\n  ttl: number // millisecond\n}\n\nexport type SingleFlightConfig = {\n  limit?: LimitConfig\n  cache?: CacheConfig\n}\n\n// 10 request per 1 second\nexport const DEFAULT_LIMIT_CONFIG: LimitConfig = {\n  calls: 10,\n  time: 1000,\n}\n\n// 10 request per 1 second\nexport const DEFAULT_CACHE_CONFIG: CacheConfig = {\n  ttl: 30000,\n}\n\nexport const DEFAULT_SINGLE_FLIGHT_CONFIG: SingleFlightConfig = {\n  limit : DEFAULT_LIMIT_CONFIG,\n  cache: DEFAULT_CACHE_CONFIG\n}","export interface IRequestQueue {\n  key: string\n  add(resolve: any, reject: any): void\n  resolves(data: any): void\n  rejects(error: any): void\n}\n\nexport class RequestQueue implements IRequestQueue {\n  key = ''\n  private resolveQueue: any[] = []\n  private rejectQueue: any[] = []\n  constructor(key: string) {\n    this.key = key\n  }\n\n  add(resolve: any, reject: any) {\n    this.resolveQueue.push(resolve)\n    this.rejectQueue.push(reject)\n  }\n\n  resolves(data: any) {\n    while (this.resolveQueue.length > 0) {\n      const resolve = this.resolveQueue.shift()\n      resolve(data)\n    }\n  }\n\n  rejects(error: any) {\n    while (this.rejectQueue.length > 0) {\n      const reject = this.rejectQueue.shift()\n      reject(error)\n    }\n  }\n}\n","import { DEFAULT_CACHE_CONFIG } from './constant'\nimport { CacheConfig } from './constant'\n\nexport class SingleFlightCache {\n  private static mapCache = new Map<string, any>()\n\n  static set(\n    key: string,\n    value: any,\n    configs: CacheConfig = DEFAULT_CACHE_CONFIG,\n  ) {\n    this.mapCache.set(key, value)\n    setTimeout(() => {\n      this.mapCache.delete(key)\n    }, configs.ttl)\n  }\n\n  static get(key: string) {\n    return this.mapCache.get(key)\n  }\n}\n","import { DEFAULT_SINGLE_FLIGHT_CONFIG, SingleFlightConfig } from './constant'\n\nimport { IRequestQueue, RequestQueue } from './request'\nimport { SingleFlightCache } from './cache'\n\nexport class DataLoader {\n  static mapInstance = new Map<string, SingleFlight>()\n\n  private static getSingleFlight(configs: SingleFlightConfig): SingleFlight {\n    const instanceKey = JSON.stringify(configs)\n    if (this.mapInstance.has(instanceKey)) {\n      const instance = this.mapInstance.get(instanceKey)\n      if (instance) return instance\n    }\n\n    let newSingleFlight = new SingleFlight(configs)\n    this.mapInstance.set(instanceKey, newSingleFlight)\n    return newSingleFlight\n  }\n\n  static async load<T>(\n    requestKey: string | object,\n    callback: () => Promise<T>,\n    configs: SingleFlightConfig = {},\n  ): Promise<T> {\n    if (typeof requestKey === 'object') requestKey = JSON.stringify(requestKey)\n\n    let singleFlight = DataLoader.getSingleFlight(configs)\n    DataLoader.mapInstance.set(requestKey, singleFlight)\n    const newRequest = new RequestQueue(requestKey)\n    return singleFlight.load<T>(newRequest, callback)\n  }\n}\n\nclass SingleFlight {\n  private config: SingleFlightConfig\n  private intervalRequest: any\n  private timeLogs: number[] = []\n\n  private mapRequestCalling = new Map<string, IRequestQueue>()\n  private requestQueue: IRequestQueue[] = []\n\n  constructor(configs: SingleFlightConfig) {\n    this.config = Object.assign(DEFAULT_SINGLE_FLIGHT_CONFIG, configs)\n  }\n\n  async load<T>(newRequest: IRequestQueue, callback: () => Promise<T>) {\n    const cacheData = SingleFlightCache.get(newRequest.key)\n    if (cacheData) return Promise.resolve(cacheData)\n\n    let isFetch = false\n    let request = this.mapRequestCalling.get(newRequest.key)\n    if (!request) {\n      request = newRequest\n      isFetch = true\n      this.mapRequestCalling.set(request.key, request)\n    }\n\n    return new Promise((resolve, reject) => {\n      if (!request) return reject('Not found request!')\n      request.add(resolve, reject)\n      if (isFetch) {\n        this.fetch<T>(request, callback)\n      }\n    })\n  }\n\n  private fetch<T>(request: IRequestQueue, callback: () => Promise<T>) {\n    if (!this.validateLimit()) {\n      return this.addRequestQueue(request, callback)\n    }\n    this.createTimeLogs()\n\n    callback()\n      .then((response) => {\n        SingleFlightCache.set(request.key, response, this.config.cache)\n        request.resolves(response)\n      })\n      .catch((error) => {\n        request.rejects(error)\n      })\n      .finally(() => {\n        this.mapRequestCalling.delete(request.key)\n        this.fetchRequestQueue(callback)\n      })\n  }\n\n  private fetchRequestQueue(callback: () => Promise<any>) {\n    if (!this.validateLimit()) return\n    const request = this.requestQueue.shift()\n    if (request) this.load(request, callback)\n\n    if (this.requestQueue.length === 0 && this.intervalRequest) {\n      clearInterval(this.intervalRequest)\n    }\n  }\n\n  private addRequestQueue(\n    request: IRequestQueue,\n    callback: () => Promise<any>,\n  ) {\n    this.requestQueue.push(request)\n    this.intervalRequest = setInterval(() => {\n      this.fetchRequestQueue(callback)\n    }, this.config.limit?.time)\n  }\n\n  private validateLimit(): boolean {\n    return true\n  }\n\n  private createTimeLogs() {\n    if (!this.config.limit) return\n\n    const now = new Date().getTime()\n    this.timeLogs.push(now)\n    if (this.timeLogs.length > this.config.limit?.calls) {\n      this.timeLogs.shift()\n    }\n  }\n}\n","import { account, utils } from '@senswap/sen-js'\nimport numbro from 'numbro'\n\nimport { net } from 'shared/runtime'\nimport { DataLoader } from './dataloader'\n\n/**\n * Delay by async/await\n * @param ms - milisenconds\n * @returns\n */\nexport const asyncWait = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms))\n}\n\n/**\n * Shorten a long address\n * @param address - The long address\n * @param num - The number of the heading and trailing characters\n * @param delimiter - The delimiter\n * @returns Shortened address\n */\nexport const shortenAddress = (address: string, num = 4, delimiter = '...') => {\n  return (\n    address.substring(0, num) +\n    delimiter +\n    address.substring(address.length - num, address.length)\n  )\n}\n\n/**\n * Build a explorer url by context including addresses or transaction ids\n * @param addressOrTxId - Address or TxId\n * @returns\n */\nexport const explorer = (addressOrTxId: string): string => {\n  if (account.isAddress(addressOrTxId)) {\n    return `https://explorer.solana.com/address/${addressOrTxId}?cluster=${net}`\n  }\n  return `https://explorer.solana.com/tx/${addressOrTxId}?cluster=${net}`\n}\n\n/**\n * Wrapped Numbro - https://numbrojs.com/old-format.html\n * @param value - value\n * @returns\n */\nexport const numeric = (\n  value?: number | string | BigInt,\n): ReturnType<typeof numbro> => {\n  if (!value) return numbro('0')\n  return numbro(value)\n}\n\n/**\n * Generate a random color\n * @param seed - Seed\n * @param opacity - Opacity\n * @returns\n */\nexport const randomColor = (seed?: string, opacity?: string | number) => {\n  let hash = Math.floor(Math.random() * 16777215)\n  if (seed) {\n    hash = 0\n    for (let i = 0; i < seed.length; i++) {\n      hash = seed.charCodeAt(i) + ((hash << 5) - hash)\n    }\n  }\n  var rgb = [0, 0, 0]\n  for (let i = 0; i < 3; i++) {\n    var value = (hash >> (i * 8)) & 255\n    rgb[i] = value\n  }\n  return `rgba(${rgb[0]}, 100, ${rgb[1]},${opacity || 1})`\n}\n\n/**\n * Fetch coingecko data with cache\n * @param ticket - Token ticket\n * @returns\n */\nexport const fetchCGK = async (ticket = '') => {\n  return DataLoader.load('fetchCGK' + ticket, () => utils.parseCGK(ticket))\n}\n\n/**\n * Randomly choose an element in the input array\n * @param arr - Original array of elements\n * @returns\n */\nexport const randChoose = <T>(arr: T[]): T => {\n  const rand = Math.floor(Math.random() * arr.length)\n  return arr[rand]\n}\n\n/**\n * Randomize a subarray in the input array with a specific number of elements\n * @param arr - Original array of elements\n * @param num - Number of elements in randomized subarray\n * @returns\n */\nexport const randElements = <T>(arr: T[], num: number): T[] => {\n  if (arr.length < num) return [...arr]\n  const re: T[] = []\n  while (re.length < num) {\n    const el = randChoose(arr)\n    if (!re.includes(el)) re.push(el)\n  }\n  return re\n}\n"],"names":["NAME","getAccounts","createAsyncThunk","async","owner","account","Error","splt","window","sentre","ownerPublicKey","value","connection","getTokenAccountsByOwner","programId","spltProgramId","bulk","forEach","pubkey","data","buf","address","toBase58","parseAccountData","getAccount","getState","accounts","getAccountData","upsetAccount","deleteAccount","createSlice","name","initialState","reducers","extraReducers","builder","addCase","fulfilled","state","payload","Object","assign","loadVisited","_","wallet","walletAddress","db","PDB","createInstance","visited","getItem","updateVisited","setItem","updateLoading","loading","createStoreHook","RootContext","useRootDispatch","createDispatchHook","useRootSelector","createSelectorHook","store","configureStore","middleware","getDefaultMiddleware","bigintSerializationMiddleware","devTools","reducer","ui","flags","page","mints","pools","search","walkthrough","register","senreg","extra","devAppId","configs","troubleshoot","appIds","Array","isArray","env","includes","unshift","filter","appId","loadRegister","res","fetch","json","er","fetchRegister","installManifest","manifest","newAppIds","push","newRegister","loadPage","updatePage","installApp","uninstallApp","_appId","pdb","dropInstance","sol","taxmanAddress","getPools","swap","getProgramAccounts","swapProgramId","filters","dataSize","memcmp","bytes","offset","parsePoolData","getPool","getPoolData","upsetPool","setVisible","visible","setValue","setLoading","setDisabled","disabled","getInfix","width","innerWidth","theme","matchMedia","matches","infix","touchable","navigator","maxTouchPoints","visibleActionCenter","visibleInstaller","background","light","dark","setTheme","resize","setVisibleActionCenter","setVisibleInstaller","setBackground","WalkThroughType","type","Default","run","step","setWalkthrough","initializeWindow","node","spltAddress","splataAddress","swapAddress","GuestWallet","lamports","Lamports","SPLT","Swap","BigInt","openWallet","closeWallet","connectWallet","getAddress","getLamports","updateWallet","disconnectWallet","disconnect","destroyWindow","location","reload","KeystoreWallet","SecretKeyWallet","constructor","keystore","password","super","extractSecretKey","keypair","Buffer","from","secretKey","toString","appName","prototype","toJSON","this","serializableCheck","isSerializable","val","obj","proto","getPrototypeOf","isPlainObject","PublicKey","BN","IPFS","_ipfs","ipfs","create","asyncWait","get","isCID","cid","stream","cat","raw","chunk","JSON","parse","set","stringify","add","isIPFS","net","storage","getNetwork","onSwitchNetwork","chainId","getChainId","CLUSTERS","devnet","testnet","mainnet","rpc","rpcs","Math","floor","random","length","console","log","getRPC","pingCluster","Connection","nodeRpc","start","Date","now","getVersion","KEY","driver","localStorage","convert","e","key","clear","DEFAULT_CACHE_CONFIG","ttl","DEFAULT_SINGLE_FLIGHT_CONFIG","limit","calls","time","cache","RequestQueue","resolveQueue","rejectQueue","resolve","reject","resolves","shift","rejects","error","SingleFlightCache","mapCache","setTimeout","delete","Map","DataLoader","instanceKey","mapInstance","has","instance","newSingleFlight","SingleFlight","requestKey","callback","singleFlight","getSingleFlight","newRequest","load","config","intervalRequest","timeLogs","mapRequestCalling","requestQueue","cacheData","Promise","isFetch","request","validateLimit","addRequestQueue","createTimeLogs","then","response","catch","finally","fetchRequestQueue","clearInterval","setInterval","getTime","ms","shortenAddress","num","delimiter","substring","explorer","addressOrTxId","numeric","numbro","randomColor","seed","opacity","hash","i","charCodeAt","rgb","fetchCGK","ticket","utils","randChoose","arr"],"sourceRoot":""}