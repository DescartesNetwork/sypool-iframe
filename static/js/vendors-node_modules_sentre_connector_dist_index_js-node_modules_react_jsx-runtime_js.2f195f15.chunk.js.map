{"version":3,"file":"static/js/vendors-node_modules_sentre_connector_dist_index_js-node_modules_react_jsx-runtime_js.2f195f15.chunk.js","mappings":"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","sources":["../node_modules/@sentre/connector/dist/bridge.js","../node_modules/@sentre/connector/dist/constants.js","../node_modules/@sentre/connector/dist/gateway.js","../node_modules/@sentre/connector/dist/index.js","../node_modules/@sentre/connector/dist/walletConnector.js","../../src/util/to-buffer.ts","../../node_modules/minimalistic-assert/index.js","../../node_modules/inherits/inherits_browser.js","../../node_modules/hash.js/lib/hash/utils.js","../../node_modules/hash.js/lib/hash/common.js","../../node_modules/hash.js/lib/hash/sha/common.js","../../node_modules/hash.js/lib/hash/sha/1.js","../../node_modules/hash.js/lib/hash/sha/256.js","../../node_modules/hash.js/lib/hash/sha/224.js","../../node_modules/hash.js/lib/hash/sha/512.js","../../node_modules/hash.js/lib/hash/sha/384.js","../../node_modules/hash.js/lib/hash/sha.js","../../node_modules/hash.js/lib/hash/ripemd.js","../../node_modules/hash.js/lib/hash/hmac.js","../../node_modules/hash.js/lib/hash.js","../../node_modules/@ethersproject/logger/lib.esm/index.js","../../node_modules/@ethersproject/logger/lib.esm/_version.js","../../node_modules/@ethersproject/bytes/lib.esm/_version.js","../../node_modules/@ethersproject/bytes/lib.esm/index.js","../../node_modules/@ethersproject/sha2/lib.esm/sha2.js","../../node_modules/@ethersproject/sha2/lib.esm/_version.js","../../src/util/borsh-schema.ts","../../src/publickey.ts","../../src/account.ts","../../src/bpf-loader-deprecated.ts","../../src/transaction-constants.ts","../../src/layout.ts","../../src/util/shortvec-encoding.ts","../../src/message.ts","../../src/util/assert.ts","../../src/transaction.ts","../../src/sysvar.ts","../../src/util/send-and-confirm-transaction.ts","../../src/util/sleep.ts","../../src/instruction.ts","../../src/fee-calculator.ts","../../src/nonce-account.ts","../../src/util/bigint.ts","../../src/system-program.ts","../../src/loader.ts","../../src/bpf-loader.ts","../../src/compute-budget.ts","../../node_modules/fast-stable-stringify/index.js","../../src/epoch-schedule.ts","../../src/errors.ts","../../src/__forks__/browser/fetch-impl.ts","../../src/util/tx-expiry-custom-errors.ts","../../src/connection.ts","../../src/util/url.ts","../../src/keypair.ts","../../src/ed25519-program.ts","../../src/stake-program.ts","../../src/secp256k1-program.ts","../../src/validator-info.ts","../../src/vote-account.ts","../../src/vote-program.ts","../../src/util/send-and-confirm-raw-transaction.ts","../../src/util/cluster.ts","../../src/index.ts","../node_modules/react/cjs/react-jsx-runtime.production.min.js","../node_modules/react/jsx-runtime.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Messenger = void 0;\nconst CODE = 'sentre';\nclass Messenger {\n    constructor({ name = 'unknown', verbose = false, }) {\n        this.emit = (win, data) => {\n            return win.postMessage({ type: CODE, payload: data }, '*');\n        };\n        this.listen = (callback) => {\n            const handler = ({ data: { type, payload }, origin }) => {\n                if (type === CODE) {\n                    if (this.verbose)\n                        console.log(this.name, origin, payload);\n                    return callback(payload);\n                }\n            };\n            window.addEventListener('message', handler);\n            const kill = () => window.removeEventListener('message', handler);\n            this.killers.push(kill);\n            return kill;\n        };\n        this.killAll = () => {\n            while (this.killers.length > 0) {\n                const kill = this.killers.pop();\n                if (kill)\n                    kill();\n            }\n        };\n        this.name = name;\n        this.verbose = verbose;\n        this.killers = [];\n    }\n}\nexports.Messenger = Messenger;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ONE_SEC = exports.EVENTS = void 0;\nvar EVENTS;\n(function (EVENTS) {\n    EVENTS[EVENTS[\"CONNECT\"] = 0] = \"CONNECT\";\n    EVENTS[EVENTS[\"GET_ADDRESS\"] = 1] = \"GET_ADDRESS\";\n    EVENTS[EVENTS[\"SIGN_TRANSACTION\"] = 2] = \"SIGN_TRANSACTION\";\n    EVENTS[EVENTS[\"SIGN_ALL_TRANSACTIONS\"] = 3] = \"SIGN_ALL_TRANSACTIONS\";\n    EVENTS[EVENTS[\"SIGN_MESSAGE\"] = 4] = \"SIGN_MESSAGE\";\n})(EVENTS = exports.EVENTS || (exports.EVENTS = {}));\nexports.ONE_SEC = 1000;\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Gateway = void 0;\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst bridge_1 = require(\"./bridge\");\nconst constants_1 = require(\"./constants\");\nclass Gateway {\n    constructor(wallet, verbose = false) {\n        this.terminate = () => this.messenger.killAll();\n        this.emit = (id, data) => {\n            const child = document.getElementById(id);\n            if (!child || child.tagName !== 'IFRAME')\n                throw new Error(`Cannot find iframe with id ${id}`);\n            const wd = child === null || child === void 0 ? void 0 : child.contentWindow;\n            if (!wd)\n                throw new Error('Cannot access to iframe window');\n            return this.messenger.emit(wd, data);\n        };\n        this.onConnect = (id, uid) => {\n            return this.emit(id, { uid, event: constants_1.EVENTS.CONNECT, data: true });\n        };\n        this.onGetAddress = (id, uid) => __awaiter(this, void 0, void 0, function* () {\n            const address = yield this.wallet.getAddress();\n            return this.emit(id, { uid, event: constants_1.EVENTS.GET_ADDRESS, data: address });\n        });\n        this.onSignTransaction = (id, uid, buf) => __awaiter(this, void 0, void 0, function* () {\n            const tx = web3_js_1.Transaction.from(buf);\n            const signedTx = yield this.wallet.signTransaction(tx);\n            const serializedTx = signedTx.serialize();\n            return this.emit(id, {\n                uid,\n                event: constants_1.EVENTS.SIGN_TRANSACTION,\n                data: serializedTx,\n            });\n        });\n        this.onSignAllTransactions = (id, uid, bufs) => __awaiter(this, void 0, void 0, function* () {\n            const txs = bufs.map((buf) => web3_js_1.Transaction.from(buf));\n            const signedTxs = yield this.wallet.signAllTransactions(txs);\n            const serializedTxs = signedTxs.map((signedTx) => signedTx.serialize());\n            return this.emit(id, {\n                uid,\n                event: constants_1.EVENTS.SIGN_ALL_TRANSACTIONS,\n                data: serializedTxs,\n            });\n        });\n        this.onSignMessage = (id, uid, msg) => __awaiter(this, void 0, void 0, function* () {\n            const signedMsg = yield this.wallet.signMessage(msg);\n            return this.emit(id, {\n                uid,\n                event: constants_1.EVENTS.SIGN_MESSAGE,\n                data: signedMsg,\n            });\n        });\n        this.messenger = new bridge_1.Messenger({ name: 'gateway', verbose });\n        this.wallet = wallet;\n        this.messenger.listen(({ id, uid, event, data }) => __awaiter(this, void 0, void 0, function* () {\n            if (event === constants_1.EVENTS.CONNECT)\n                return this.onConnect(id, uid);\n            if (event === constants_1.EVENTS.GET_ADDRESS)\n                return this.onGetAddress(id, uid);\n            if (event === constants_1.EVENTS.SIGN_TRANSACTION)\n                return this.onSignTransaction(id, uid, data);\n            if (event === constants_1.EVENTS.SIGN_ALL_TRANSACTIONS)\n                return this.onSignAllTransactions(id, uid, data);\n            if (event === constants_1.EVENTS.SIGN_MESSAGE)\n                return this.onSignMessage(id, uid, data);\n        }));\n    }\n}\nexports.Gateway = Gateway;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./bridge\"), exports);\n__exportStar(require(\"./constants\"), exports);\n__exportStar(require(\"./gateway\"), exports);\n__exportStar(require(\"./walletConnector\"), exports);\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WalletConnector = exports.UID = void 0;\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst bridge_1 = require(\"./bridge\");\nconst constants_1 = require(\"./constants\");\nconst UID = () => Math.round(Math.random() * Math.pow(10, 9));\nexports.UID = UID;\nclass WalletConnector {\n    constructor(appId, verbose = false) {\n        this.interact = ({ event, data = {}, timeout = constants_1.ONE_SEC * 3, }) => __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                try {\n                    if (!window.parent)\n                        throw new Error('Cannot access to parent window');\n                    const timeoutId = setTimeout(() => reject('Request timeout'), timeout);\n                    const id = this.id;\n                    const uid = (0, exports.UID)();\n                    const kill = this.messenger.listen(({ event: catchedEvent, uid: catchedUID, data }) => {\n                        if (event === catchedEvent && uid === catchedUID) {\n                            clearTimeout(timeoutId);\n                            kill();\n                            return resolve(data);\n                        }\n                    });\n                    return this.messenger.emit(window.parent, { event, id, uid, data });\n                }\n                catch (er) {\n                    return reject(er.message);\n                }\n            });\n        });\n        this.isConnected = () => __awaiter(this, void 0, void 0, function* () {\n            return yield this.interact({\n                event: constants_1.EVENTS.CONNECT,\n                timeout: constants_1.ONE_SEC * 3,\n            });\n        });\n        this.getAddress = () => __awaiter(this, void 0, void 0, function* () {\n            return yield this.interact({\n                event: constants_1.EVENTS.GET_ADDRESS,\n                timeout: constants_1.ONE_SEC * 6,\n            });\n        });\n        this.signTransaction = (transaction) => __awaiter(this, void 0, void 0, function* () {\n            const serializedTx = yield this.interact({\n                event: constants_1.EVENTS.SIGN_TRANSACTION,\n                data: transaction.serialize({\n                    requireAllSignatures: false,\n                    verifySignatures: false,\n                }),\n                timeout: constants_1.ONE_SEC * 60,\n            });\n            const tx = web3_js_1.Transaction.from(serializedTx);\n            return tx;\n        });\n        this.signAllTransactions = (transactions) => __awaiter(this, void 0, void 0, function* () {\n            const serializedTxs = yield this.interact({\n                event: constants_1.EVENTS.SIGN_ALL_TRANSACTIONS,\n                data: transactions.map((transaction) => transaction.serialize({\n                    requireAllSignatures: false,\n                    verifySignatures: false,\n                })),\n                timeout: constants_1.ONE_SEC * 120,\n            });\n            const txs = serializedTxs.map((serializedTx) => web3_js_1.Transaction.from(serializedTx));\n            return txs;\n        });\n        this.signMessage = (message) => __awaiter(this, void 0, void 0, function* () {\n            const signedMessage = yield this.interact({\n                event: constants_1.EVENTS.SIGN_MESSAGE,\n                data: message,\n                timeout: constants_1.ONE_SEC * 60,\n            });\n            return signedMessage;\n        });\n        this.id = appId + '-iframe';\n        this.messenger = new bridge_1.Messenger({ name: this.id, verbose });\n    }\n}\nexports.WalletConnector = WalletConnector;\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","module.exports = assert;\n\nfunction assert(val, msg) {\n  if (!val)\n    throw new Error(msg || 'Assertion failed');\n}\n\nassert.equal = function assertEqual(l, r, msg) {\n  if (l != r)\n    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));\n};\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n","'use strict';\n\nvar assert = require('minimalistic-assert');\nvar inherits = require('inherits');\n\nexports.inherits = inherits;\n\nfunction isSurrogatePair(msg, i) {\n  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {\n    return false;\n  }\n  if (i < 0 || i + 1 >= msg.length) {\n    return false;\n  }\n  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;\n}\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg))\n    return msg.slice();\n  if (!msg)\n    return [];\n  var res = [];\n  if (typeof msg === 'string') {\n    if (!enc) {\n      // Inspired by stringToUtf8ByteArray() in closure-library by Google\n      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143\n      // Apache License 2.0\n      // https://github.com/google/closure-library/blob/master/LICENSE\n      var p = 0;\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n        if (c < 128) {\n          res[p++] = c;\n        } else if (c < 2048) {\n          res[p++] = (c >> 6) | 192;\n          res[p++] = (c & 63) | 128;\n        } else if (isSurrogatePair(msg, i)) {\n          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);\n          res[p++] = (c >> 18) | 240;\n          res[p++] = ((c >> 12) & 63) | 128;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        } else {\n          res[p++] = (c >> 12) | 224;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        }\n      }\n    } else if (enc === 'hex') {\n      msg = msg.replace(/[^a-z0-9]+/ig, '');\n      if (msg.length % 2 !== 0)\n        msg = '0' + msg;\n      for (i = 0; i < msg.length; i += 2)\n        res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n  } else {\n    for (i = 0; i < msg.length; i++)\n      res[i] = msg[i] | 0;\n  }\n  return res;\n}\nexports.toArray = toArray;\n\nfunction toHex(msg) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++)\n    res += zero2(msg[i].toString(16));\n  return res;\n}\nexports.toHex = toHex;\n\nfunction htonl(w) {\n  var res = (w >>> 24) |\n            ((w >>> 8) & 0xff00) |\n            ((w << 8) & 0xff0000) |\n            ((w & 0xff) << 24);\n  return res >>> 0;\n}\nexports.htonl = htonl;\n\nfunction toHex32(msg, endian) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++) {\n    var w = msg[i];\n    if (endian === 'little')\n      w = htonl(w);\n    res += zero8(w.toString(16));\n  }\n  return res;\n}\nexports.toHex32 = toHex32;\n\nfunction zero2(word) {\n  if (word.length === 1)\n    return '0' + word;\n  else\n    return word;\n}\nexports.zero2 = zero2;\n\nfunction zero8(word) {\n  if (word.length === 7)\n    return '0' + word;\n  else if (word.length === 6)\n    return '00' + word;\n  else if (word.length === 5)\n    return '000' + word;\n  else if (word.length === 4)\n    return '0000' + word;\n  else if (word.length === 3)\n    return '00000' + word;\n  else if (word.length === 2)\n    return '000000' + word;\n  else if (word.length === 1)\n    return '0000000' + word;\n  else\n    return word;\n}\nexports.zero8 = zero8;\n\nfunction join32(msg, start, end, endian) {\n  var len = end - start;\n  assert(len % 4 === 0);\n  var res = new Array(len / 4);\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n    var w;\n    if (endian === 'big')\n      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];\n    else\n      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];\n    res[i] = w >>> 0;\n  }\n  return res;\n}\nexports.join32 = join32;\n\nfunction split32(msg, endian) {\n  var res = new Array(msg.length * 4);\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n    var m = msg[i];\n    if (endian === 'big') {\n      res[k] = m >>> 24;\n      res[k + 1] = (m >>> 16) & 0xff;\n      res[k + 2] = (m >>> 8) & 0xff;\n      res[k + 3] = m & 0xff;\n    } else {\n      res[k + 3] = m >>> 24;\n      res[k + 2] = (m >>> 16) & 0xff;\n      res[k + 1] = (m >>> 8) & 0xff;\n      res[k] = m & 0xff;\n    }\n  }\n  return res;\n}\nexports.split32 = split32;\n\nfunction rotr32(w, b) {\n  return (w >>> b) | (w << (32 - b));\n}\nexports.rotr32 = rotr32;\n\nfunction rotl32(w, b) {\n  return (w << b) | (w >>> (32 - b));\n}\nexports.rotl32 = rotl32;\n\nfunction sum32(a, b) {\n  return (a + b) >>> 0;\n}\nexports.sum32 = sum32;\n\nfunction sum32_3(a, b, c) {\n  return (a + b + c) >>> 0;\n}\nexports.sum32_3 = sum32_3;\n\nfunction sum32_4(a, b, c, d) {\n  return (a + b + c + d) >>> 0;\n}\nexports.sum32_4 = sum32_4;\n\nfunction sum32_5(a, b, c, d, e) {\n  return (a + b + c + d + e) >>> 0;\n}\nexports.sum32_5 = sum32_5;\n\nfunction sum64(buf, pos, ah, al) {\n  var bh = buf[pos];\n  var bl = buf[pos + 1];\n\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  buf[pos] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\nexports.sum64 = sum64;\n\nfunction sum64_hi(ah, al, bh, bl) {\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  return hi >>> 0;\n}\nexports.sum64_hi = sum64_hi;\n\nfunction sum64_lo(ah, al, bh, bl) {\n  var lo = al + bl;\n  return lo >>> 0;\n}\nexports.sum64_lo = sum64_lo;\n\nfunction sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n}\nexports.sum64_4_hi = sum64_4_hi;\n\nfunction sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {\n  var lo = al + bl + cl + dl;\n  return lo >>> 0;\n}\nexports.sum64_4_lo = sum64_4_lo;\n\nfunction sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n  lo = (lo + el) >>> 0;\n  carry += lo < el ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n}\nexports.sum64_5_hi = sum64_5_hi;\n\nfunction sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var lo = al + bl + cl + dl + el;\n\n  return lo >>> 0;\n}\nexports.sum64_5_lo = sum64_5_lo;\n\nfunction rotr64_hi(ah, al, num) {\n  var r = (al << (32 - num)) | (ah >>> num);\n  return r >>> 0;\n}\nexports.rotr64_hi = rotr64_hi;\n\nfunction rotr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.rotr64_lo = rotr64_lo;\n\nfunction shr64_hi(ah, al, num) {\n  return ah >>> num;\n}\nexports.shr64_hi = shr64_hi;\n\nfunction shr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.shr64_lo = shr64_lo;\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction BlockHash() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = 'big';\n\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\nexports.BlockHash = BlockHash;\n\nBlockHash.prototype.update = function update(msg, enc) {\n  // Convert message to array, pad it, and join into 32bit blocks\n  msg = utils.toArray(msg, enc);\n  if (!this.pending)\n    this.pending = msg;\n  else\n    this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length;\n\n  // Enough data, try updating\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending;\n\n    // Process pending data in blocks\n    var r = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r, msg.length);\n    if (this.pending.length === 0)\n      this.pending = null;\n\n    msg = utils.join32(msg, 0, msg.length - r, this.endian);\n    for (var i = 0; i < msg.length; i += this._delta32)\n      this._update(msg, i, i + this._delta32);\n  }\n\n  return this;\n};\n\nBlockHash.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert(this.pending === null);\n\n  return this._digest(enc);\n};\n\nBlockHash.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - ((len + this.padLength) % bytes);\n  var res = new Array(k + this.padLength);\n  res[0] = 0x80;\n  for (var i = 1; i < k; i++)\n    res[i] = 0;\n\n  // Append length\n  len <<= 3;\n  if (this.endian === 'big') {\n    for (var t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = len & 0xff;\n  } else {\n    res[i++] = len & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n\n    for (t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n  }\n\n  return res;\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar rotr32 = utils.rotr32;\n\nfunction ft_1(s, x, y, z) {\n  if (s === 0)\n    return ch32(x, y, z);\n  if (s === 1 || s === 3)\n    return p32(x, y, z);\n  if (s === 2)\n    return maj32(x, y, z);\n}\nexports.ft_1 = ft_1;\n\nfunction ch32(x, y, z) {\n  return (x & y) ^ ((~x) & z);\n}\nexports.ch32 = ch32;\n\nfunction maj32(x, y, z) {\n  return (x & y) ^ (x & z) ^ (y & z);\n}\nexports.maj32 = maj32;\n\nfunction p32(x, y, z) {\n  return x ^ y ^ z;\n}\nexports.p32 = p32;\n\nfunction s0_256(x) {\n  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\nexports.s0_256 = s0_256;\n\nfunction s1_256(x) {\n  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\nexports.s1_256 = s1_256;\n\nfunction g0_256(x) {\n  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);\n}\nexports.g0_256 = g0_256;\n\nfunction g1_256(x) {\n  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);\n}\nexports.g1_256 = g1_256;\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_5 = utils.sum32_5;\nvar ft_1 = shaCommon.ft_1;\nvar BlockHash = common.BlockHash;\n\nvar sha1_K = [\n  0x5A827999, 0x6ED9EBA1,\n  0x8F1BBCDC, 0xCA62C1D6\n];\n\nfunction SHA1() {\n  if (!(this instanceof SHA1))\n    return new SHA1();\n\n  BlockHash.call(this);\n  this.h = [\n    0x67452301, 0xefcdab89, 0x98badcfe,\n    0x10325476, 0xc3d2e1f0 ];\n  this.W = new Array(80);\n}\n\nutils.inherits(SHA1, BlockHash);\nmodule.exports = SHA1;\n\nSHA1.blockSize = 512;\nSHA1.outSize = 160;\nSHA1.hmacStrength = 80;\nSHA1.padLength = 64;\n\nSHA1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n\n  for(; i < W.length; i++)\n    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n\n  for (i = 0; i < W.length; i++) {\n    var s = ~~(i / 20);\n    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);\n    e = d;\n    d = c;\n    c = rotl32(b, 30);\n    b = a;\n    a = t;\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n};\n\nSHA1.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\nvar assert = require('minimalistic-assert');\n\nvar sum32 = utils.sum32;\nvar sum32_4 = utils.sum32_4;\nvar sum32_5 = utils.sum32_5;\nvar ch32 = shaCommon.ch32;\nvar maj32 = shaCommon.maj32;\nvar s0_256 = shaCommon.s0_256;\nvar s1_256 = shaCommon.s1_256;\nvar g0_256 = shaCommon.g0_256;\nvar g1_256 = shaCommon.g1_256;\n\nvar BlockHash = common.BlockHash;\n\nvar sha256_K = [\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\n  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\n  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n];\n\nfunction SHA256() {\n  if (!(this instanceof SHA256))\n    return new SHA256();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,\n    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n  ];\n  this.k = sha256_K;\n  this.W = new Array(64);\n}\nutils.inherits(SHA256, BlockHash);\nmodule.exports = SHA256;\n\nSHA256.blockSize = 512;\nSHA256.outSize = 256;\nSHA256.hmacStrength = 192;\nSHA256.padLength = 64;\n\nSHA256.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i++)\n    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  var f = this.h[5];\n  var g = this.h[6];\n  var h = this.h[7];\n\n  assert(this.k.length === W.length);\n  for (i = 0; i < W.length; i++) {\n    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n    var T2 = sum32(s0_256(a), maj32(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = sum32(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = sum32(T1, T2);\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n  this.h[5] = sum32(this.h[5], f);\n  this.h[6] = sum32(this.h[6], g);\n  this.h[7] = sum32(this.h[7], h);\n};\n\nSHA256.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar SHA256 = require('./256');\n\nfunction SHA224() {\n  if (!(this instanceof SHA224))\n    return new SHA224();\n\n  SHA256.call(this);\n  this.h = [\n    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];\n}\nutils.inherits(SHA224, SHA256);\nmodule.exports = SHA224;\n\nSHA224.blockSize = 512;\nSHA224.outSize = 224;\nSHA224.hmacStrength = 192;\nSHA224.padLength = 64;\n\nSHA224.prototype._digest = function digest(enc) {\n  // Just truncate output\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 7), 'big');\n  else\n    return utils.split32(this.h.slice(0, 7), 'big');\n};\n\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar assert = require('minimalistic-assert');\n\nvar rotr64_hi = utils.rotr64_hi;\nvar rotr64_lo = utils.rotr64_lo;\nvar shr64_hi = utils.shr64_hi;\nvar shr64_lo = utils.shr64_lo;\nvar sum64 = utils.sum64;\nvar sum64_hi = utils.sum64_hi;\nvar sum64_lo = utils.sum64_lo;\nvar sum64_4_hi = utils.sum64_4_hi;\nvar sum64_4_lo = utils.sum64_4_lo;\nvar sum64_5_hi = utils.sum64_5_hi;\nvar sum64_5_lo = utils.sum64_5_lo;\n\nvar BlockHash = common.BlockHash;\n\nvar sha512_K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n];\n\nfunction SHA512() {\n  if (!(this instanceof SHA512))\n    return new SHA512();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xf3bcc908,\n    0xbb67ae85, 0x84caa73b,\n    0x3c6ef372, 0xfe94f82b,\n    0xa54ff53a, 0x5f1d36f1,\n    0x510e527f, 0xade682d1,\n    0x9b05688c, 0x2b3e6c1f,\n    0x1f83d9ab, 0xfb41bd6b,\n    0x5be0cd19, 0x137e2179 ];\n  this.k = sha512_K;\n  this.W = new Array(160);\n}\nutils.inherits(SHA512, BlockHash);\nmodule.exports = SHA512;\n\nSHA512.blockSize = 1024;\nSHA512.outSize = 512;\nSHA512.hmacStrength = 192;\nSHA512.padLength = 128;\n\nSHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {\n  var W = this.W;\n\n  // 32 x 32bit words\n  for (var i = 0; i < 32; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i += 2) {\n    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2\n    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n    var c1_hi = W[i - 14];  // i - 7\n    var c1_lo = W[i - 13];\n    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15\n    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n    var c3_hi = W[i - 32];  // i - 16\n    var c3_lo = W[i - 31];\n\n    W[i] = sum64_4_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n    W[i + 1] = sum64_4_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n  }\n};\n\nSHA512.prototype._update = function _update(msg, start) {\n  this._prepareBlock(msg, start);\n\n  var W = this.W;\n\n  var ah = this.h[0];\n  var al = this.h[1];\n  var bh = this.h[2];\n  var bl = this.h[3];\n  var ch = this.h[4];\n  var cl = this.h[5];\n  var dh = this.h[6];\n  var dl = this.h[7];\n  var eh = this.h[8];\n  var el = this.h[9];\n  var fh = this.h[10];\n  var fl = this.h[11];\n  var gh = this.h[12];\n  var gl = this.h[13];\n  var hh = this.h[14];\n  var hl = this.h[15];\n\n  assert(this.k.length === W.length);\n  for (var i = 0; i < W.length; i += 2) {\n    var c0_hi = hh;\n    var c0_lo = hl;\n    var c1_hi = s1_512_hi(eh, el);\n    var c1_lo = s1_512_lo(eh, el);\n    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);\n    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n    var c3_hi = this.k[i];\n    var c3_lo = this.k[i + 1];\n    var c4_hi = W[i];\n    var c4_lo = W[i + 1];\n\n    var T1_hi = sum64_5_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n    var T1_lo = sum64_5_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n\n    c0_hi = s0_512_hi(ah, al);\n    c0_lo = s0_512_lo(ah, al);\n    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);\n    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n\n    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n\n    hh = gh;\n    hl = gl;\n\n    gh = fh;\n    gl = fl;\n\n    fh = eh;\n    fl = el;\n\n    eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n    el = sum64_lo(dl, dl, T1_hi, T1_lo);\n\n    dh = ch;\n    dl = cl;\n\n    ch = bh;\n    cl = bl;\n\n    bh = ah;\n    bl = al;\n\n    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n  }\n\n  sum64(this.h, 0, ah, al);\n  sum64(this.h, 2, bh, bl);\n  sum64(this.h, 4, ch, cl);\n  sum64(this.h, 6, dh, dl);\n  sum64(this.h, 8, eh, el);\n  sum64(this.h, 10, fh, fl);\n  sum64(this.h, 12, gh, gl);\n  sum64(this.h, 14, hh, hl);\n};\n\nSHA512.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n\nfunction ch64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ ((~xh) & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ ((~xl) & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 28);\n  var c1_hi = rotr64_hi(xl, xh, 2);  // 34\n  var c2_hi = rotr64_hi(xl, xh, 7);  // 39\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 28);\n  var c1_lo = rotr64_lo(xl, xh, 2);  // 34\n  var c2_lo = rotr64_lo(xl, xh, 7);  // 39\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 14);\n  var c1_hi = rotr64_hi(xh, xl, 18);\n  var c2_hi = rotr64_hi(xl, xh, 9);  // 41\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 14);\n  var c1_lo = rotr64_lo(xh, xl, 18);\n  var c2_lo = rotr64_lo(xl, xh, 9);  // 41\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 1);\n  var c1_hi = rotr64_hi(xh, xl, 8);\n  var c2_hi = shr64_hi(xh, xl, 7);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 1);\n  var c1_lo = rotr64_lo(xh, xl, 8);\n  var c2_lo = shr64_lo(xh, xl, 7);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 19);\n  var c1_hi = rotr64_hi(xl, xh, 29);  // 61\n  var c2_hi = shr64_hi(xh, xl, 6);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 19);\n  var c1_lo = rotr64_lo(xl, xh, 29);  // 61\n  var c2_lo = shr64_lo(xh, xl, 6);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n","'use strict';\n\nvar utils = require('../utils');\n\nvar SHA512 = require('./512');\n\nfunction SHA384() {\n  if (!(this instanceof SHA384))\n    return new SHA384();\n\n  SHA512.call(this);\n  this.h = [\n    0xcbbb9d5d, 0xc1059ed8,\n    0x629a292a, 0x367cd507,\n    0x9159015a, 0x3070dd17,\n    0x152fecd8, 0xf70e5939,\n    0x67332667, 0xffc00b31,\n    0x8eb44a87, 0x68581511,\n    0xdb0c2e0d, 0x64f98fa7,\n    0x47b5481d, 0xbefa4fa4 ];\n}\nutils.inherits(SHA384, SHA512);\nmodule.exports = SHA384;\n\nSHA384.blockSize = 1024;\nSHA384.outSize = 384;\nSHA384.hmacStrength = 192;\nSHA384.padLength = 128;\n\nSHA384.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 12), 'big');\n  else\n    return utils.split32(this.h.slice(0, 12), 'big');\n};\n","'use strict';\n\nexports.sha1 = require('./sha/1');\nexports.sha224 = require('./sha/224');\nexports.sha256 = require('./sha/256');\nexports.sha384 = require('./sha/384');\nexports.sha512 = require('./sha/512');\n","'use strict';\n\nvar utils = require('./utils');\nvar common = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_3 = utils.sum32_3;\nvar sum32_4 = utils.sum32_4;\nvar BlockHash = common.BlockHash;\n\nfunction RIPEMD160() {\n  if (!(this instanceof RIPEMD160))\n    return new RIPEMD160();\n\n  BlockHash.call(this);\n\n  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];\n  this.endian = 'little';\n}\nutils.inherits(RIPEMD160, BlockHash);\nexports.ripemd160 = RIPEMD160;\n\nRIPEMD160.blockSize = 512;\nRIPEMD160.outSize = 160;\nRIPEMD160.hmacStrength = 192;\nRIPEMD160.padLength = 64;\n\nRIPEMD160.prototype._update = function update(msg, start) {\n  var A = this.h[0];\n  var B = this.h[1];\n  var C = this.h[2];\n  var D = this.h[3];\n  var E = this.h[4];\n  var Ah = A;\n  var Bh = B;\n  var Ch = C;\n  var Dh = D;\n  var Eh = E;\n  for (var j = 0; j < 80; j++) {\n    var T = sum32(\n      rotl32(\n        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),\n        s[j]),\n      E);\n    A = E;\n    E = D;\n    D = rotl32(C, 10);\n    C = B;\n    B = T;\n    T = sum32(\n      rotl32(\n        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),\n        sh[j]),\n      Eh);\n    Ah = Eh;\n    Eh = Dh;\n    Dh = rotl32(Ch, 10);\n    Ch = Bh;\n    Bh = T;\n  }\n  T = sum32_3(this.h[1], C, Dh);\n  this.h[1] = sum32_3(this.h[2], D, Eh);\n  this.h[2] = sum32_3(this.h[3], E, Ah);\n  this.h[3] = sum32_3(this.h[4], A, Bh);\n  this.h[4] = sum32_3(this.h[0], B, Ch);\n  this.h[0] = T;\n};\n\nRIPEMD160.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'little');\n  else\n    return utils.split32(this.h, 'little');\n};\n\nfunction f(j, x, y, z) {\n  if (j <= 15)\n    return x ^ y ^ z;\n  else if (j <= 31)\n    return (x & y) | ((~x) & z);\n  else if (j <= 47)\n    return (x | (~y)) ^ z;\n  else if (j <= 63)\n    return (x & z) | (y & (~z));\n  else\n    return x ^ (y | (~z));\n}\n\nfunction K(j) {\n  if (j <= 15)\n    return 0x00000000;\n  else if (j <= 31)\n    return 0x5a827999;\n  else if (j <= 47)\n    return 0x6ed9eba1;\n  else if (j <= 63)\n    return 0x8f1bbcdc;\n  else\n    return 0xa953fd4e;\n}\n\nfunction Kh(j) {\n  if (j <= 15)\n    return 0x50a28be6;\n  else if (j <= 31)\n    return 0x5c4dd124;\n  else if (j <= 47)\n    return 0x6d703ef3;\n  else if (j <= 63)\n    return 0x7a6d76e9;\n  else\n    return 0x00000000;\n}\n\nvar r = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,\n  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,\n  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13\n];\n\nvar rh = [\n  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,\n  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,\n  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,\n  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,\n  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11\n];\n\nvar s = [\n  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,\n  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,\n  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,\n  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,\n  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6\n];\n\nvar sh = [\n  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,\n  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,\n  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,\n  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,\n  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11\n];\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction Hmac(hash, key, enc) {\n  if (!(this instanceof Hmac))\n    return new Hmac(hash, key, enc);\n  this.Hash = hash;\n  this.blockSize = hash.blockSize / 8;\n  this.outSize = hash.outSize / 8;\n  this.inner = null;\n  this.outer = null;\n\n  this._init(utils.toArray(key, enc));\n}\nmodule.exports = Hmac;\n\nHmac.prototype._init = function init(key) {\n  // Shorten key, if needed\n  if (key.length > this.blockSize)\n    key = new this.Hash().update(key).digest();\n  assert(key.length <= this.blockSize);\n\n  // Add padding to key\n  for (var i = key.length; i < this.blockSize; i++)\n    key.push(0);\n\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x36;\n  this.inner = new this.Hash().update(key);\n\n  // 0x36 ^ 0x5c = 0x6a\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x6a;\n  this.outer = new this.Hash().update(key);\n};\n\nHmac.prototype.update = function update(msg, enc) {\n  this.inner.update(msg, enc);\n  return this;\n};\n\nHmac.prototype.digest = function digest(enc) {\n  this.outer.update(this.inner.digest());\n  return this.outer.digest(enc);\n};\n","var hash = exports;\n\nhash.utils = require('./hash/utils');\nhash.common = require('./hash/common');\nhash.sha = require('./hash/sha');\nhash.ripemd = require('./hash/ripemd');\nhash.hmac = require('./hash/hmac');\n\n// Proxy hash functions to the main object\nhash.sha1 = hash.sha.sha1;\nhash.sha256 = hash.sha.sha256;\nhash.sha224 = hash.sha.sha224;\nhash.sha384 = hash.sha.sha384;\nhash.sha512 = hash.sha.sha512;\nhash.ripemd160 = hash.ripemd.ripemd160;\n","\"use strict\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nlet _logLevel = LogLevels[\"default\"];\nimport { version } from \"./_version\";\nlet _globalLogger = null;\nfunction _checkNormalize() {\n    try {\n        const missing = [];\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                }\n                ;\n            }\n            catch (error) {\n                missing.push(form);\n            }\n        });\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\");\n        }\n    }\n    catch (error) {\n        return error.message;\n    }\n    return null;\n}\nconst _normalizeError = _checkNormalize();\nexport var LogLevel;\n(function (LogLevel) {\n    LogLevel[\"DEBUG\"] = \"DEBUG\";\n    LogLevel[\"INFO\"] = \"INFO\";\n    LogLevel[\"WARNING\"] = \"WARNING\";\n    LogLevel[\"ERROR\"] = \"ERROR\";\n    LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\nexport var ErrorCode;\n(function (ErrorCode) {\n    ///////////////////\n    // Generic Errors\n    // Unknown Error\n    ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n    // Not Implemented\n    ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n    // Unsupported Operation\n    //   - operation\n    ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n    // Some sort of bad response from the server\n    ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n    // Timeout\n    ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n    ///////////////////\n    // Operational  Errors\n    // Buffer Overrun\n    ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n    ///////////////////\n    // Argument Errors\n    // Missing new operator to an object\n    //  - name: The name of the class\n    ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n    ///////////////////\n    // Blockchain Errors\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n    // Insufficient funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n    // The transaction was replaced by one with a higher gas price\n    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n    //   - hash: original transaction hash\n    //   - replacement: the full TransactionsResponse for the replacement\n    //   - receipt: the receipt of the replacement\n    ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n})(ErrorCode || (ErrorCode = {}));\n;\nconst HEX = \"0123456789abcdef\";\nexport class Logger {\n    constructor(version) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n    _log(logLevel, args) {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) {\n            return;\n        }\n        console.log.apply(console, args);\n    }\n    debug(...args) {\n        this._log(Logger.levels.DEBUG, args);\n    }\n    info(...args) {\n        this._log(Logger.levels.INFO, args);\n    }\n    warn(...args) {\n        this._log(Logger.levels.WARNING, args);\n    }\n    makeError(message, code, params) {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, {});\n        }\n        if (!code) {\n            code = Logger.errors.UNKNOWN_ERROR;\n        }\n        if (!params) {\n            params = {};\n        }\n        const messageDetails = [];\n        Object.keys(params).forEach((key) => {\n            const value = params[key];\n            try {\n                if (value instanceof Uint8Array) {\n                    let hex = \"\";\n                    for (let i = 0; i < value.length; i++) {\n                        hex += HEX[value[i] >> 4];\n                        hex += HEX[value[i] & 0x0f];\n                    }\n                    messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n                }\n                else {\n                    messageDetails.push(key + \"=\" + JSON.stringify(value));\n                }\n            }\n            catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${code}`);\n        messageDetails.push(`version=${this.version}`);\n        const reason = message;\n        let url = \"\";\n        switch (code) {\n            case ErrorCode.NUMERIC_FAULT: {\n                url = \"NUMERIC_FAULT\";\n                const fault = message;\n                switch (fault) {\n                    case \"overflow\":\n                    case \"underflow\":\n                    case \"division-by-zero\":\n                        url += \"-\" + fault;\n                        break;\n                    case \"negative-power\":\n                    case \"negative-width\":\n                        url += \"-unsupported\";\n                        break;\n                    case \"unbound-bitwise-result\":\n                        url += \"-unbound-result\";\n                        break;\n                }\n                break;\n            }\n            case ErrorCode.CALL_EXCEPTION:\n            case ErrorCode.INSUFFICIENT_FUNDS:\n            case ErrorCode.MISSING_NEW:\n            case ErrorCode.NONCE_EXPIRED:\n            case ErrorCode.REPLACEMENT_UNDERPRICED:\n            case ErrorCode.TRANSACTION_REPLACED:\n            case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n                url = code;\n                break;\n        }\n        if (url) {\n            message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n        }\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n        // @TODO: Any??\n        const error = new Error(message);\n        error.reason = reason;\n        error.code = code;\n        Object.keys(params).forEach(function (key) {\n            error[key] = params[key];\n        });\n        return error;\n    }\n    throwError(message, code, params) {\n        throw this.makeError(message, code, params);\n    }\n    throwArgumentError(message, name, value) {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n    assert(condition, message, code, params) {\n        if (!!condition) {\n            return;\n        }\n        this.throwError(message, code, params);\n    }\n    assertArgument(condition, message, name, value) {\n        if (!!condition) {\n            return;\n        }\n        this.throwArgumentError(message, name, value);\n    }\n    checkNormalize(message) {\n        if (message == null) {\n            message = \"platform missing String.prototype.normalize\";\n        }\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n    checkSafeUint53(value, message) {\n        if (typeof (value) !== \"number\") {\n            return;\n        }\n        if (message == null) {\n            message = \"value not safe\";\n        }\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n    checkArgumentCount(count, expectedCount, message) {\n        if (message) {\n            message = \": \" + message;\n        }\n        else {\n            message = \"\";\n        }\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n    checkNew(target, kind) {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    checkAbstract(target, kind) {\n        if (target === kind) {\n            this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: \"new\" });\n        }\n        else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    static globalLogger() {\n        if (!_globalLogger) {\n            _globalLogger = new Logger(version);\n        }\n        return _globalLogger;\n    }\n    static setCensorship(censorship, permanent) {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        if (_permanentCensorErrors) {\n            if (!censorship) {\n                return;\n            }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n    static setLogLevel(logLevel) {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n    static from(version) {\n        return new Logger(version);\n    }\n}\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\n//# sourceMappingURL=index.js.map","export const version = \"logger/5.6.0\";\n//# sourceMappingURL=_version.js.map","export const version = \"bytes/5.6.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n///////////////////////////////\nfunction isHexable(value) {\n    return !!(value.toHexString);\n}\nfunction addSlice(array) {\n    if (array.slice) {\n        return array;\n    }\n    array.slice = function () {\n        const args = Array.prototype.slice.call(arguments);\n        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n    };\n    return array;\n}\nexport function isBytesLike(value) {\n    return ((isHexString(value) && !(value.length % 2)) || isBytes(value));\n}\nfunction isInteger(value) {\n    return (typeof (value) === \"number\" && value == value && (value % 1) === 0);\n}\nexport function isBytes(value) {\n    if (value == null) {\n        return false;\n    }\n    if (value.constructor === Uint8Array) {\n        return true;\n    }\n    if (typeof (value) === \"string\") {\n        return false;\n    }\n    if (!isInteger(value.length) || value.length < 0) {\n        return false;\n    }\n    for (let i = 0; i < value.length; i++) {\n        const v = value[i];\n        if (!isInteger(v) || v < 0 || v >= 256) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function arrayify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid arrayify value\");\n        const result = [];\n        while (value) {\n            result.unshift(value & 0xff);\n            value = parseInt(String(value / 256));\n        }\n        if (result.length === 0) {\n            result.push(0);\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        value = value.toHexString();\n    }\n    if (isHexString(value)) {\n        let hex = value.substring(2);\n        if (hex.length % 2) {\n            if (options.hexPad === \"left\") {\n                hex = \"0x0\" + hex.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                hex += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        const result = [];\n        for (let i = 0; i < hex.length; i += 2) {\n            result.push(parseInt(hex.substring(i, i + 2), 16));\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (isBytes(value)) {\n        return addSlice(new Uint8Array(value));\n    }\n    return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n}\nexport function concat(items) {\n    const objects = items.map(item => arrayify(item));\n    const length = objects.reduce((accum, item) => (accum + item.length), 0);\n    const result = new Uint8Array(length);\n    objects.reduce((offset, object) => {\n        result.set(object, offset);\n        return offset + object.length;\n    }, 0);\n    return addSlice(result);\n}\nexport function stripZeros(value) {\n    let result = arrayify(value);\n    if (result.length === 0) {\n        return result;\n    }\n    // Find the first non-zero entry\n    let start = 0;\n    while (start < result.length && result[start] === 0) {\n        start++;\n    }\n    // If we started with zeros, strip them\n    if (start) {\n        result = result.slice(start);\n    }\n    return result;\n}\nexport function zeroPad(value, length) {\n    value = arrayify(value);\n    if (value.length > length) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[0]);\n    }\n    const result = new Uint8Array(length);\n    result.set(value, length - value.length);\n    return addSlice(result);\n}\nexport function isHexString(value, length) {\n    if (typeof (value) !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false;\n    }\n    if (length && value.length !== 2 + 2 * length) {\n        return false;\n    }\n    return true;\n}\nconst HexCharacters = \"0123456789abcdef\";\nexport function hexlify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid hexlify value\");\n        let hex = \"\";\n        while (value) {\n            hex = HexCharacters[value & 0xf] + hex;\n            value = Math.floor(value / 16);\n        }\n        if (hex.length) {\n            if (hex.length % 2) {\n                hex = \"0\" + hex;\n            }\n            return \"0x\" + hex;\n        }\n        return \"0x00\";\n    }\n    if (typeof (value) === \"bigint\") {\n        value = value.toString(16);\n        if (value.length % 2) {\n            return (\"0x0\" + value);\n        }\n        return \"0x\" + value;\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        return value.toHexString();\n    }\n    if (isHexString(value)) {\n        if (value.length % 2) {\n            if (options.hexPad === \"left\") {\n                value = \"0x0\" + value.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                value += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        return value.toLowerCase();\n    }\n    if (isBytes(value)) {\n        let result = \"0x\";\n        for (let i = 0; i < value.length; i++) {\n            let v = value[i];\n            result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n        }\n        return result;\n    }\n    return logger.throwArgumentError(\"invalid hexlify value\", \"value\", value);\n}\n/*\nfunction unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {\n    if (typeof(value) === \"string\" && value.length % 2 && value.substring(0, 2) === \"0x\") {\n        return \"0x0\" + value.substring(2);\n    }\n    return value;\n}\n*/\nexport function hexDataLength(data) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        return null;\n    }\n    return (data.length - 2) / 2;\n}\nexport function hexDataSlice(data, offset, endOffset) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        logger.throwArgumentError(\"invalid hexData\", \"value\", data);\n    }\n    offset = 2 + 2 * offset;\n    if (endOffset != null) {\n        return \"0x\" + data.substring(offset, 2 + 2 * endOffset);\n    }\n    return \"0x\" + data.substring(offset);\n}\nexport function hexConcat(items) {\n    let result = \"0x\";\n    items.forEach((item) => {\n        result += hexlify(item).substring(2);\n    });\n    return result;\n}\nexport function hexValue(value) {\n    const trimmed = hexStripZeros(hexlify(value, { hexPad: \"left\" }));\n    if (trimmed === \"0x\") {\n        return \"0x0\";\n    }\n    return trimmed;\n}\nexport function hexStripZeros(value) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    value = value.substring(2);\n    let offset = 0;\n    while (offset < value.length && value[offset] === \"0\") {\n        offset++;\n    }\n    return \"0x\" + value.substring(offset);\n}\nexport function hexZeroPad(value, length) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    else if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    if (value.length > 2 * length + 2) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[1]);\n    }\n    while (value.length < 2 * length + 2) {\n        value = \"0x0\" + value.substring(2);\n    }\n    return value;\n}\nexport function splitSignature(signature) {\n    const result = {\n        r: \"0x\",\n        s: \"0x\",\n        _vs: \"0x\",\n        recoveryParam: 0,\n        v: 0,\n        yParityAndS: \"0x\",\n        compact: \"0x\"\n    };\n    if (isBytesLike(signature)) {\n        let bytes = arrayify(signature);\n        // Get the r, s and v\n        if (bytes.length === 64) {\n            // EIP-2098; pull the v from the top bit of s and clear it\n            result.v = 27 + (bytes[32] >> 7);\n            bytes[32] &= 0x7f;\n            result.r = hexlify(bytes.slice(0, 32));\n            result.s = hexlify(bytes.slice(32, 64));\n        }\n        else if (bytes.length === 65) {\n            result.r = hexlify(bytes.slice(0, 32));\n            result.s = hexlify(bytes.slice(32, 64));\n            result.v = bytes[64];\n        }\n        else {\n            logger.throwArgumentError(\"invalid signature string\", \"signature\", signature);\n        }\n        // Allow a recid to be used as the v\n        if (result.v < 27) {\n            if (result.v === 0 || result.v === 1) {\n                result.v += 27;\n            }\n            else {\n                logger.throwArgumentError(\"signature invalid v byte\", \"signature\", signature);\n            }\n        }\n        // Compute recoveryParam from v\n        result.recoveryParam = 1 - (result.v % 2);\n        // Compute _vs from recoveryParam and s\n        if (result.recoveryParam) {\n            bytes[32] |= 0x80;\n        }\n        result._vs = hexlify(bytes.slice(32, 64));\n    }\n    else {\n        result.r = signature.r;\n        result.s = signature.s;\n        result.v = signature.v;\n        result.recoveryParam = signature.recoveryParam;\n        result._vs = signature._vs;\n        // If the _vs is available, use it to populate missing s, v and recoveryParam\n        // and verify non-missing s, v and recoveryParam\n        if (result._vs != null) {\n            const vs = zeroPad(arrayify(result._vs), 32);\n            result._vs = hexlify(vs);\n            // Set or check the recid\n            const recoveryParam = ((vs[0] >= 128) ? 1 : 0);\n            if (result.recoveryParam == null) {\n                result.recoveryParam = recoveryParam;\n            }\n            else if (result.recoveryParam !== recoveryParam) {\n                logger.throwArgumentError(\"signature recoveryParam mismatch _vs\", \"signature\", signature);\n            }\n            // Set or check the s\n            vs[0] &= 0x7f;\n            const s = hexlify(vs);\n            if (result.s == null) {\n                result.s = s;\n            }\n            else if (result.s !== s) {\n                logger.throwArgumentError(\"signature v mismatch _vs\", \"signature\", signature);\n            }\n        }\n        // Use recid and v to populate each other\n        if (result.recoveryParam == null) {\n            if (result.v == null) {\n                logger.throwArgumentError(\"signature missing v and recoveryParam\", \"signature\", signature);\n            }\n            else if (result.v === 0 || result.v === 1) {\n                result.recoveryParam = result.v;\n            }\n            else {\n                result.recoveryParam = 1 - (result.v % 2);\n            }\n        }\n        else {\n            if (result.v == null) {\n                result.v = 27 + result.recoveryParam;\n            }\n            else {\n                const recId = (result.v === 0 || result.v === 1) ? result.v : (1 - (result.v % 2));\n                if (result.recoveryParam !== recId) {\n                    logger.throwArgumentError(\"signature recoveryParam mismatch v\", \"signature\", signature);\n                }\n            }\n        }\n        if (result.r == null || !isHexString(result.r)) {\n            logger.throwArgumentError(\"signature missing or invalid r\", \"signature\", signature);\n        }\n        else {\n            result.r = hexZeroPad(result.r, 32);\n        }\n        if (result.s == null || !isHexString(result.s)) {\n            logger.throwArgumentError(\"signature missing or invalid s\", \"signature\", signature);\n        }\n        else {\n            result.s = hexZeroPad(result.s, 32);\n        }\n        const vs = arrayify(result.s);\n        if (vs[0] >= 128) {\n            logger.throwArgumentError(\"signature s out of range\", \"signature\", signature);\n        }\n        if (result.recoveryParam) {\n            vs[0] |= 0x80;\n        }\n        const _vs = hexlify(vs);\n        if (result._vs) {\n            if (!isHexString(result._vs)) {\n                logger.throwArgumentError(\"signature invalid _vs\", \"signature\", signature);\n            }\n            result._vs = hexZeroPad(result._vs, 32);\n        }\n        // Set or check the _vs\n        if (result._vs == null) {\n            result._vs = _vs;\n        }\n        else if (result._vs !== _vs) {\n            logger.throwArgumentError(\"signature _vs mismatch v and s\", \"signature\", signature);\n        }\n    }\n    result.yParityAndS = result._vs;\n    result.compact = result.r + result.yParityAndS.substring(2);\n    return result;\n}\nexport function joinSignature(signature) {\n    signature = splitSignature(signature);\n    return hexlify(concat([\n        signature.r,\n        signature.s,\n        (signature.recoveryParam ? \"0x1c\" : \"0x1b\")\n    ]));\n}\n//# sourceMappingURL=index.js.map","\"use strict\";\nimport hash from \"hash.js\";\n//const _ripemd160 = _hash.ripemd160;\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { SupportedAlgorithm } from \"./types\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport function ripemd160(data) {\n    return \"0x\" + (hash.ripemd160().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha256(data) {\n    return \"0x\" + (hash.sha256().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha512(data) {\n    return \"0x\" + (hash.sha512().update(arrayify(data)).digest(\"hex\"));\n}\nexport function computeHmac(algorithm, key, data) {\n    if (!SupportedAlgorithm[algorithm]) {\n        logger.throwError(\"unsupported algorithm \" + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"hmac\",\n            algorithm: algorithm\n        });\n    }\n    return \"0x\" + hash.hmac(hash[algorithm], arrayify(key)).update(arrayify(data)).digest(\"hex\");\n}\n//# sourceMappingURL=sha2.js.map","export const version = \"sha2/5.6.0\";\n//# sourceMappingURL=_version.js.map","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport nacl from 'tweetnacl';\nimport {sha256} from '@ethersproject/sha2';\n\nimport {Struct, SOLANA_SCHEMA} from './util/borsh-schema';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Buffer\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != 32) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Default public key value. (All zeros)\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  toBytes(): Uint8Array {\n    return this.toBuffer();\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const hash = sha256(new Uint8Array(buffer)).slice(2);\n    return new PublicKey(Buffer.from(hash, 'hex'));\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    let hash = sha256(new Uint8Array(buffer)).slice(2);\n    let publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return is_on_curve(pubkey.toBytes()) == 1;\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n\n// @ts-ignore\nlet naclLowLevel = nacl.lowlevel;\n\n// Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\nfunction is_on_curve(p: any) {\n  var r = [\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n  ];\n\n  var t = naclLowLevel.gf(),\n    chk = naclLowLevel.gf(),\n    num = naclLowLevel.gf(),\n    den = naclLowLevel.gf(),\n    den2 = naclLowLevel.gf(),\n    den4 = naclLowLevel.gf(),\n    den6 = naclLowLevel.gf();\n\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([\n  0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7,\n  0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83,\n]);\nfunction neq25519(a: any, b: any) {\n  var c = new Uint8Array(32),\n    d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n","import nacl from 'tweetnacl';\nimport type {SignKeyPair as KeyPair} from 'tweetnacl';\nimport type {Buffer} from 'buffer';\n\nimport {toBuffer} from './util/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  _keypair: KeyPair;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Buffer | Uint8Array | Array<number>) {\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account\n   */\n  get secretKey(): Buffer {\n    return toBuffer(this._keypair.secretKey);\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PACKET_DATA_SIZE} from './transaction-constants';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * The message header, identifying signed and read-only account\n */\nexport type MessageHeader = {\n  /**\n   * The number of signatures required for this message to be considered valid. The\n   * signatures must match the first `numRequiredSignatures` of `accountKeys`.\n   */\n  numRequiredSignatures: number;\n  /** The last `numReadonlySignedAccounts` of the signed keys are read-only accounts */\n  numReadonlySignedAccounts: number;\n  /** The last `numReadonlySignedAccounts` of the unsigned keys are read-only accounts */\n  numReadonlyUnsignedAccounts: number;\n};\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nconst PUBKEY_LENGTH = 32;\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    return (\n      index <\n        this.header.numRequiredSignatures -\n          this.header.numReadonlySignedAccounts ||\n      (index >= this.header.numRequiredSignatures &&\n        index <\n          this.accountKeys.length - this.header.numReadonlyUnsignedAccounts)\n    );\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift() as number;\n    const numReadonlySignedAccounts = byteArray.shift() as number;\n    const numReadonlyUnsignedAccounts = byteArray.shift() as number;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import nacl from 'tweetnacl';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {\n  PACKET_DATA_SIZE,\n  SIGNATURE_LENGTH_IN_BYTES,\n} from './transaction-constants';\nimport {Connection} from './connection';\nimport {Message} from './message';\nimport {PublicKey} from './publickey';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\nimport invariant from './util/assert';\nimport type {Signer} from './keypair';\nimport type {Blockhash} from './blockhash';\nimport type {CompiledInstruction} from './message';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?: TransactionBlockhashCtor | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    } else if (\n      Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')\n    ) {\n      const newOpts = opts as TransactionBlockhashCtor;\n      Object.assign(this, newOpts);\n      this.recentBlockhash = newOpts.blockhash;\n      this.lastValidBlockHeight = newOpts.lastValidBlockHeight;\n    } else {\n      const oldOpts = opts as TransactionCtorFields_DEPRECATED;\n      Object.assign(this, oldOpts);\n      this.recentBlockhash = oldOpts.recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    const {nonceInfo} = this;\n    if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {\n      this.recentBlockhash = nonceInfo.nonce;\n      this.instructions.unshift(nonceInfo.nonceInstruction);\n    }\n    const {recentBlockhash} = this;\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (this.instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < this.instructions.length; i++) {\n      if (this.instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    this.instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const instructions: CompiledInstruction[] = this.instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    instructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = nacl.sign.detached(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (\n          !nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())\n        ) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  const status =\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n      ? (\n          await connection.confirmTransaction(\n            {\n              signature: signature,\n              blockhash: transaction.recentBlockhash,\n              lastValidBlockHeight: transaction.lastValidBlockHeight,\n            },\n            options && options.commitment,\n          )\n        ).value\n      : (\n          await connection.confirmTransaction(\n            signature,\n            options && options.commitment,\n          )\n        ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {NONCE_ACCOUNT_LENGTH} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\nimport {u64} from './util/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport {sleep} from './util/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './system-program';\nimport {IInstructionInputData} from './instruction';\nimport {PACKET_DATA_SIZE} from './transaction-constants';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport {u64} from './util/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n","export const Headers = globalThis.Headers;\nexport const Request = globalThis.Request;\nexport const Response = globalThis.Response;\nexport default globalThis.fetch;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\n\nimport {AgentManager} from './agent-manager';\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError} from './errors';\nimport fetchImpl, {Response} from './fetch-impl';\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport {MS_PER_SLOT} from './timing';\nimport {Transaction, TransactionStatus} from './transaction';\nimport {Message} from './message';\nimport assert from './util/assert';\nimport {sleep} from './util/sleep';\nimport {toBuffer} from './util/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredTimeoutError,\n} from './util/tx-expiry-custom-errors';\nimport {makeWebsocketUrl} from './util/url';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => any;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => any;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy = {\n  signature: TransactionSignature;\n} & BlockhashWithExpiryBlockHeight;\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n      }),\n    ),\n  ),\n);\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n};\n\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A confirmed transaction on the ledger\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A ConfirmedBlock on the ledger\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  useHttps: boolean,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agentManager: AgentManager | undefined;\n  if (!process.env.BROWSER) {\n    agentManager = new AgentManager(useHttps);\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = agentManager ? agentManager.requestStart() : undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {\n      agentManager && agentManager.requestEnd();\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n  }),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(\n      pick({\n        pubkey: PublicKeyFromString,\n        signer: boolean(),\n        writable: boolean(),\n      }),\n    ),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64) */\n  encoding?: 'base64' | 'jsonParsed';\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {[header: string]: string};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let url = new URL(endpoint);\n    const useHttps = url.protocol === 'https:';\n\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = endpoint;\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      url.toString(),\n      useHttps,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get balance for ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block time for slot ' + slot + ': ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get minimum ledger slot: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get first available block: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error('failed to get token supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token account balance: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get largest accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token largest accounts: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info for accounts ' + keys + ': ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitment?: Commitment,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitment,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined,\n      epoch !== undefined ? {epoch} : undefined,\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new Error(\n        `failed to get Stake Activation ${publicKey.toBase58()}: ${\n          res.error.message\n        }`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const extra: Pick<GetProgramAccountsConfig, 'dataSlice' | 'filters'> = {};\n\n    let commitment;\n    let encoding;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n        encoding = configOrCommitment.encoding;\n\n        if (configOrCommitment.dataSlice) {\n          extra.dataSlice = configOrCommitment.dataSlice;\n        }\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const extra: Pick<GetParsedProgramAccountsConfig, 'filters'> = {};\n\n    let commitment;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: BlockheightBasedTransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` using a `TransactionConfirmationConfig` */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy:\n      | BlockheightBasedTransactionConfirmationStrategy\n      | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config =\n        strategy as BlockheightBasedTransactionConfirmationStrategy;\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const subscriptionCommitment = commitment || this.commitment;\n    let timeoutId;\n    let subscriptionId;\n    let done = false;\n\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          rawSignature,\n          (result: SignatureResult, context: Context) => {\n            subscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            done = true;\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    const checkBlockHeight = async () => {\n      try {\n        const blockHeight = await this.getBlockHeight(commitment);\n        return blockHeight;\n      } catch (_e) {\n        return -1;\n      }\n    };\n\n    const expiryPromise = new Promise<\n      | {__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED}\n      | {__type: TransactionStatus.TIMED_OUT; timeoutMs: number}\n    >(resolve => {\n      if (typeof strategy === 'string') {\n        let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n        switch (subscriptionCommitment) {\n          case 'processed':\n          case 'recent':\n          case 'single':\n          case 'confirmed':\n          case 'singleGossip': {\n            timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n            break;\n          }\n          // exhaust enums to ensure full coverage\n          case 'finalized':\n          case 'max':\n          case 'root':\n        }\n\n        timeoutId = setTimeout(\n          () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n          timeoutMs,\n        );\n      } else {\n        let config =\n          strategy as BlockheightBasedTransactionConfirmationStrategy;\n        (async () => {\n          let currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n          while (currentBlockHeight <= config.lastValidBlockHeight) {\n            await sleep(1000);\n            if (done) return;\n            currentBlockHeight = await checkBlockHeight();\n            if (done) return;\n          }\n          resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n        })();\n      }\n    });\n\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      switch (outcome.__type) {\n        case TransactionStatus.BLOCKHEIGHT_EXCEEDED:\n          throw new TransactionExpiredBlockheightExceededError(rawSignature);\n        case TransactionStatus.PROCESSED:\n          result = outcome.response;\n          break;\n        case TransactionStatus.TIMED_OUT:\n          throw new TransactionExpiredTimeoutError(\n            rawSignature,\n            outcome.timeoutMs / 1000,\n          );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new Error('failed to get cluster nodes: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new Error('failed to get vote accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitment?: Commitment): Promise<string> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get slot leader: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new Error('failed to get slot leaders: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get signature status: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get transaction count: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitment?: Commitment,\n  ): Promise<(InflationReward | null)[]> {\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined,\n      {\n        epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation reward: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitment?: Commitment): Promise<EpochInfo> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch info: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch schedule: ' + res.error.message);\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get leader schedule: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get recent blockhash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const args = this._buildArgs(limit ? [limit] : []);\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get recent performance samples: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get fee calculator: ' + res.error.message);\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: Message,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const wireMessage = message.serialize().toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result as unknown as RpcResponseAndContext<number>;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitment?: Commitment,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get latest blockhash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new Error('failed to get version: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get genesis hash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  async getBlock(\n    slot: number,\n    opts?: {commitment?: Finality},\n  ): Promise<BlockResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  async getBlockHeight(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block height information: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block production information: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  async getTransaction(\n    signature: string,\n    opts?: {commitment?: Finality},\n  ): Promise<TransactionResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: new Message(result.transaction.message),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error('failed to get transactions: ' + res.error.message);\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(TransactionResponse | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error('failed to get transactions: ' + res.error.message);\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new Error('failed to get blocks: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed transaction: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error(\n          'failed to get confirmed transactions: ' + res.error.message,\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'airdrop to ' + to.toBase58() + ' failed: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * Simulate a transaction\n   */\n  async simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration++;\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._subscriptionsByHash[hash] = {\n        ...subscription,\n        state: 'pending',\n      };\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'subscribing',\n                };\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                };\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'pending',\n                };\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._subscriptionsByHash[hash] = {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  };\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._subscriptionsByHash[hash] = {\n                      ...subscription,\n                      state: 'subscribed',\n                    };\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'unsubscribed',\n                };\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","export function makeWebsocketUrl(endpoint: string) {\n  let url = new URL(endpoint);\n  const useHttps = url.protocol === 'https:';\n\n  url.protocol = useHttps ? 'wss:' : 'ws:';\n  url.host = '';\n\n  // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  if (url.port !== '') {\n    url.port = String(Number(url.port) + 1);\n  }\n  return url.toString();\n}\n","import nacl from 'tweetnacl';\n\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    if (keypair) {\n      this._keypair = keypair;\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(nacl.sign.keyPair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    const keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n    if (!options || !options.skipValidation) {\n      const encoder = new TextEncoder();\n      const signData = encoder.encode('@solana/web3.js-validation-v1');\n      const signature = nacl.sign.detached(signData, keypair.secretKey);\n      if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n        throw new Error('provided secretKey is invalid');\n      }\n    }\n    return new Keypair(keypair);\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    return new Keypair(nacl.sign.keyPair.fromSeed(seed));\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return this._keypair.secretKey;\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport nacl from 'tweetnacl';\n\nimport {Keypair} from './keypair';\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = nacl.sign.detached(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport secp256k1 from 'secp256k1';\nimport sha3 from 'js-sha3';\n\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\nimport {toBuffer} from './util/to-buffer';\n\nconst {publicKeyCreate, ecdsaSign} = secp256k1;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(\n        sha3.keccak_256.update(toBuffer(publicKey)).digest(),\n      ).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(\n        sha3.keccak_256.update(toBuffer(message)).digest(),\n      );\n      const {signature, recid: recoveryId} = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './util/shortvec-encoding';\nimport {PublicKey} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    const PUBKEY_LENGTH = 32;\n\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './util/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'InitializeAccount' | 'Withdraw';\n\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   */\n  static space: number = 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {\n  BlockheightBasedTransactionConfirmationStrategy,\n  Connection,\n} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {BlockheightBasedTransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategy: BlockheightBasedTransactionConfirmationStrategy,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategyOrConfirmOptions:\n    | BlockheightBasedTransactionConfirmationStrategy\n    | ConfirmOptions\n    | undefined,\n  maybeConfirmOptions?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  let confirmationStrategy:\n    | BlockheightBasedTransactionConfirmationStrategy\n    | undefined;\n  let options: ConfirmOptions | undefined;\n  if (\n    confirmationStrategyOrConfirmOptions &&\n    Object.prototype.hasOwnProperty.call(\n      confirmationStrategyOrConfirmOptions,\n      'lastValidBlockHeight',\n    )\n  ) {\n    confirmationStrategy =\n      confirmationStrategyOrConfirmOptions as BlockheightBasedTransactionConfirmationStrategy;\n    options = maybeConfirmOptions;\n  } else {\n    options = confirmationStrategyOrConfirmOptions as\n      | ConfirmOptions\n      | undefined;\n  }\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const commitment = options && options.commitment;\n  const confirmationPromise = confirmationStrategy\n    ? connection.confirmTransaction(confirmationStrategy, commitment)\n    : connection.confirmTransaction(signature, commitment);\n  const status = (await confirmationPromise).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './compute-budget';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './ed25519-program';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './publickey';\nexport * from './stake-program';\nexport * from './system-program';\nexport * from './secp256k1-program';\nexport * from './transaction';\nexport * from './transaction-constants';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './vote-program';\nexport * from './sysvar';\nexport * from './errors';\nexport * from './util/borsh-schema';\nexport * from './util/send-and-confirm-transaction';\nexport * from './util/send-and-confirm-raw-transaction';\nexport * from './util/cluster';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n","/** @license React v17.0.2\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';require(\"object-assign\");var f=require(\"react\"),g=60103;exports.Fragment=60107;if(\"function\"===typeof Symbol&&Symbol.for){var h=Symbol.for;g=h(\"react.element\");exports.Fragment=h(\"react.fragment\")}var m=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,n=Object.prototype.hasOwnProperty,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,k){var b,d={},e=null,l=null;void 0!==k&&(e=\"\"+k);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(l=a.ref);for(b in a)n.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:g,type:c,key:e,ref:l,props:d,_owner:m.current}}exports.jsx=q;exports.jsxs=q;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n"],"names":["Object","defineProperty","exports","value","Messenger","CODE","constructor","name","verbose","this","emit","win","data","postMessage","type","payload","listen","callback","handler","origin","console","log","window","addEventListener","kill","removeEventListener","killers","push","killAll","length","pop","ONE_SEC","EVENTS","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Gateway","web3_js_1","require","bridge_1","constants_1","wallet","terminate","messenger","id","child","document","getElementById","tagName","Error","wd","contentWindow","onConnect","uid","event","CONNECT","onGetAddress","address","getAddress","GET_ADDRESS","onSignTransaction","buf","tx","Transaction","from","serializedTx","signTransaction","serialize","SIGN_TRANSACTION","onSignAllTransactions","bufs","txs","map","serializedTxs","signAllTransactions","signedTx","SIGN_ALL_TRANSACTIONS","onSignMessage","msg","signedMsg","signMessage","SIGN_MESSAGE","__createBinding","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","__exportStar","p","prototype","hasOwnProperty","call","WalletConnector","UID","Math","round","random","pow","appId","interact","timeout","parent","timeoutId","setTimeout","catchedEvent","catchedUID","clearTimeout","er","message","isConnected","transaction","requireAllSignatures","verifySignatures","transactions","toBuffer","arr","Buffer","Uint8Array","buffer","byteOffset","byteLength","minimalisticAssert","assert","val","equal","l","r","inherits_browserModule","ctor","superCtor","super_","TempCtor","require$$0","inherits","require$$1","isSurrogatePair","i","charCodeAt","htonl","w","zero2","word","zero8","utils","enc","Array","isArray","slice","res","replace","parseInt","c","toString","endian","start","end","len","b","a","d","pos","ah","al","bh","lo","hi","bl","ch","cl","dh","dl","carry","eh","el","num","BlockHash","pending","pendingTotal","blockSize","outSize","hmacStrength","padLength","_delta8","_delta32","common","update","toArray","concat","join32","_update","digest","_pad","_digest","bytes","t","rotr32","ch32","x","y","z","maj32","p32","s","shaCommon","require$$2","rotl32","sum32","sum32_5","ft_1","sha1_K","SHA1","h","W","_1","toHex32","split32","require$$3","sum32_4","s0_256","s1_256","g0_256","g1_256","sha256_K","SHA256","_256","f","g","T1","T2","SHA224","_224","rotr64_hi","rotr64_lo","shr64_hi","shr64_lo","sum64","sum64_hi","sum64_lo","sum64_4_hi","sum64_4_lo","sum64_5_hi","sum64_5_lo","sha512_K","SHA512","_512","ch64_hi","xh","xl","yh","yl","zh","ch64_lo","zl","maj64_hi","maj64_lo","s0_512_hi","s0_512_lo","s1_512_hi","s1_512_lo","g0_512_hi","g0_512_lo","g1_512_hi","g1_512_lo","_prepareBlock","c0_hi","c0_lo","c1_hi","c1_lo","c2_hi","c2_lo","c3_hi","c3_lo","fh","fl","gh","gl","hh","hl","c4_hi","c4_lo","T1_hi","T1_lo","T2_hi","T2_lo","SHA384","_384","sha","require$$4","sum32_3","RIPEMD160","j","K","Kh","ripemd","A","B","C","D","E","Ah","Bh","Ch","Dh","Eh","T","rh","sh","Hmac","hash","key","Hash","inner","outer","_init","hmac","sha1","sha256","sha224","sha384","sha512","ripemd160","_permanentCensorErrors","_censorErrors","LogLevels","debug","info","warning","error","off","_logLevel","_globalLogger","_normalizeError","missing","forEach","form","normalize","join","String","fromCharCode","_checkNormalize","LogLevel","ErrorCode","HEX","Logger","version","_log","logLevel","args","level","toLowerCase","throwArgumentError","levels","DEBUG","INFO","warn","WARNING","makeError","code","params","errors","UNKNOWN_ERROR","messageDetails","keys","hex","JSON","stringify","reason","url","NUMERIC_FAULT","fault","CALL_EXCEPTION","INSUFFICIENT_FUNDS","MISSING_NEW","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","TRANSACTION_REPLACED","UNPREDICTABLE_GAS_LIMIT","throwError","INVALID_ARGUMENT","argument","condition","assertArgument","checkNormalize","UNSUPPORTED_OPERATION","operation","checkSafeUint53","checkArgumentCount","count","expectedCount","MISSING_ARGUMENT","UNEXPECTED_ARGUMENT","checkNew","target","kind","checkAbstract","censorship","permanent","globalLogger","logger","addSlice","array","arguments","isInteger","arrayify","options","unshift","allowMissingPrefix","substring","toHexString","isHexable","match","isHexString","hexPad","v","isBytes","Struct","properties","assign","encode","SOLANA_SCHEMA","deserialize","deserializeUnchecked","Enum","super","enum","Map","MAX_SEED_LENGTH","PublicKey","_bn","isPublicKeyData","decoded","bs58","BN","equals","publicKey","eq","toBase58","toBytes","toJSON","toArrayLike","zeroPad","copy","fromPublicKey","seed","programId","seeds","TypeError","publicKeyBytes","is_on_curve","createProgramAddressSync","nonce","seedsWithNonce","err","findProgramAddressSync","pubkeyData","default","set","fields","naclLowLevel","nacl","gf","chk","den","den2","den4","den6","set25519","gf1","unpack25519","S","M","Z","pow2523","neq25519","I","pack25519","crypto_verify_32","Account","secretKey","_keypair","BPF_LOADER_DEPRECATED_PROGRAM_ID","PACKET_DATA_SIZE","SIGNATURE_LENGTH_IN_BYTES","property","BufferLayout","rustString","rsl","_decode","decode","bind","_encode","rslShim","offset","str","chars","alloc","span","decodeLength","size","elem","shift","encodeLength","rem_len","Message","header","accountKeys","recentBlockhash","instructions","indexToProgramIds","account","ix","programIdIndex","isAccountSigner","index","numRequiredSignatures","isAccountWritable","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","isProgramId","has","programIds","values","nonProgramIds","filter","_","numKeys","keyCount","shortvec","instruction","accounts","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","signDataLayout","Layout","signData","byteArray","accountCount","dataSlice","messageArgs","TransactionStatus","DEFAULT_SIGNATURE","fill","TransactionInstruction","opts","pubkey","isSigner","isWritable","signature","signatures","feePayer","lastValidBlockHeight","nonceInfo","_message","_json","newOpts","blockhash","oldOpts","nonceInstruction","signers","add","items","item","compileMessage","accountMetas","accountMeta","includes","uniqueMetas","pubkeyString","uniqueIndex","findIndex","sort","localeCompare","feePayerIndex","payerMeta","splice","signedKeys","unsignedKeys","indexOf","meta","invariant","keyIndex","_compile","every","pair","serializeMessage","connection","getFeeForMessage","setSigners","seen","Set","sign","uniqueSigners","signer","_partialSign","partialSign","_addSignature","addSignature","sigpair","_verifySignatures","config","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","SYSVAR_CLOCK_PUBKEY","SYSVAR_EPOCH_SCHEDULE_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_SLOT_HASHES_PUBKEY","SYSVAR_SLOT_HISTORY_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","async","sendAndConfirmTransaction","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","status","confirmTransaction","sleep","ms","encodeData","allocLength","layout","layoutFields","decodeData","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","nonceAccount","u64","blob","encodeDecode","bigIntLayout","src","toBigIntLE","bigInt","toBufferLE","SystemInstruction","checkProgramId","typeIndex","ixType","entries","SYSTEM_INSTRUCTION_LAYOUTS","checkKeyLength","lamports","space","Create","fromPubkey","newAccountPubkey","Transfer","toPubkey","TransferWithSeed","basePubkey","Allocate","accountPubkey","base","AllocateWithSeed","Assign","AssignWithSeed","CreateWithSeed","authorized","InitializeNonceAccount","noncePubkey","AdvanceNonceAccount","WithdrawNonceAccount","AuthorizeNonceAccount","newAuthorizedPubkey","SystemProgram","expectedLength","freeze","UpgradeNonceAccount","BigInt","createAccountWithSeed","createAccount","initParams","nonceInitialize","instructionData","CHUNK_SIZE","Loader","ceil","chunkSize","payer","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","allocate","owner","transfer","dataLayout","bytesLength","bytesLengthPadding","_rpcEndpoint","REQUESTS_PER_SECOND","all","BPF_LOADER_PROGRAM_ID","BpfLoader","getMinNumSignatures","elf","loaderProgramId","load","ComputeBudgetInstruction","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","units","additionalFee","RequestUnits","RequestHeapFrame","SetComputeUnitLimit","microLamports","SetComputeUnitPrice","ComputeBudgetProgram","objToString","objKeys","obj","isArrayProp","max","propVal","toStr","isFinite","returnVal","trailingZeros","n","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","slot","getEpochAndSlotIndex","epoch","getSlotsInEpoch","normalSlotIndex","normalEpochIndex","floor","getFirstSlotInEpoch","getLastSlotInEpoch","SendTransactionError","logs","globalThis","fetch","TransactionExpiredBlockheightExceededError","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","createRpcResult","union","pick","jsonrpc","unknown","optional","any","UnknownRpcResult","jsonRpcResult","schema","jsonRpcResultAndContext","context","number","notificationResultAndContext","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","GetEpochInfoResult","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","boolean","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","state","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","rpc","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","ConfirmedTransactionResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","ParsedConfirmedTransactionMetaResult","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","rewardType","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","Connection","endpoint","commitmentOrConfig","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","URL","protocol","wsEndpoint","httpHeaders","fetchMiddleware","disableRetryOnRateLimit","client","confirmTransactionInitialTimeout","useHttps","host","port","Number","makeWebsocketUrl","customFetch","fetchImpl","fetchWithMiddleware","init","modifiedFetchArgs","modifiedInfo","modifiedInit","RpcClient","request","method","body","agent","headers","too_many_requests_retries","waitTime","statusText","text","ok","createRpcClient","response","requests","batch","methodName","createRpcBatchRequest","RpcWebSocketClient","autoconnect","max_reconnects","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","rpcEndpoint","_buildArgs","unsafeRes","getBalanceAndContext","catch","configArg","tokenMintAddress","tokenAddress","ownerAddress","_args","arg","mintAddress","getAccountInfoAndContext","publicKeys","getMultipleAccountsInfoAndContext","configOrCommitment","extra","encoding","filters","strategy","rawSignature","decodedSignature","subscriptionCommitment","subscriptionId","confirmationPromise","onSignature","__type","PROCESSED","checkBlockHeight","getBlockHeight","_e","expiryPromise","timeoutMs","TIMED_OUT","currentBlockHeight","BLOCKHEIGHT_EXCEEDED","outcome","race","removeSignatureListener","startSlot","limit","getSignatureStatuses","getSupply","excludeNonCirculatingAccountsList","addresses","epochSchedule","wireMessage","getRecentBlockhashAndContext","getLatestBlockhashAndContext","_buildArgsAtLeastConfirmed","rest","block","endSlot","transactionDetails","firstAvailableBlock","getFirstAvailableBlock","getConfirmedBlockSignatures","until","highestConfirmedRoot","getSlot","before","getConfirmedSignaturesForAddress2","accountInfo","fromAccountData","getNonceAndContext","to","disableCache","expired","Date","now","_pollNewBlockhash","startTime","cachedLatestBlockhash","cachedBlockhash","getLatestBlockhash","MS_PER_SLOT","transactionOrMessage","includeAccounts","originalTx","_blockhashWithExpiryBlockHeight","encodedTransaction","sigVerify","traceIndent","logTrace","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","notify","_updateSubscriptions","clearInterval","close","connect","activeWebSocketGeneration","isCurrentConnectionStillActive","callbacks","serverSubscriptionId","unsubscribeMethod","delete","_handleServerNotification","callbackArgs","cb","notification","_makeSubscription","subscriptionConfig","clientSubscriptionId","fastStableStringify","existingSubscription","onAccountChange","_unsubscribeClientSubscription","accountId","onProgramAccountChange","onLogs","mentions","onSlotChange","onSlotUpdate","subscriptionName","dispose","override","_err","onSignatureWithOptions","onRootChange","Keypair","keypair","skipValidation","TextEncoder","ED25519_INSTRUCTION_LAYOUT","Ed25519Program","instructionIndex","PUBLIC_KEY_BYTES","SIGNATURE_BYTES","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","privateKey","PRIVATE_KEY_BYTES","fromSecretKey","createInstructionWithPublicKey","STAKE_CONFIG_ID","Authorized","staker","withdrawer","Lockup","unixTimestamp","custodian","StakeInstruction","STAKE_INSTRUCTION_LAYOUTS","lockup","Initialize","stakePubkey","Delegate","newAuthorized","stakeAuthorizationType","Authorize","custodianPubkey","authoritySeed","authorityOwner","AuthorizeWithSeed","authorityBase","Split","splitStakePubkey","Merge","sourceStakePubKey","Withdraw","Deactivate","StakeProgram","StakeAuthorizationLayout","Staker","Withdrawer","maybeLockup","initialize","splitInstruction","publicKeyCreate","ecdsaSign","secp256k1","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","sha3","recoveryId","createInstructionWithEthAddress","ethAddress","publicKeyToEthAddress","rawAddress","startsWith","substr","ETHEREUM_ADDRESS_BYTES","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","recid","VALIDATOR_INFO_KEY","InfoString","website","details","keybaseUsername","ValidatorInfo","configKeys","rawInfo","parse","assertType","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","authorizedWithdrawer","votes","authorizedVoters","priorVoters","lastTimestamp","va","rootSlotValid","parseAuthorizedVoter","getPriorVoters","authorizedVoter","parsePriorVoters","epochOfLastAuthorizedSwitch","targetEpoch","idx","isEmpty","VoteInit","VoteInstruction","VOTE_INSTRUCTION_LAYOUTS","voteInit","InitializeAccount","voteAuthorizationType","authorizedWithdrawerPubkey","VoteProgram","VoteAuthorizationLayout","Voter","initializeAccount","sendAndConfirmRawTransaction","confirmationStrategyOrConfirmOptions","maybeConfirmOptions","confirmationStrategy","http","devnet","testnet","https","clusterApiUrl","cluster","tls","LAMPORTS_PER_SOL","Symbol","for","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","ReactCurrentOwner","ref","__self","__source","q","defaultProps","$$typeof","props","_owner","jsx","module"],"sourceRoot":""}