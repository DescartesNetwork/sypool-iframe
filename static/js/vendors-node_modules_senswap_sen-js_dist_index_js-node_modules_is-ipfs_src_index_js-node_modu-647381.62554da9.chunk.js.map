{"version":3,"file":"static/js/vendors-node_modules_senswap_sen-js_dist_index_js-node_modules_is-ipfs_src_index_js-node_modu-647381.62554da9.chunk.js","mappings":"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","sources":["../node_modules/@senswap/sen-js/dist/index.js","../node_modules/is-ipfs/src/index.js","../node_modules/it-filter/index.js","../node_modules/it-map/index.js","../node_modules/it-merge/index.js","../node_modules/it-pipe/index.js","../node_modules/it-take/index.js","../node_modules/libp2p-crypto/src/pbkdf2.js","../node_modules/libp2p-crypto/src/random-bytes.js","../node_modules/browser-pack/_prelude.js","../node_modules/bignumber.js/bignumber.js","en-US.js","formatting.js","globalState.js","loading.js","manipulating.js","numbro.js","parsing.js","unformatting.js","validating.js","../node_modules/datastore-core/esm/src/base.js","../node_modules/datastore-core/esm/src/errors.js","../node_modules/datastore-core/esm/src/keytransform.js","../node_modules/datastore-core/esm/src/memory.js","../node_modules/datastore-core/esm/src/mount.js","../node_modules/datastore-core/esm/src/namespace.js","../node_modules/datastore-core/esm/src/shard.js","../node_modules/datastore-core/esm/src/sharding.js","../node_modules/datastore-core/esm/src/tiered.js","../node_modules/datastore-core/esm/src/utils.js","../node_modules/interface-datastore/esm/src/key.js","../node_modules/ipfs-bitswap/esm/src/message/entry.js","../node_modules/ipfs-core-utils/esm/src/to-cid-and-path.js","../node_modules/multiformats/esm/src/bytes.js"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Purchasing = exports.Stake = exports.IDO = exports.Farming = exports.Swap = exports.SPLT = exports.Lamports = exports.utils = exports.schema = exports.keystore = exports.account = exports.RawWallet = void 0;\n__exportStar(require(\"./rawWallet\"), exports);\nvar rawWallet_1 = require(\"./rawWallet\");\nObject.defineProperty(exports, \"RawWallet\", { enumerable: true, get: function () { return rawWallet_1.default; } });\nvar account_1 = require(\"./account\");\nObject.defineProperty(exports, \"account\", { enumerable: true, get: function () { return account_1.default; } });\n__exportStar(require(\"./default\"), exports);\n__exportStar(require(\"./keystore\"), exports);\nvar keystore_1 = require(\"./keystore\");\nObject.defineProperty(exports, \"keystore\", { enumerable: true, get: function () { return keystore_1.default; } });\n__exportStar(require(\"./schema\"), exports);\nvar schema_1 = require(\"./schema\");\nObject.defineProperty(exports, \"schema\", { enumerable: true, get: function () { return schema_1.default; } });\nvar utils_1 = require(\"./utils\");\nObject.defineProperty(exports, \"utils\", { enumerable: true, get: function () { return utils_1.default; } });\nvar lamports_1 = require(\"./lamports\");\nObject.defineProperty(exports, \"Lamports\", { enumerable: true, get: function () { return lamports_1.default; } });\n__exportStar(require(\"./splt\"), exports);\nvar splt_1 = require(\"./splt\");\nObject.defineProperty(exports, \"SPLT\", { enumerable: true, get: function () { return splt_1.default; } });\n__exportStar(require(\"./swap\"), exports);\nvar swap_1 = require(\"./swap\");\nObject.defineProperty(exports, \"Swap\", { enumerable: true, get: function () { return swap_1.default; } });\n__exportStar(require(\"./farming\"), exports);\nvar farming_1 = require(\"./farming\");\nObject.defineProperty(exports, \"Farming\", { enumerable: true, get: function () { return farming_1.default; } });\n__exportStar(require(\"./ido\"), exports);\nvar ido_1 = require(\"./ido\");\nObject.defineProperty(exports, \"IDO\", { enumerable: true, get: function () { return ido_1.default; } });\n__exportStar(require(\"./stake\"), exports);\nvar stake_1 = require(\"./stake\");\nObject.defineProperty(exports, \"Stake\", { enumerable: true, get: function () { return stake_1.default; } });\n__exportStar(require(\"./purchasing\"), exports);\nvar purchasing_1 = require(\"./purchasing\");\nObject.defineProperty(exports, \"Purchasing\", { enumerable: true, get: function () { return purchasing_1.default; } });\n","'use strict'\n\nconst { base58btc } = require('multiformats/bases/base58')\nconst { base32 } = require('multiformats/bases/base32')\nconst Digest = require('multiformats/hashes/digest')\nconst { Multiaddr } = require('multiaddr')\nconst mafmt = require('mafmt')\nconst { CID } = require('multiformats/cid')\nconst { URL } = require('iso-url')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\n\nconst pathGatewayPattern = /^https?:\\/\\/[^/]+\\/(ip[fn]s)\\/([^/?#]+)/\nconst pathPattern = /^\\/(ip[fn]s)\\/([^/?#]+)/\nconst defaultProtocolMatch = 1\nconst defaultHashMath = 2\n\n// CID, libp2p-key or DNSLink\nconst subdomainGatewayPattern = /^https?:\\/\\/([^/]+)\\.(ip[fn]s)\\.[^/?]+/\nconst subdomainIdMatch = 1\nconst subdomainProtocolMatch = 2\n\n// Fully qualified domain name (FQDN) that has an explicit .tld suffix\nconst fqdnWithTld = /^(([a-z0-9]|[a-z0-9][a-z0-9-]*[a-z0-9])\\.)+([a-z0-9]|[a-z0-9][a-z0-9-]*[a-z0-9])$/\n\n/**\n * @param {*} hash\n */\nfunction isMultihash (hash) {\n  const formatted = convertToString(hash)\n  try {\n    Digest.decode(base58btc.decode('z' + formatted))\n  } catch {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {*} hash\n */\nfunction isBase32EncodedMultibase (hash) {\n  try {\n    base32.decode(hash)\n  } catch {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {*} hash\n */\nfunction isCID (hash) {\n  try {\n    if (typeof hash === 'string') {\n      return Boolean(CID.parse(hash))\n    }\n\n    if (hash instanceof Uint8Array) {\n      return Boolean(CID.decode(hash))\n    }\n\n    return Boolean(CID.asCID(hash)) // eslint-disable-line no-new\n  } catch (e) {\n    return false\n  }\n}\n\n/**\n * @param {*} input\n */\nfunction isMultiaddr (input) {\n  if (!input) return false\n  if (Multiaddr.isMultiaddr(input)) return true\n  try {\n    new Multiaddr(input) // eslint-disable-line no-new\n    return true\n  } catch (e) {\n    return false\n  }\n}\n\n/**\n * @param {string | Uint8Array | Multiaddr} input\n */\nfunction isPeerMultiaddr (input) {\n  return isMultiaddr(input) && mafmt.P2P.matches(input)\n}\n\n/**\n * @param {string | Uint8Array} input\n * @param {RegExp | string} pattern\n * @param {number} [protocolMatch=1]\n * @param {number} [hashMatch=2]\n */\nfunction isIpfs (input, pattern, protocolMatch = defaultProtocolMatch, hashMatch = defaultHashMath) {\n  const formatted = convertToString(input)\n  if (!formatted) {\n    return false\n  }\n\n  const match = formatted.match(pattern)\n  if (!match) {\n    return false\n  }\n\n  if (match[protocolMatch] !== 'ipfs') {\n    return false\n  }\n\n  let hash = match[hashMatch]\n\n  if (hash && pattern === subdomainGatewayPattern) {\n    // when doing checks for subdomain context\n    // ensure hash is case-insensitive\n    // (browsers force-lowercase authority component anyway)\n    hash = hash.toLowerCase()\n  }\n\n  return isCID(hash)\n}\n\n/**\n *\n * @param {string | Uint8Array} input\n * @param {string | RegExp} pattern\n * @param {number} [protocolMatch=1]\n * @param {number} [hashMatch=1]\n */\nfunction isIpns (input, pattern, protocolMatch = defaultProtocolMatch, hashMatch = defaultHashMath) {\n  const formatted = convertToString(input)\n  if (!formatted) {\n    return false\n  }\n  const match = formatted.match(pattern)\n  if (!match) {\n    return false\n  }\n\n  if (match[protocolMatch] !== 'ipns') {\n    return false\n  }\n\n  let ipnsId = match[hashMatch]\n\n  if (ipnsId && pattern === subdomainGatewayPattern) {\n    // when doing checks for subdomain context\n    // ensure ipnsId is case-insensitive\n    // (browsers force-lowercase authority compotent anyway)\n    ipnsId = ipnsId.toLowerCase()\n    // Check if it is cidv1\n    if (isCID(ipnsId)) return true\n    // Check if it looks like FQDN\n    try {\n      if (!ipnsId.includes('.') && ipnsId.includes('-')) {\n        // name without tld, assuming its inlined into a single DNS label\n        // (https://github.com/ipfs/in-web-browsers/issues/169)\n        // en-wikipedia--on--ipfs-org → en.wikipedia-on-ipfs.org\n        ipnsId = ipnsId.replace(/--/g, '@').replace(/-/g, '.').replace(/@/g, '-')\n      }\n      // URL implementation in web browsers forces lowercase of the hostname\n      const { hostname } = new URL(`http://${ipnsId}`) // eslint-disable-line no-new\n      // Check if potential FQDN has an explicit TLD\n      return fqdnWithTld.test(hostname)\n    } catch (e) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/**\n * @param {any} input\n */\nfunction isString (input) {\n  return typeof input === 'string'\n}\n\n/**\n * @param {Uint8Array | string} input\n */\nfunction convertToString (input) {\n  if (input instanceof Uint8Array) {\n    return uint8ArrayToString(input, 'base58btc')\n  }\n\n  if (isString(input)) {\n    return input\n  }\n\n  return false\n}\n\n/**\n * @param {string | Uint8Array} url\n */\nconst ipfsSubdomain = (url) => isIpfs(url, subdomainGatewayPattern, subdomainProtocolMatch, subdomainIdMatch)\n/**\n * @param {string | Uint8Array} url\n */\nconst ipnsSubdomain = (url) => isIpns(url, subdomainGatewayPattern, subdomainProtocolMatch, subdomainIdMatch)\n/**\n * @param {string | Uint8Array} url\n */\nconst subdomain = (url) => ipfsSubdomain(url) || ipnsSubdomain(url)\n\n/**\n * @param {string | Uint8Array} url\n */\nconst ipfsUrl = (url) => isIpfs(url, pathGatewayPattern) || ipfsSubdomain(url)\n/**\n * @param {string | Uint8Array} url\n */\nconst ipnsUrl = (url) => isIpns(url, pathGatewayPattern) || ipnsSubdomain(url)\n/**\n * @param {string | Uint8Array} url\n */\nconst url = (url) => ipfsUrl(url) || ipnsUrl(url) || subdomain(url)\n\n/**\n * @param {string | Uint8Array} path\n */\nconst path = (path) => isIpfs(path, pathPattern) || isIpns(path, pathPattern)\n\nmodule.exports = {\n  multihash: isMultihash,\n  multiaddr: isMultiaddr,\n  peerMultiaddr: isPeerMultiaddr,\n  cid: isCID,\n  /**\n   * @param {CID | string | Uint8Array} cid\n   */\n  base32cid: (cid) => (isBase32EncodedMultibase(cid) && isCID(cid)),\n  ipfsSubdomain,\n  ipnsSubdomain,\n  subdomain,\n  subdomainGatewayPattern,\n  ipfsUrl,\n  ipnsUrl,\n  url,\n  pathGatewayPattern: pathGatewayPattern,\n  /**\n   * @param {string | Uint8Array} path\n   */\n  ipfsPath: (path) => isIpfs(path, pathPattern),\n  /**\n   * @param {string | Uint8Array} path\n   */\n  ipnsPath: (path) => isIpns(path, pathPattern),\n  path,\n  pathPattern,\n  /**\n   * @param {string | Uint8Array} x\n   */\n  urlOrPath: (x) => url(x) || path(x),\n  /**\n   * @param {string | Uint8Array | CID} path\n   */\n  cidPath: path => isString(path) && !isCID(path) && isIpfs(`/ipfs/${path}`, pathPattern)\n}\n","'use strict'\n\n/**\n * Filters the passed (async) iterable by using the filter function\n *\n * @template T\n * @param {AsyncIterable<T>|Iterable<T>} source\n * @param {function(T):boolean|Promise<boolean>} fn\n */\nconst filter = async function * (source, fn) {\n  for await (const entry of source) {\n    if (await fn(entry)) {\n      yield entry\n    }\n  }\n}\n\nmodule.exports = filter\n","'use strict'\n\n/**\n * Takes an (async) iterable and returns one with each item mapped by the passed\n * function.\n *\n * @template I,O\n * @param {AsyncIterable<I>|Iterable<I>} source\n * @param {function(I):O|Promise<O>} func\n * @returns {AsyncIterable<O>}\n */\nconst map = async function * (source, func) {\n  for await (const val of source) {\n    yield func(val)\n  }\n}\n\nmodule.exports = map\n","'use strict'\n\nconst pushable = require('it-pushable')\n\n/**\n * Treat one or more iterables as a single iterable.\n *\n * Nb. sources are iterated over in parallel so the\n * order of emitted items is not guaranteed.\n *\n * @template T\n * @param {...AsyncIterable<T>|Iterable<T>} sources\n * @returns {AsyncIterable<T>}\n */\nconst merge = async function * (...sources) {\n  const output = pushable()\n\n  setTimeout(async () => {\n    try {\n      await Promise.all(\n        sources.map(async (source) => {\n          for await (const item of source) {\n            output.push(item)\n          }\n        })\n      )\n\n      output.end()\n    } catch (/** @type {any} */ err) {\n      output.end(err)\n    }\n  }, 0)\n\n  yield * output\n}\n\nmodule.exports = merge\n","const rawPipe = (...fns) => {\n  let res\n  while (fns.length) {\n    res = fns.shift()(res)\n  }\n  return res\n}\n\nconst isIterable = obj => obj && (\n  typeof obj[Symbol.asyncIterator] === 'function' ||\n  typeof obj[Symbol.iterator] === 'function' ||\n  typeof obj.next === 'function' // Probably, right?\n)\n\nconst isDuplex = obj => obj && typeof obj.sink === 'function' && isIterable(obj.source)\n\nconst duplexPipelineFn = duplex => source => {\n  duplex.sink(source) // TODO: error on sink side is unhandled rejection - this is the same as pull streams\n  return duplex.source\n}\n\nconst pipe = (...fns) => {\n  // Duplex at start: wrap in function and return duplex source\n  if (isDuplex(fns[0])) {\n    const duplex = fns[0]\n    fns[0] = () => duplex.source\n  // Iterable at start: wrap in function\n  } else if (isIterable(fns[0])) {\n    const source = fns[0]\n    fns[0] = () => source\n  }\n\n  if (fns.length > 1) {\n    // Duplex at end: use duplex sink\n    if (isDuplex(fns[fns.length - 1])) {\n      fns[fns.length - 1] = fns[fns.length - 1].sink\n    }\n  }\n\n  if (fns.length > 2) {\n    // Duplex in the middle, consume source with duplex sink and return duplex source\n    for (let i = 1; i < fns.length - 1; i++) {\n      if (isDuplex(fns[i])) {\n        fns[i] = duplexPipelineFn(fns[i])\n      }\n    }\n  }\n\n  return rawPipe(...fns)\n}\n\nmodule.exports = pipe\nmodule.exports.pipe = pipe\nmodule.exports.rawPipe = rawPipe\nmodule.exports.isIterable = isIterable\nmodule.exports.isDuplex = isDuplex\n","'use strict'\n\n/**\n * Stop iteration after n items have been received.\n *\n * @template T\n * @param {AsyncIterable<T>|Iterable<T>} source\n * @param {number} limit\n * @returns {AsyncIterable<T>}\n */\nconst take = async function * (source, limit) {\n  let items = 0\n\n  if (limit < 1) {\n    return\n  }\n\n  for await (const entry of source) {\n    yield entry\n\n    items++\n\n    if (items === limit) {\n      return\n    }\n  }\n}\n\nmodule.exports = take\n","'use strict'\n\nconst forgePbkdf2 = require('node-forge/lib/pbkdf2')\nconst forgeUtil = require('node-forge/lib/util')\nconst errcode = require('err-code')\n\n/**\n * Maps an IPFS hash name to its node-forge equivalent.\n *\n * See https://github.com/multiformats/multihash/blob/master/hashtable.csv\n *\n * @private\n */\nconst hashName = {\n  sha1: 'sha1',\n  'sha2-256': 'sha256',\n  'sha2-512': 'sha512'\n}\n\n/**\n * Computes the Password-Based Key Derivation Function 2.\n *\n * @param {string} password\n * @param {string} salt\n * @param {number} iterations\n * @param {number} keySize - (in bytes)\n * @param {string} hash - The hash name ('sha1', 'sha2-512, ...)\n * @returns {string} - A new password\n */\nfunction pbkdf2 (password, salt, iterations, keySize, hash) {\n  const hasher = hashName[hash]\n  if (!hasher) {\n    const types = Object.keys(hashName).join(' / ')\n    throw errcode(new Error(`Hash '${hash}' is unknown or not supported. Must be ${types}`), 'ERR_UNSUPPORTED_HASH_TYPE')\n  }\n  const dek = forgePbkdf2(\n    password,\n    salt,\n    iterations,\n    keySize,\n    hasher)\n  return forgeUtil.encode64(dek)\n}\n\nmodule.exports = pbkdf2\n","'use strict'\nconst randomBytes = require('iso-random-stream/src/random')\nconst errcode = require('err-code')\n\nmodule.exports = function (length) {\n  if (isNaN(length) || length <= 0) {\n    throw errcode(new Error('random bytes length must be a Number bigger than 0'), 'ERR_INVALID_LENGTH')\n  }\n  return randomBytes(length)\n}\n","(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v8.1.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2019 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    hasSymbol = typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol',\r\n\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                    // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if only one character,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.$|[+-.\\s]|(.).*\\1/.test(v)) {\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var n,\r\n        i = 1,\r\n        m = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '1e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (hasSymbol) {\r\n      P[Symbol.toStringTag] = 'BigNumber';\r\n\r\n      // Node.js v10.12.0+\r\n      P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;\r\n    }\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nmodule.exports = {\n    languageTag: \"en-US\",\n    delimiters: {\n        thousands: \",\",\n        decimal: \".\"\n    },\n    abbreviations: {\n        thousand: \"k\",\n        million: \"m\",\n        billion: \"b\",\n        trillion: \"t\"\n    },\n    spaceSeparated: false,\n    ordinal: function(number) {\n        let b = number % 10;\n        return (~~(number % 100 / 10) === 1) ? \"th\" : (b === 1) ? \"st\" : (b === 2) ? \"nd\" : (b === 3) ? \"rd\" : \"th\";\n    },\n    bytes: {\n        binarySuffixes: [\"B\", \"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\", \"ZiB\", \"YiB\"],\n        decimalSuffixes: [\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"]\n    },\n    currency: {\n        symbol: \"$\",\n        position: \"prefix\",\n        code: \"USD\"\n    },\n    currencyFormat: {\n        thousandSeparated: true,\n        totalLength: 4,\n        spaceSeparated: true,\n        spaceSeparatedCurrency: true\n    },\n    formats: {\n        fourDigits: {\n            totalLength: 4,\n            spaceSeparated: true\n        },\n        fullWithTwoDecimals: {\n            output: \"currency\",\n            thousandSeparated: true,\n            mantissa: 2\n        },\n        fullWithTwoDecimalsNoCurrency: {\n            thousandSeparated: true,\n            mantissa: 2\n        },\n        fullWithNoDecimals: {\n            output: \"currency\",\n            thousandSeparated: true,\n            mantissa: 0\n        }\n    }\n};\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst globalState = require(\"./globalState\");\nconst validating = require(\"./validating\");\nconst parsing = require(\"./parsing\");\nconst BigNumber = require(\"bignumber.js\");\n\nconst powers = {\n    trillion: Math.pow(10, 12),\n    billion: Math.pow(10, 9),\n    million: Math.pow(10, 6),\n    thousand: Math.pow(10, 3)\n};\n\nconst defaultOptions = {\n    totalLength: 0,\n    characteristic: 0,\n    forceAverage: false,\n    average: false,\n    mantissa: -1,\n    optionalMantissa: true,\n    thousandSeparated: false,\n    spaceSeparated: false,\n    negative: \"sign\",\n    forceSign: false,\n    roundingFunction: Math.round,\n    spaceSeparatedAbbreviation: false\n};\n\nconst { binarySuffixes, decimalSuffixes } = globalState.currentBytes();\n\nconst bytes = {\n    general: { scale: 1024, suffixes: decimalSuffixes, marker: \"bd\" },\n    binary: { scale: 1024, suffixes: binarySuffixes, marker: \"b\" },\n    decimal: { scale: 1000, suffixes: decimalSuffixes, marker: \"d\" }\n};\n\n/**\n * Entry point. Format the provided INSTANCE according to the PROVIDEDFORMAT.\n * This method ensure the prefix and postfix are added as the last step.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {NumbroFormat|string} [providedFormat] - specification for formatting\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction format(instance, providedFormat = {}, numbro) {\n    if (typeof providedFormat === \"string\") {\n        providedFormat = parsing.parseFormat(providedFormat);\n    }\n\n    let valid = validating.validateFormat(providedFormat);\n\n    if (!valid) {\n        return \"ERROR: invalid format\";\n    }\n\n    let prefix = providedFormat.prefix || \"\";\n    let postfix = providedFormat.postfix || \"\";\n\n    let output = formatNumbro(instance, providedFormat, numbro);\n    output = insertPrefix(output, prefix);\n    output = insertPostfix(output, postfix);\n    return output;\n}\n\n/**\n * Format the provided INSTANCE according to the PROVIDEDFORMAT.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction formatNumbro(instance, providedFormat, numbro) {\n    switch (providedFormat.output) {\n        case \"currency\": {\n            providedFormat = formatOrDefault(providedFormat, globalState.currentCurrencyDefaultFormat());\n            return formatCurrency(instance, providedFormat, globalState, numbro);\n        }\n        case \"percent\": {\n            providedFormat = formatOrDefault(providedFormat, globalState.currentPercentageDefaultFormat());\n            return formatPercentage(instance, providedFormat, globalState, numbro);\n        }\n        case \"byte\":\n            providedFormat = formatOrDefault(providedFormat, globalState.currentByteDefaultFormat());\n            return formatByte(instance, providedFormat, globalState, numbro);\n        case \"time\":\n            providedFormat = formatOrDefault(providedFormat, globalState.currentTimeDefaultFormat());\n            return formatTime(instance, providedFormat, globalState, numbro);\n        case \"ordinal\":\n            providedFormat = formatOrDefault(providedFormat, globalState.currentOrdinalDefaultFormat());\n            return formatOrdinal(instance, providedFormat, globalState, numbro);\n        case \"number\":\n        default:\n            return formatNumber({\n                instance,\n                providedFormat,\n                numbro\n            });\n    }\n}\n\n/**\n * Get the decimal byte unit (MB) for the provided numbro INSTANCE.\n * We go from one unit to another using the decimal system (1000).\n *\n * @param {Numbro} instance - numbro instance to compute\n * @return {String}\n */\nfunction getDecimalByteUnit(instance) {\n    let data = bytes.decimal;\n    return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;\n}\n\n/**\n * Get the binary byte unit (MiB) for the provided numbro INSTANCE.\n * We go from one unit to another using the decimal system (1024).\n *\n * @param {Numbro} instance - numbro instance to compute\n * @return {String}\n */\nfunction getBinaryByteUnit(instance) {\n    let data = bytes.binary;\n    return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;\n}\n\n/**\n * Get the decimal byte unit (MB) for the provided numbro INSTANCE.\n * We go from one unit to another using the decimal system (1024).\n *\n * @param {Numbro} instance - numbro instance to compute\n * @return {String}\n */\nfunction getByteUnit(instance) {\n    let data = bytes.general;\n    return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;\n}\n\n/**\n * Return the value and the suffix computed in byte.\n * It uses the SUFFIXES and the SCALE provided.\n *\n * @param {number} value - Number to format\n * @param {[String]} suffixes - List of suffixes\n * @param {number} scale - Number in-between two units\n * @return {{value: Number, suffix: String}}\n */\nfunction getFormatByteUnits(value, suffixes, scale) {\n    let suffix = suffixes[0];\n    let abs = Math.abs(value);\n\n    if (abs >= scale) {\n        for (let power = 1; power < suffixes.length; ++power) {\n            let min = Math.pow(scale, power);\n            let max = Math.pow(scale, power + 1);\n\n            if (abs >= min && abs < max) {\n                suffix = suffixes[power];\n                value = value / min;\n                break;\n            }\n        }\n\n        // values greater than or equal to [scale] YB never set the suffix\n        if (suffix === suffixes[0]) {\n            value = value / Math.pow(scale, suffixes.length - 1);\n            suffix = suffixes[suffixes.length - 1];\n        }\n    }\n\n    return { value, suffix };\n}\n\n/**\n * Format the provided INSTANCE as bytes using the PROVIDEDFORMAT, and STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction formatByte(instance, providedFormat, state, numbro) {\n    let base = providedFormat.base || \"binary\";\n    let options = Object.assign({}, defaultOptions, providedFormat);\n\n    const { binarySuffixes: localBinarySuffixes, decimalSuffixes: localDecimalSuffixes } = state.currentBytes();\n\n    const localBytes = {\n        general: { scale: 1024, suffixes: localDecimalSuffixes || decimalSuffixes, marker: \"bd\" },\n        binary: { scale: 1024, suffixes: localBinarySuffixes || binarySuffixes, marker: \"b\" },\n        decimal: { scale: 1000, suffixes: localDecimalSuffixes || decimalSuffixes, marker: \"d\" }\n    };\n    let baseInfo = localBytes[base];\n\n    let { value, suffix } = getFormatByteUnits(instance._value, baseInfo.suffixes, baseInfo.scale);\n\n    let output = formatNumber({\n        instance: numbro(value),\n        providedFormat,\n        state,\n        defaults: state.currentByteDefaultFormat()\n    });\n\n    return `${output}${options.spaceSeparated ? \" \" : \"\"}${suffix}`;\n}\n\n/**\n * Format the provided INSTANCE as an ordinal using the PROVIDEDFORMAT,\n * and the STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @return {string}\n */\nfunction formatOrdinal(instance, providedFormat, state) {\n    let ordinalFn = state.currentOrdinal();\n    let options = Object.assign({}, defaultOptions, providedFormat);\n\n    let output = formatNumber({\n        instance,\n        providedFormat,\n        state\n    });\n    let ordinal = ordinalFn(instance._value);\n\n    return `${output}${options.spaceSeparated ? \" \" : \"\"}${ordinal}`;\n}\n\n/**\n * Format the provided INSTANCE as a time HH:MM:SS.\n *\n * @param {Numbro} instance - numbro instance to format\n * @return {string}\n */\nfunction formatTime(instance) {\n    let hours = Math.floor(instance._value / 60 / 60);\n    let minutes = Math.floor((instance._value - (hours * 60 * 60)) / 60);\n    let seconds = Math.round(instance._value - (hours * 60 * 60) - (minutes * 60));\n    return `${hours}:${(minutes < 10) ? \"0\" : \"\"}${minutes}:${(seconds < 10) ? \"0\" : \"\"}${seconds}`;\n}\n\n/**\n * Format the provided INSTANCE as a percentage using the PROVIDEDFORMAT,\n * and the STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction formatPercentage(instance, providedFormat, state, numbro) {\n    let prefixSymbol = providedFormat.prefixSymbol;\n\n    let output = formatNumber({\n        instance: numbro(instance._value * 100),\n        providedFormat,\n        state\n    });\n    let options = Object.assign({}, defaultOptions, providedFormat);\n\n    if (prefixSymbol) {\n        return `%${options.spaceSeparated ? \" \" : \"\"}${output}`;\n    }\n\n    return `${output}${options.spaceSeparated ? \" \" : \"\"}%`;\n}\n\n/**\n * Format the provided INSTANCE as a percentage using the PROVIDEDFORMAT,\n * and the STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @return {string}\n */\nfunction formatCurrency(instance, providedFormat, state) {\n    const currentCurrency = state.currentCurrency();\n    let clonedFormat = Object.assign({}, providedFormat);\n    let options = Object.assign({}, defaultOptions, clonedFormat);\n    let decimalSeparator = undefined;\n    let space = \"\";\n    let average = !!options.totalLength || !!options.forceAverage || options.average;\n    let position = clonedFormat.currencyPosition || currentCurrency.position;\n    let symbol = clonedFormat.currencySymbol || currentCurrency.symbol;\n    const spaceSeparatedCurrency = options.spaceSeparatedCurrency !== void 0\n        ? options.spaceSeparatedCurrency : options.spaceSeparated;\n\n    if (clonedFormat.lowPrecision === undefined) {\n        clonedFormat.lowPrecision = false;\n    }\n\n    if (spaceSeparatedCurrency) {\n        space = \" \";\n    }\n\n    if (position === \"infix\") {\n        decimalSeparator = space + symbol + space;\n    }\n\n    let output = formatNumber({\n        instance,\n        providedFormat: clonedFormat,\n        state,\n        decimalSeparator\n    });\n\n    if (position === \"prefix\") {\n        if (instance._value < 0 && options.negative === \"sign\") {\n            output = `-${space}${symbol}${output.slice(1)}`;\n        } else if (instance._value > 0 && options.forceSign) {\n            output = `+${space}${symbol}${output.slice(1)}`;\n        } else {\n            output = symbol + space + output;\n        }\n    }\n\n    if (!position || position === \"postfix\") {\n        space = !options.spaceSeparatedAbbreviation && average ? \"\" : space;\n        output = output + space + symbol;\n    }\n\n    return output;\n}\n\n/**\n * Compute the average value out of VALUE.\n * The other parameters are computation options.\n *\n * @param {number} value - value to compute\n * @param {string} [forceAverage] - forced unit used to compute\n * @param {boolean} [lowPrecision=true] - reduce average precision\n * @param {{}} abbreviations - part of the language specification\n * @param {boolean} spaceSeparated - `true` if a space must be inserted between the value and the abbreviation\n * @param {number} [totalLength] - total length of the output including the characteristic and the mantissa\n * @param {function} roundingFunction - function used to round numbers\n * @return {{value: number, abbreviation: string, mantissaPrecision: number}}\n */\nfunction computeAverage({ value, forceAverage, lowPrecision = true, abbreviations, spaceSeparated = false, totalLength = 0, roundingFunction = Math.round }) {\n    let abbreviation = \"\";\n    let abs = Math.abs(value);\n    let mantissaPrecision = -1;\n\n    if (forceAverage && abbreviations[forceAverage] && powers[forceAverage]) {\n        abbreviation = abbreviations[forceAverage];\n        value = value / powers[forceAverage];\n    } else {\n        if (abs >= powers.trillion || (lowPrecision && roundingFunction(abs / powers.trillion) === 1)) {\n            // trillion\n            abbreviation = abbreviations.trillion;\n            value = value / powers.trillion;\n        } else if (abs < powers.trillion && abs >= powers.billion || (lowPrecision && roundingFunction(abs / powers.billion) === 1)) {\n            // billion\n            abbreviation = abbreviations.billion;\n            value = value / powers.billion;\n        } else if (abs < powers.billion && abs >= powers.million || (lowPrecision && roundingFunction(abs / powers.million) === 1)) {\n            // million\n            abbreviation = abbreviations.million;\n            value = value / powers.million;\n        } else if (abs < powers.million && abs >= powers.thousand || (lowPrecision && roundingFunction(abs / powers.thousand) === 1)) {\n            // thousand\n            abbreviation = abbreviations.thousand;\n            value = value / powers.thousand;\n        }\n    }\n\n    let optionalSpace = spaceSeparated ? \" \" : \"\";\n\n    if (abbreviation) {\n        abbreviation = optionalSpace + abbreviation;\n    }\n\n    if (totalLength) {\n        let isNegative = value < 0;\n        let characteristic = value.toString().split(\".\")[0];\n\n        let characteristicLength = isNegative\n            ? characteristic.length - 1\n            : characteristic.length;\n\n        mantissaPrecision = Math.max(totalLength - characteristicLength, 0);\n    }\n\n    return { value, abbreviation, mantissaPrecision };\n}\n\n/**\n * Compute an exponential form for VALUE, taking into account CHARACTERISTIC\n * if provided.\n * @param {number} value - value to compute\n * @param {number} [characteristicPrecision] - optional characteristic length\n * @return {{value: number, abbreviation: string}}\n */\nfunction computeExponential({ value, characteristicPrecision = 0 }) {\n    let [numberString, exponential] = value.toExponential().split(\"e\");\n    let number = +numberString;\n\n    if (!characteristicPrecision) {\n        return {\n            value: number,\n            abbreviation: `e${exponential}`\n        };\n    }\n\n    let characteristicLength = 1; // see `toExponential`\n\n    if (characteristicLength < characteristicPrecision) {\n        number = number * Math.pow(10, characteristicPrecision - characteristicLength);\n        exponential = +exponential - (characteristicPrecision - characteristicLength);\n        exponential = exponential >= 0 ? `+${exponential}` : exponential;\n    }\n\n    return {\n        value: number,\n        abbreviation: `e${exponential}`\n    };\n}\n\n/**\n * Return a string of NUMBER zero.\n *\n * @param {number} number - Length of the output\n * @return {string}\n */\nfunction zeroes(number) {\n    let result = \"\";\n    for (let i = 0; i < number; i++) {\n        result += \"0\";\n    }\n\n    return result;\n}\n\n/**\n * Return a string representing VALUE with a PRECISION-long mantissa.\n * This method is for large/small numbers only (a.k.a. including a \"e\").\n *\n * @param {number} value - number to precise\n * @param {number} precision - desired length for the mantissa\n * @return {string}\n */\nfunction toFixedLarge(value, precision) {\n    let result = value.toString();\n\n    let [base, exp] = result.split(\"e\");\n\n    let [characteristic, mantissa = \"\"] = base.split(\".\");\n\n    if (+exp > 0) {\n        result = characteristic + mantissa + zeroes(exp - mantissa.length);\n    } else {\n        let prefix = \".\";\n\n        if (+characteristic < 0) {\n            prefix = `-0${prefix}`;\n        } else {\n            prefix = `0${prefix}`;\n        }\n\n        let suffix = (zeroes(-exp - 1) + Math.abs(characteristic) + mantissa).substr(0, precision);\n        if (suffix.length < precision) {\n            suffix += zeroes(precision - suffix.length);\n        }\n        result = prefix + suffix;\n    }\n\n    if (+exp > 0 && precision > 0) {\n        result += `.${zeroes(precision)}`;\n    }\n\n    return result;\n}\n\n/**\n * Return a string representing VALUE with a PRECISION-long mantissa.\n *\n * @param {number} value - number to precise\n * @param {number} precision - desired length for the mantissa\n * @param {function} roundingFunction - rounding function to be used\n * @return {string}\n */\nfunction toFixed(value, precision, roundingFunction = Math.round) {\n    if (value.toString().indexOf(\"e\") !== -1) {\n        return toFixedLarge(value, precision);\n    }\n\n    const n = new BigNumber(roundingFunction(+`${value}e+${precision}`) / (Math.pow(10, precision)));\n    return n.toFixed(precision);\n}\n\n/**\n * Return the current OUTPUT with a mantissa precision of PRECISION.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {boolean} optionalMantissa - if `true`, the mantissa is omitted when it's only zeroes\n * @param {number} precision - desired precision of the mantissa\n * @param {boolean} trim - if `true`, trailing zeroes are removed from the mantissa\n * @return {string}\n */\nfunction setMantissaPrecision(output, value, optionalMantissa, precision, trim, roundingFunction) {\n    if (precision === -1) {\n        return output;\n    }\n\n    let result = toFixed(value, precision, roundingFunction);\n    let [currentCharacteristic, currentMantissa = \"\"] = result.toString().split(\".\");\n\n    if (currentMantissa.match(/^0+$/) && (optionalMantissa || trim)) {\n        return currentCharacteristic;\n    }\n\n    let hasTrailingZeroes = currentMantissa.match(/0+$/);\n    if (trim && hasTrailingZeroes) {\n        return `${currentCharacteristic}.${currentMantissa.toString().slice(0, hasTrailingZeroes.index)}`;\n    }\n\n    return result.toString();\n}\n\n/**\n * Return the current OUTPUT with a characteristic precision of PRECISION.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {boolean} optionalCharacteristic - `true` if the characteristic is omitted when it's only zeroes\n * @param {number} precision - desired precision of the characteristic\n * @return {string}\n */\nfunction setCharacteristicPrecision(output, value, optionalCharacteristic, precision) {\n    let result = output;\n    let [currentCharacteristic, currentMantissa] = result.toString().split(\".\");\n\n    if (currentCharacteristic.match(/^-?0$/) && optionalCharacteristic) {\n        if (!currentMantissa) {\n            return currentCharacteristic.replace(\"0\", \"\");\n        }\n\n        return `${currentCharacteristic.replace(\"0\", \"\")}.${currentMantissa}`;\n    }\n\n    const hasNegativeSign = value < 0 && currentCharacteristic.indexOf(\"-\") === 0;\n    if (hasNegativeSign) {\n            // Remove the negative sign\n            currentCharacteristic = currentCharacteristic.slice(1);\n            result = result.slice(1);\n    }\n\n    if (currentCharacteristic.length < precision) {\n        let missingZeros = precision - currentCharacteristic.length;\n        for (let i = 0; i < missingZeros; i++) {\n            result = `0${result}`;\n        }\n    }\n\n    if (hasNegativeSign) {\n        // Add back the minus sign\n        result = `-${result}`;\n    }\n    return result.toString();\n}\n\n/**\n * Return the indexes where are the group separations after splitting\n * `totalLength` in group of `groupSize` size.\n * Important: we start grouping from the right hand side.\n *\n * @param {number} totalLength - total length of the characteristic to split\n * @param {number} groupSize - length of each group\n * @return {[number]}\n */\nfunction indexesOfGroupSpaces(totalLength, groupSize) {\n    let result = [];\n    let counter = 0;\n    for (let i = totalLength; i > 0; i--) {\n        if (counter === groupSize) {\n            result.unshift(i);\n            counter = 0;\n        }\n        counter++;\n    }\n\n    return result;\n}\n\n/**\n * Replace the decimal separator with DECIMALSEPARATOR and insert thousand\n * separators.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {boolean} thousandSeparated - `true` if the characteristic must be separated\n * @param {globalState} state - shared state of the library\n * @param {string} decimalSeparator - string to use as decimal separator\n * @return {string}\n */\nfunction replaceDelimiters(output, value, thousandSeparated, state, decimalSeparator) {\n    let delimiters = state.currentDelimiters();\n    let thousandSeparator = delimiters.thousands;\n    decimalSeparator = decimalSeparator || delimiters.decimal;\n    let thousandsSize = delimiters.thousandsSize || 3;\n\n    let result = output.toString();\n    let characteristic = result.split(\".\")[0];\n    let mantissa = result.split(\".\")[1];\n    const hasNegativeSign = value < 0 && characteristic.indexOf(\"-\") === 0;\n\n    if (thousandSeparated) {\n        if (hasNegativeSign) {\n            // Remove the negative sign\n            characteristic = characteristic.slice(1);\n        }\n\n        let indexesToInsertThousandDelimiters = indexesOfGroupSpaces(characteristic.length, thousandsSize);\n        indexesToInsertThousandDelimiters.forEach((position, index) => {\n            characteristic = characteristic.slice(0, position + index) + thousandSeparator + characteristic.slice(position + index);\n        });\n\n        if (hasNegativeSign) {\n            // Add back the negative sign\n            characteristic = `-${characteristic}`;\n        }\n    }\n\n    if (!mantissa) {\n        result = characteristic;\n    } else {\n        result = characteristic + decimalSeparator + mantissa;\n    }\n    return result;\n}\n\n/**\n * Insert the provided ABBREVIATION at the end of OUTPUT.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {string} abbreviation - abbreviation to append\n * @return {*}\n */\nfunction insertAbbreviation(output, abbreviation) {\n    return output + abbreviation;\n}\n\n/**\n * Insert the positive/negative sign according to the NEGATIVE flag.\n * If the value is negative but still output as 0, the negative sign is removed.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {string} negative - flag for the negative form (\"sign\" or \"parenthesis\")\n * @return {*}\n */\nfunction insertSign(output, value, negative) {\n    if (value === 0) {\n        return output;\n    }\n\n    if (+output === 0) {\n        return output.replace(\"-\", \"\");\n    }\n\n    if (value > 0) {\n        return `+${output}`;\n    }\n\n    if (negative === \"sign\") {\n        return output;\n    }\n\n    return `(${output.replace(\"-\", \"\")})`;\n}\n\n/**\n * Insert the provided PREFIX at the start of OUTPUT.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {string} prefix - abbreviation to prepend\n * @return {*}\n */\nfunction insertPrefix(output, prefix) {\n    return prefix + output;\n}\n\n/**\n * Insert the provided POSTFIX at the end of OUTPUT.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {string} postfix - abbreviation to append\n * @return {*}\n */\nfunction insertPostfix(output, postfix) {\n    return output + postfix;\n}\n\n/**\n * Format the provided INSTANCE as a number using the PROVIDEDFORMAT,\n * and the STATE.\n * This is the key method of the framework!\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} [providedFormat] - specification for formatting\n * @param {globalState} state - shared state of the library\n * @param {string} decimalSeparator - string to use as decimal separator\n * @param {{}} defaults - Set of default values used for formatting\n * @return {string}\n */\nfunction formatNumber({ instance, providedFormat, state = globalState, decimalSeparator, defaults = state.currentDefaults() }) {\n    let value = instance._value;\n\n    if (value === 0 && state.hasZeroFormat()) {\n        return state.getZeroFormat();\n    }\n\n    if (!isFinite(value)) {\n        return value.toString();\n    }\n\n    let options = Object.assign({}, defaultOptions, defaults, providedFormat);\n\n    let totalLength = options.totalLength;\n    let characteristicPrecision = totalLength ? 0 : options.characteristic;\n    let optionalCharacteristic = options.optionalCharacteristic;\n    let forceAverage = options.forceAverage;\n    let lowPrecision = options.lowPrecision;\n    let average = !!totalLength || !!forceAverage || options.average;\n\n    // default when averaging is to chop off decimals\n    let mantissaPrecision = totalLength ? -1 : (average && providedFormat.mantissa === undefined ? 0 : options.mantissa);\n    let optionalMantissa = totalLength ? false : (providedFormat.optionalMantissa === undefined ? mantissaPrecision === -1 : options.optionalMantissa);\n    let trimMantissa = options.trimMantissa;\n    let thousandSeparated = options.thousandSeparated;\n    let spaceSeparated = options.spaceSeparated;\n    let negative = options.negative;\n    let forceSign = options.forceSign;\n    let exponential = options.exponential;\n    let roundingFunction = options.roundingFunction;\n\n    let abbreviation = \"\";\n    if (average) {\n        let data = computeAverage({\n            value,\n            forceAverage,\n            lowPrecision,\n            abbreviations: state.currentAbbreviations(),\n            spaceSeparated,\n            roundingFunction,\n            totalLength\n        });\n\n        value = data.value;\n        abbreviation += data.abbreviation;\n\n        if (totalLength) {\n            mantissaPrecision = data.mantissaPrecision;\n        }\n    }\n\n    if (exponential) {\n        let data = computeExponential({\n            value,\n            characteristicPrecision\n        });\n\n        value = data.value;\n        abbreviation = data.abbreviation + abbreviation;\n    }\n\n    let output = setMantissaPrecision(value.toString(), value, optionalMantissa, mantissaPrecision, trimMantissa, roundingFunction);\n    output = setCharacteristicPrecision(output, value, optionalCharacteristic, characteristicPrecision);\n    output = replaceDelimiters(output, value, thousandSeparated, state, decimalSeparator);\n\n    if (average || exponential) {\n        output = insertAbbreviation(output, abbreviation);\n    }\n\n    if (forceSign || value < 0) {\n        output = insertSign(output, value, negative);\n    }\n\n    return output;\n}\n\n/**\n * If FORMAT is non-null and not just an output, return FORMAT.\n * Return DEFAULTFORMAT otherwise.\n *\n * @param providedFormat\n * @param defaultFormat\n */\nfunction formatOrDefault(providedFormat, defaultFormat) {\n    if (!providedFormat) {\n        return defaultFormat;\n    }\n\n    let keys = Object.keys(providedFormat);\n    if (keys.length === 1 && keys[0] === \"output\") {\n        return defaultFormat;\n    }\n\n    return providedFormat;\n}\n\nmodule.exports = (numbro) => ({\n    format: (...args) => format(...args, numbro),\n    getByteUnit: (...args) => getByteUnit(...args, numbro),\n    getBinaryByteUnit: (...args) => getBinaryByteUnit(...args, numbro),\n    getDecimalByteUnit: (...args) => getDecimalByteUnit(...args, numbro),\n    formatOrDefault\n});\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst enUS = require(\"./en-US\");\nconst validating = require(\"./validating\");\nconst parsing = require(\"./parsing\");\n\nlet state = {};\n\nlet currentLanguageTag = undefined;\nlet languages = {};\n\nlet zeroFormat = null;\n\nlet globalDefaults = {};\n\nfunction chooseLanguage(tag) { currentLanguageTag = tag; }\n\nfunction currentLanguageData() { return languages[currentLanguageTag]; }\n\n/**\n * Return all the register languages\n *\n * @return {{}}\n */\nstate.languages = () => Object.assign({}, languages);\n\n//\n// Current language accessors\n//\n\n/**\n * Return the current language tag\n *\n * @return {string}\n */\nstate.currentLanguage = () => currentLanguageTag;\n\n/**\n * Return the current language bytes data\n *\n * @return {{}}\n */\nstate.currentBytes = () => currentLanguageData().bytes || {};\n\n/**\n * Return the current language currency data\n *\n * @return {{}}\n */\nstate.currentCurrency = () => currentLanguageData().currency;\n\n/**\n * Return the current language abbreviations data\n *\n * @return {{}}\n */\nstate.currentAbbreviations = () => currentLanguageData().abbreviations;\n\n/**\n * Return the current language delimiters data\n *\n * @return {{}}\n */\nstate.currentDelimiters = () => currentLanguageData().delimiters;\n\n/**\n * Return the current language ordinal function\n *\n * @return {function}\n */\nstate.currentOrdinal = () => currentLanguageData().ordinal;\n\n//\n// Defaults\n//\n\n/**\n * Return the current formatting defaults.\n * First use the current language default, then fallback to the globally defined defaults.\n *\n * @return {{}}\n */\nstate.currentDefaults = () => Object.assign({}, currentLanguageData().defaults, globalDefaults);\n\n/**\n * Return the ordinal default-format.\n * First use the current language ordinal default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentOrdinalDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().ordinalFormat);\n\n/**\n * Return the byte default-format.\n * First use the current language byte default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentByteDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().byteFormat);\n\n/**\n * Return the percentage default-format.\n * First use the current language percentage default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentPercentageDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().percentageFormat);\n\n/**\n * Return the currency default-format.\n * First use the current language currency default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentCurrencyDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().currencyFormat);\n\n/**\n * Return the time default-format.\n * First use the current language currency default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentTimeDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().timeFormat);\n\n/**\n * Set the global formatting defaults.\n *\n * @param {{}|string} format - formatting options to use as defaults\n */\nstate.setDefaults = (format) => {\n    format = parsing.parseFormat(format);\n    if (validating.validateFormat(format)) {\n        globalDefaults = format;\n    }\n};\n\n//\n// Zero format\n//\n\n/**\n * Return the format string for 0.\n *\n * @return {string}\n */\nstate.getZeroFormat = () => zeroFormat;\n\n/**\n * Set a STRING to output when the value is 0.\n *\n * @param {{}|string} string - string to set\n */\nstate.setZeroFormat = (string) => zeroFormat = typeof(string) === \"string\" ? string : null;\n\n/**\n * Return true if a format for 0 has been set already.\n *\n * @return {boolean}\n */\nstate.hasZeroFormat = () => zeroFormat !== null;\n\n//\n// Getters/Setters\n//\n\n/**\n * Return the language data for the provided TAG.\n * Return the current language data if no tag is provided.\n *\n * Throw an error if the tag doesn't match any registered language.\n *\n * @param {string} [tag] - language tag of a registered language\n * @return {{}}\n */\nstate.languageData = (tag) => {\n    if (tag) {\n        if (languages[tag]) {\n            return languages[tag];\n        }\n        throw new Error(`Unknown tag \"${tag}\"`);\n    }\n\n    return currentLanguageData();\n};\n\n/**\n * Register the provided DATA as a language if and only if the data is valid.\n * If the data is not valid, an error is thrown.\n *\n * When USELANGUAGE is true, the registered language is then used.\n *\n * @param {{}} data - language data to register\n * @param {boolean} [useLanguage] - `true` if the provided data should become the current language\n */\nstate.registerLanguage = (data, useLanguage = false) => {\n    if (!validating.validateLanguage(data)) {\n        throw new Error(\"Invalid language data\");\n    }\n\n    languages[data.languageTag] = data;\n\n    if (useLanguage) {\n        chooseLanguage(data.languageTag);\n    }\n};\n\n/**\n * Set the current language according to TAG.\n * If TAG doesn't match a registered language, another language matching\n * the \"language\" part of the tag (according to BCP47: https://tools.ietf.org/rfc/bcp/bcp47.txt).\n * If none, the FALLBACKTAG is used. If the FALLBACKTAG doesn't match a register language,\n * `en-US` is finally used.\n *\n * @param tag\n * @param fallbackTag\n */\nstate.setLanguage = (tag, fallbackTag = enUS.languageTag) => {\n    if (!languages[tag]) {\n        let suffix = tag.split(\"-\")[0];\n\n        let matchingLanguageTag = Object.keys(languages).find(each => {\n            return each.split(\"-\")[0] === suffix;\n        });\n\n        if (!languages[matchingLanguageTag]) {\n            chooseLanguage(fallbackTag);\n            return;\n        }\n\n        chooseLanguage(matchingLanguageTag);\n        return;\n    }\n\n    chooseLanguage(tag);\n};\n\nstate.registerLanguage(enUS);\ncurrentLanguageTag = enUS.languageTag;\n\nmodule.exports = state;\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * Load languages matching TAGS. Silently pass over the failing load.\n *\n * We assume here that we are in a node environment, so we don't check for it.\n * @param {[String]} tags - list of tags to load\n * @param {Numbro} numbro - the numbro singleton\n */\nfunction loadLanguagesInNode(tags, numbro) {\n    tags.forEach((tag) => {\n        let data = undefined;\n        try {\n            data = require(`../languages/${tag}`);\n        } catch (e) {\n            console.error(`Unable to load \"${tag}\". No matching language file found.`); // eslint-disable-line no-console\n        }\n\n        if (data) {\n            numbro.registerLanguage(data);\n        }\n    });\n}\n\nmodule.exports = (numbro) => ({\n    loadLanguagesInNode: (tags) => loadLanguagesInNode(tags, numbro)\n});\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst BigNumber = require(\"bignumber.js\");\n\n/**\n * Add a number or a numbro to N.\n *\n * @param {Numbro} n - augend\n * @param {number|Numbro} other - addend\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction add(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.plus(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Subtract a number or a numbro from N.\n *\n * @param {Numbro} n - minuend\n * @param {number|Numbro} other - subtrahend\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction subtract(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.minus(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Multiply N by a number or a numbro.\n *\n * @param {Numbro} n - multiplicand\n * @param {number|Numbro} other - multiplier\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction multiply(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.times(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Divide N by a number or a numbro.\n *\n * @param {Numbro} n - dividend\n * @param {number|Numbro} other - divisor\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction divide(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.dividedBy(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Set N to the OTHER (or the value of OTHER when it's a numbro instance).\n *\n * @param {Numbro} n - numbro instance to mutate\n * @param {number|Numbro} other - new value to assign to N\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction set (n, other, numbro) {\n    let value = other;\n\n    if (numbro.isNumbro(other)) {\n        value = other._value;\n    }\n\n    n._value = value;\n    return n;\n}\n\n/**\n * Return the distance between N and OTHER.\n *\n * @param {Numbro} n\n * @param {number|Numbro} other\n * @param {numbro} numbro - numbro singleton\n * @return {number}\n */\nfunction difference(n, other, numbro) {\n    let clone = numbro(n._value);\n    subtract(clone, other, numbro);\n\n    return Math.abs(clone._value);\n}\n\nmodule.exports = numbro => ({\n    add: (n, other) => add(n, other, numbro),\n    subtract: (n, other) => subtract(n, other, numbro),\n    multiply: (n, other) => multiply(n, other, numbro),\n    divide: (n, other) => divide(n, other, numbro),\n    set: (n, other) => set(n, other, numbro),\n    difference: (n, other) => difference(n, other, numbro),\n    BigNumber: BigNumber\n});\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst VERSION = \"2.3.6\";\n\nconst globalState = require(\"./globalState\");\nconst validator = require(\"./validating\");\nconst loader = require(\"./loading\")(numbro);\nconst unformatter = require(\"./unformatting\");\nlet formatter = require(\"./formatting\")(numbro);\nlet manipulate = require(\"./manipulating\")(numbro);\nconst parsing = require(\"./parsing\");\n\nclass Numbro {\n    constructor(number) {\n        this._value = number;\n    }\n\n    clone() { return numbro(this._value); }\n\n    format(format = {}) { return formatter.format(this, format); }\n\n    formatCurrency(format) {\n        if (typeof format === \"string\") {\n            format = parsing.parseFormat(format);\n        }\n        format = formatter.formatOrDefault(format, globalState.currentCurrencyDefaultFormat());\n        format.output = \"currency\";\n        return formatter.format(this, format);\n    }\n\n    formatTime(format = {}) {\n        format.output = \"time\";\n        return formatter.format(this, format);\n    }\n\n    binaryByteUnits() { return formatter.getBinaryByteUnit(this);}\n\n    decimalByteUnits() { return formatter.getDecimalByteUnit(this);}\n\n    byteUnits() { return formatter.getByteUnit(this);}\n\n    difference(other) { return manipulate.difference(this, other); }\n\n    add(other) { return manipulate.add(this, other); }\n\n    subtract(other) { return manipulate.subtract(this, other); }\n\n    multiply(other) { return manipulate.multiply(this, other); }\n\n    divide(other) { return manipulate.divide(this, other); }\n\n    set(input) { return manipulate.set(this, normalizeInput(input)); }\n\n    value() { return this._value; }\n\n    valueOf() { return this._value; }\n}\n\n/**\n * Make its best to convert input into a number.\n *\n * @param {numbro|string|number} input - Input to convert\n * @return {number}\n */\nfunction normalizeInput(input) {\n    let result = input;\n    if (numbro.isNumbro(input)) {\n        result = input._value;\n    } else if (typeof input === \"string\") {\n        result = numbro.unformat(input);\n    } else if (isNaN(input)) {\n        result = NaN;\n    }\n\n    return result;\n}\n\nfunction numbro(input) {\n    return new Numbro(normalizeInput(input));\n}\n\nnumbro.version = VERSION;\n\nnumbro.isNumbro = function(object) {\n    return object instanceof Numbro;\n};\n\n//\n// `numbro` static methods\n//\n\nnumbro.language = globalState.currentLanguage;\nnumbro.registerLanguage = globalState.registerLanguage;\nnumbro.setLanguage = globalState.setLanguage;\nnumbro.languages = globalState.languages;\nnumbro.languageData = globalState.languageData;\nnumbro.zeroFormat = globalState.setZeroFormat;\nnumbro.defaultFormat = globalState.currentDefaults;\nnumbro.setDefaults = globalState.setDefaults;\nnumbro.defaultCurrencyFormat = globalState.currentCurrencyDefaultFormat;\nnumbro.validate = validator.validate;\nnumbro.loadLanguagesInNode = loader.loadLanguagesInNode;\nnumbro.unformat = unformatter.unformat;\nnumbro.BigNumber = manipulate.BigNumber;\n\nmodule.exports = numbro;\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * Parse the format STRING looking for a prefix. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parsePrefix(string, result) {\n    let match = string.match(/^{([^}]*)}/);\n    if (match) {\n        result.prefix = match[1];\n        return string.slice(match[0].length);\n    }\n\n    return string;\n}\n\n/**\n * Parse the format STRING looking for a postfix. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parsePostfix(string, result) {\n    let match = string.match(/{([^}]*)}$/);\n    if (match) {\n        result.postfix = match[1];\n\n        return string.slice(0, -match[0].length);\n    }\n\n    return string;\n}\n\n/**\n * Parse the format STRING looking for the output value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n */\nfunction parseOutput(string, result) {\n    if (string.indexOf(\"$\") !== -1) {\n        result.output = \"currency\";\n        return;\n    }\n\n    if (string.indexOf(\"%\") !== -1) {\n        result.output = \"percent\";\n        return;\n    }\n\n    if (string.indexOf(\"bd\") !== -1) {\n        result.output = \"byte\";\n        result.base = \"general\";\n        return;\n    }\n\n    if (string.indexOf(\"b\") !== -1) {\n        result.output = \"byte\";\n        result.base = \"binary\";\n        return;\n\n    }\n\n    if (string.indexOf(\"d\") !== -1) {\n        result.output = \"byte\";\n        result.base = \"decimal\";\n        return;\n\n    }\n\n    if (string.indexOf(\":\") !== -1) {\n        result.output = \"time\";\n        return;\n    }\n\n    if (string.indexOf(\"o\") !== -1) {\n        result.output = \"ordinal\";\n    }\n}\n\n/**\n * Parse the format STRING looking for the thousand separated value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseThousandSeparated(string, result) {\n    if (string.indexOf(\",\") !== -1) {\n        result.thousandSeparated = true;\n    }\n}\n\n/**\n * Parse the format STRING looking for the space separated value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseSpaceSeparated(string, result) {\n    if (string.indexOf(\" \") !== -1) {\n        result.spaceSeparated = true;\n        result.spaceSeparatedCurrency = true;\n\n        if (result.average || result.forceAverage) {\n            result.spaceSeparatedAbbreviation = true;\n        }\n    }\n}\n\n/**\n * Parse the format STRING looking for the total length. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseTotalLength(string, result) {\n    let match = string.match(/[1-9]+[0-9]*/);\n\n    if (match) {\n        result.totalLength = +match[0];\n    }\n}\n\n/**\n * Parse the format STRING looking for the characteristic length. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseCharacteristic(string, result) {\n    let characteristic = string.split(\".\")[0];\n    let match = characteristic.match(/0+/);\n    if (match) {\n        result.characteristic = match[0].length;\n    }\n}\n\n/**\n * Parse the format STRING looking for the mantissa length. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseMantissa(string, result) {\n    let mantissa = string.split(\".\")[1];\n    if (mantissa) {\n        let match = mantissa.match(/0+/);\n        if (match) {\n            result.mantissa = match[0].length;\n        }\n    }\n}\n\n/**\n * Parse the format STRING looking for a trimmed mantissa. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n */\nfunction parseTrimMantissa(string, result) {\n    const mantissa = string.split(\".\")[1];\n    if (mantissa) {\n        result.trimMantissa = mantissa.indexOf(\"[\") !== -1;\n    }\n}\n\n/**\n * Parse the format STRING looking for the average value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseAverage(string, result) {\n    if (string.indexOf(\"a\") !== -1) {\n        result.average = true;\n    }\n}\n\n/**\n * Parse the format STRING looking for a forced average precision. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseForceAverage(string, result) {\n    if (string.indexOf(\"K\") !== -1) {\n        result.forceAverage = \"thousand\";\n    } else if (string.indexOf(\"M\") !== -1) {\n        result.forceAverage = \"million\";\n    } else if (string.indexOf(\"B\") !== -1) {\n        result.forceAverage = \"billion\";\n    } else if (string.indexOf(\"T\") !== -1) {\n        result.forceAverage = \"trillion\";\n    }\n}\n\n/**\n * Parse the format STRING finding if the mantissa is optional. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseOptionalMantissa(string, result) {\n    if (string.match(/\\[\\.]/)) {\n        result.optionalMantissa = true;\n    } else if (string.match(/\\./)) {\n        result.optionalMantissa = false;\n    }\n}\n\n/**\n * Parse the format STRING finding if the characteristic is optional. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseOptionalCharacteristic(string, result) {\n    if (string.indexOf(\".\") !== -1) {\n        let characteristic = string.split(\".\")[0];\n        result.optionalCharacteristic = characteristic.indexOf(\"0\") === -1;\n    }\n}\n\n/**\n * Parse the format STRING looking for the negative format. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseNegative(string, result) {\n    if (string.match(/^\\+?\\([^)]*\\)$/)) {\n        result.negative = \"parenthesis\";\n    }\n    if (string.match(/^\\+?-/)) {\n        result.negative = \"sign\";\n    }\n}\n\n/**\n * Parse the format STRING finding if the sign is mandatory. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n */\nfunction parseForceSign(string, result) {\n    if (string.match(/^\\+/)) {\n        result.forceSign = true;\n    }\n}\n\n/**\n * Parse the format STRING and accumulating the values ie RESULT.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {NumbroFormat} - format\n */\nfunction parseFormat(string, result = {}) {\n    if (typeof string !== \"string\") {\n        return string;\n    }\n\n    string = parsePrefix(string, result);\n    string = parsePostfix(string, result);\n    parseOutput(string, result);\n    parseTotalLength(string, result);\n    parseCharacteristic(string, result);\n    parseOptionalCharacteristic(string, result);\n    parseAverage(string, result);\n    parseForceAverage(string, result);\n    parseMantissa(string, result);\n    parseOptionalMantissa(string, result);\n    parseTrimMantissa(string, result);\n    parseThousandSeparated(string, result);\n    parseSpaceSeparated(string, result);\n    parseNegative(string, result);\n    parseForceSign(string, result);\n\n    return result;\n}\n\nmodule.exports = {\n    parseFormat\n};\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst allSuffixes = [\n    {key: \"ZiB\", factor: Math.pow(1024, 7)},\n    {key: \"ZB\", factor: Math.pow(1000, 7)},\n    {key: \"YiB\", factor: Math.pow(1024, 8)},\n    {key: \"YB\", factor: Math.pow(1000, 8)},\n    {key: \"TiB\", factor: Math.pow(1024, 4)},\n    {key: \"TB\", factor: Math.pow(1000, 4)},\n    {key: \"PiB\", factor: Math.pow(1024, 5)},\n    {key: \"PB\", factor: Math.pow(1000, 5)},\n    {key: \"MiB\", factor: Math.pow(1024, 2)},\n    {key: \"MB\", factor: Math.pow(1000, 2)},\n    {key: \"KiB\", factor: Math.pow(1024, 1)},\n    {key: \"KB\", factor: Math.pow(1000, 1)},\n    {key: \"GiB\", factor: Math.pow(1024, 3)},\n    {key: \"GB\", factor: Math.pow(1000, 3)},\n    {key: \"EiB\", factor: Math.pow(1024, 6)},\n    {key: \"EB\", factor: Math.pow(1000, 6)},\n    {key: \"B\", factor: 1}\n];\n\n/**\n * Generate a RegExp where S get all RegExp specific characters escaped.\n *\n * @param {string} s - string representing a RegExp\n * @return {string}\n */\nfunction escapeRegExp(s) {\n    return s.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n}\n\n/**\n * Recursively compute the unformatted value.\n *\n * @param {string} inputString - string to unformat\n * @param {*} delimiters - Delimiters used to generate the inputString\n * @param {string} [currencySymbol] - symbol used for currency while generating the inputString\n * @param {function} ordinal - function used to generate an ordinal out of a number\n * @param {string} zeroFormat - string representing zero\n * @param {*} abbreviations - abbreviations used while generating the inputString\n * @param {NumbroFormat} format - format used while generating the inputString\n * @return {number|undefined}\n */\nfunction computeUnformattedValue(inputString, delimiters, currencySymbol = \"\", ordinal, zeroFormat, abbreviations, format) {\n    if (!isNaN(+inputString)) {\n        return +inputString;\n    }\n\n    let stripped = \"\";\n    // Negative\n\n    let newInput = inputString.replace(/(^[^(]*)\\((.*)\\)([^)]*$)/, \"$1$2$3\");\n\n    if (newInput !== inputString) {\n        return -1 * computeUnformattedValue(newInput, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n    }\n\n    // Byte\n\n    for (let i = 0; i < allSuffixes.length; i++) {\n        let suffix = allSuffixes[i];\n        stripped = inputString.replace(RegExp(`([0-9 ])(${suffix.key})$`), \"$1\");\n\n        if (stripped !== inputString) {\n            return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format) * suffix.factor;\n        }\n    }\n\n    // Percent\n\n    stripped = inputString.replace(\"%\", \"\");\n\n    if (stripped !== inputString) {\n        return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format) / 100;\n    }\n\n    // Ordinal\n\n    let possibleOrdinalValue = parseFloat(inputString);\n\n    if (isNaN(possibleOrdinalValue)) {\n        return undefined;\n    }\n\n    let ordinalString = ordinal(possibleOrdinalValue);\n    if (ordinalString && ordinalString !== \".\") { // if ordinal is \".\" it will be caught next round in the +inputString\n        stripped = inputString.replace(new RegExp(`${escapeRegExp(ordinalString)}$`), \"\");\n\n        if (stripped !== inputString) {\n            return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n        }\n    }\n\n    // Average\n\n    let inversedAbbreviations = {};\n    Object.keys(abbreviations).forEach((key) => {\n        inversedAbbreviations[abbreviations[key]] = key;\n    });\n\n    let abbreviationValues = Object.keys(inversedAbbreviations).sort().reverse();\n    let numberOfAbbreviations = abbreviationValues.length;\n\n    for (let i = 0; i < numberOfAbbreviations; i++) {\n        let value = abbreviationValues[i];\n        let key = inversedAbbreviations[value];\n\n        stripped = inputString.replace(value, \"\");\n        if (stripped !== inputString) {\n            let factor = undefined;\n            switch (key) { // eslint-disable-line default-case\n                case \"thousand\":\n                    factor = Math.pow(10, 3);\n                    break;\n                case \"million\":\n                    factor = Math.pow(10, 6);\n                    break;\n                case \"billion\":\n                    factor = Math.pow(10, 9);\n                    break;\n                case \"trillion\":\n                    factor = Math.pow(10, 12);\n                    break;\n            }\n            return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format) * factor;\n        }\n    }\n\n    return undefined;\n}\n\n/**\n * Removes in one pass all formatting symbols.\n *\n * @param {string} inputString - string to unformat\n * @param {*} delimiters - Delimiters used to generate the inputString\n * @param {string} [currencySymbol] - symbol used for currency while generating the inputString\n * @return {string}\n */\nfunction removeFormattingSymbols(inputString, delimiters, currencySymbol = \"\") {\n    // Currency\n\n    let stripped = inputString.replace(currencySymbol, \"\");\n\n    // Thousand separators\n\n    stripped = stripped.replace(new RegExp(`([0-9])${escapeRegExp(delimiters.thousands)}([0-9])`, \"g\"), \"$1$2\");\n\n    // Decimal\n\n    stripped = stripped.replace(delimiters.decimal, \".\");\n\n    return stripped;\n}\n\n/**\n * Unformat a numbro-generated string to retrieve the original value.\n *\n * @param {string} inputString - string to unformat\n * @param {*} delimiters - Delimiters used to generate the inputString\n * @param {string} [currencySymbol] - symbol used for currency while generating the inputString\n * @param {function} ordinal - function used to generate an ordinal out of a number\n * @param {string} zeroFormat - string representing zero\n * @param {*} abbreviations - abbreviations used while generating the inputString\n * @param {NumbroFormat} format - format used while generating the inputString\n * @return {number|undefined}\n */\nfunction unformatValue(inputString, delimiters, currencySymbol = \"\", ordinal, zeroFormat, abbreviations, format) {\n    if (inputString === \"\") {\n        return undefined;\n    }\n\n    // Zero Format\n\n    if (inputString === zeroFormat) {\n        return 0;\n    }\n\n    let value = removeFormattingSymbols(inputString, delimiters, currencySymbol);\n    return computeUnformattedValue(value, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n}\n\n/**\n * Check if the INPUTSTRING represents a time.\n *\n * @param {string} inputString - string to check\n * @param {*} delimiters - Delimiters used while generating the inputString\n * @return {boolean}\n */\nfunction matchesTime(inputString, delimiters) {\n    let separators = inputString.indexOf(\":\") && delimiters.thousands !== \":\";\n\n    if (!separators) {\n        return false;\n    }\n\n    let segments = inputString.split(\":\");\n    if (segments.length !== 3) {\n        return false;\n    }\n\n    let hours = +segments[0];\n    let minutes = +segments[1];\n    let seconds = +segments[2];\n\n    return !isNaN(hours) && !isNaN(minutes) && !isNaN(seconds);\n}\n\n/**\n * Unformat a numbro-generated string representing a time to retrieve the original value.\n *\n * @param {string} inputString - string to unformat\n * @return {number}\n */\nfunction unformatTime(inputString) {\n    let segments = inputString.split(\":\");\n\n    let hours = +segments[0];\n    let minutes = +segments[1];\n    let seconds = +segments[2];\n\n    return seconds + 60 * minutes + 3600 * hours;\n}\n\n/**\n * Unformat a numbro-generated string to retrieve the original value.\n *\n * @param {string} inputString - string to unformat\n * @param {NumbroFormat} format - format used  while generating the inputString\n * @return {number}\n */\nfunction unformat(inputString, format) {\n    // Avoid circular references\n    const globalState = require(\"./globalState\");\n\n    let delimiters = globalState.currentDelimiters();\n    let currencySymbol = globalState.currentCurrency().symbol;\n    let ordinal = globalState.currentOrdinal();\n    let zeroFormat = globalState.getZeroFormat();\n    let abbreviations = globalState.currentAbbreviations();\n\n    let value = undefined;\n\n    if (typeof inputString === \"string\") {\n        if (matchesTime(inputString, delimiters)) {\n            value = unformatTime(inputString);\n        } else {\n            value = unformatValue(inputString, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n        }\n    } else if (typeof inputString === \"number\") {\n        value = inputString;\n    } else {\n        return undefined;\n    }\n\n    if (value === undefined) {\n        return undefined;\n    }\n\n    return value;\n}\n\nmodule.exports = {\n    unformat\n};\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nlet unformatter = require(\"./unformatting\");\n\n// Simplified regexp supporting only `language`, `script`, and `region`\nconst bcp47RegExp = /^[a-z]{2,3}(-[a-zA-Z]{4})?(-([A-Z]{2}|[0-9]{3}))?$/;\n\nconst validOutputValues = [\n    \"currency\",\n    \"percent\",\n    \"byte\",\n    \"time\",\n    \"ordinal\",\n    \"number\"\n];\n\nconst validForceAverageValues = [\n    \"trillion\",\n    \"billion\",\n    \"million\",\n    \"thousand\"\n];\n\nconst validCurrencyPosition = [\n    \"prefix\",\n    \"infix\",\n    \"postfix\"\n];\n\nconst validNegativeValues = [\n    \"sign\",\n    \"parenthesis\"\n];\n\nconst validMandatoryAbbreviations = {\n    type: \"object\",\n    children: {\n        thousand: {\n            type: \"string\",\n            mandatory: true\n        },\n        million: {\n            type: \"string\",\n            mandatory: true\n        },\n        billion: {\n            type: \"string\",\n            mandatory: true\n        },\n        trillion: {\n            type: \"string\",\n            mandatory: true\n        }\n    },\n    mandatory: true\n};\n\nconst validAbbreviations = {\n    type: \"object\",\n    children: {\n        thousand: \"string\",\n        million: \"string\",\n        billion: \"string\",\n        trillion: \"string\"\n    }\n};\n\nconst validBaseValues = [\n    \"decimal\",\n    \"binary\",\n    \"general\"\n];\n\nconst validFormat = {\n    output: {\n        type: \"string\",\n        validValues: validOutputValues\n    },\n    base: {\n        type: \"string\",\n        validValues: validBaseValues,\n        restriction: (number, format) => format.output === \"byte\",\n        message: \"`base` must be provided only when the output is `byte`\",\n        mandatory: (format) => format.output === \"byte\"\n    },\n    characteristic: {\n        type: \"number\",\n        restriction: (number) => number >= 0,\n        message: \"value must be positive\"\n    },\n    prefix: \"string\",\n    postfix: \"string\",\n    forceAverage: {\n        type: \"string\",\n        validValues: validForceAverageValues\n    },\n    average: \"boolean\",\n    lowPrecision: {\n        type: \"boolean\",\n        restriction: (number, format) => format.average === true,\n        message: \"`lowPrecision` must be provided only when the option `average` is set\"\n    },\n    currencyPosition: {\n        type: \"string\",\n        validValues: validCurrencyPosition\n    },\n    currencySymbol: \"string\",\n    totalLength: {\n        type: \"number\",\n        restrictions: [\n            {\n                restriction: (number) => number >= 0,\n                message: \"value must be positive\"\n            },\n            {\n                restriction: (number, format) => !format.exponential,\n                message: \"`totalLength` is incompatible with `exponential`\"\n            }\n        ]\n    },\n    mantissa: {\n        type: \"number\",\n        restriction: (number) => number >= 0,\n        message: \"value must be positive\"\n    },\n    optionalMantissa: \"boolean\",\n    trimMantissa: \"boolean\",\n    roundingFunction: \"function\",\n    optionalCharacteristic: \"boolean\",\n    thousandSeparated: \"boolean\",\n    spaceSeparated: \"boolean\",\n    spaceSeparatedCurrency: \"boolean\",\n    spaceSeparatedAbbreviation: \"boolean\",\n    abbreviations: validAbbreviations,\n    negative: {\n        type: \"string\",\n        validValues: validNegativeValues\n    },\n    forceSign: \"boolean\",\n    exponential: {\n        type: \"boolean\"\n    },\n    prefixSymbol: {\n        type: \"boolean\",\n        restriction: (number, format) => format.output === \"percent\",\n        message: \"`prefixSymbol` can be provided only when the output is `percent`\"\n    }\n};\n\nconst validLanguage = {\n    languageTag: {\n        type: \"string\",\n        mandatory: true,\n        restriction: (tag) => {\n            return tag.match(bcp47RegExp);\n        },\n        message: \"the language tag must follow the BCP 47 specification (see https://tools.ieft.org/html/bcp47)\"\n    },\n    delimiters: {\n        type: \"object\",\n        children: {\n            thousands: \"string\",\n            decimal: \"string\",\n            thousandsSize: \"number\"\n        },\n        mandatory: true\n    },\n    abbreviations: validMandatoryAbbreviations,\n    spaceSeparated: \"boolean\",\n    spaceSeparatedCurrency: \"boolean\",\n    ordinal: {\n        type: \"function\",\n        mandatory: true\n    },\n    bytes: {\n        type: \"object\",\n        children: {\n            binarySuffixes: \"object\",\n            decimalSuffixes: \"object\"\n        }\n    },\n    currency: {\n        type: \"object\",\n        children: {\n            symbol: \"string\",\n            position: \"string\",\n            code: \"string\"\n        },\n        mandatory: true\n    },\n    defaults: \"format\",\n    ordinalFormat: \"format\",\n    byteFormat: \"format\",\n    percentageFormat: \"format\",\n    currencyFormat: \"format\",\n    timeDefaults: \"format\",\n    formats: {\n        type: \"object\",\n        children: {\n            fourDigits: {\n                type: \"format\",\n                mandatory: true\n            },\n            fullWithTwoDecimals: {\n                type: \"format\",\n                mandatory: true\n            },\n            fullWithTwoDecimalsNoCurrency: {\n                type: \"format\",\n                mandatory: true\n            },\n            fullWithNoDecimals: {\n                type: \"format\",\n                mandatory: true\n            }\n        }\n    }\n};\n\n/**\n * Check the validity of the provided input and format.\n * The check is NOT lazy.\n *\n * @param {string|number|Numbro} input - input to check\n * @param {NumbroFormat} format - format to check\n * @return {boolean} True when everything is correct\n */\nfunction validate(input, format) {\n    let validInput = validateInput(input);\n    let isFormatValid = validateFormat(format);\n\n    return validInput && isFormatValid;\n}\n\n/**\n * Check the validity of the numbro input.\n *\n * @param {string|number|Numbro} input - input to check\n * @return {boolean} True when everything is correct\n */\nfunction validateInput(input) {\n    let value = unformatter.unformat(input);\n\n    return value !== undefined;\n}\n\n/**\n * Check the validity of the provided format TOVALIDATE against SPEC.\n *\n * @param {NumbroFormat} toValidate - format to check\n * @param {*} spec - specification against which to check\n * @param {string} prefix - prefix use for error messages\n * @param {boolean} skipMandatoryCheck - `true` when the check for mandatory key must be skipped\n * @return {boolean} True when everything is correct\n */\nfunction validateSpec(toValidate, spec, prefix, skipMandatoryCheck = false) {\n    let results = Object.keys(toValidate).map((key) => {\n        if (!spec[key]) {\n            console.error(`${prefix} Invalid key: ${key}`); // eslint-disable-line no-console\n            return false;\n        }\n\n        let value = toValidate[key];\n        let data = spec[key];\n\n        if (typeof data === \"string\") {\n            data = {type: data};\n        }\n\n        if (data.type === \"format\") { // all formats are partial (a.k.a will be merged with some default values) thus no need to check mandatory values\n            let valid = validateSpec(value, validFormat, `[Validate ${key}]`, true);\n\n            if (!valid) {\n                return false;\n            }\n        } else if (typeof value !== data.type) {\n            console.error(`${prefix} ${key} type mismatched: \"${data.type}\" expected, \"${typeof value}\" provided`); // eslint-disable-line no-console\n            return false;\n        }\n\n        if (data.restrictions && data.restrictions.length) {\n            let length = data.restrictions.length;\n            for (let i = 0; i < length; i++) {\n                let {restriction, message} = data.restrictions[i];\n                if (!restriction(value, toValidate)) {\n                    console.error(`${prefix} ${key} invalid value: ${message}`); // eslint-disable-line no-console\n                    return false;\n                }\n            }\n        }\n\n        if (data.restriction && !data.restriction(value, toValidate)) {\n            console.error(`${prefix} ${key} invalid value: ${data.message}`); // eslint-disable-line no-console\n            return false;\n        }\n\n        if (data.validValues && data.validValues.indexOf(value) === -1) {\n            console.error(`${prefix} ${key} invalid value: must be among ${JSON.stringify(data.validValues)}, \"${value}\" provided`); // eslint-disable-line no-console\n            return false;\n        }\n\n        if (data.children) {\n            let valid = validateSpec(value, data.children, `[Validate ${key}]`);\n\n            if (!valid) {\n                return false;\n            }\n        }\n\n        return true;\n    });\n\n    if (!skipMandatoryCheck) {\n        results.push(...Object.keys(spec).map((key) => {\n            let data = spec[key];\n            if (typeof data === \"string\") {\n                data = {type: data};\n            }\n\n            if (data.mandatory) {\n                let mandatory = data.mandatory;\n                if (typeof mandatory === \"function\") {\n                    mandatory = mandatory(toValidate);\n                }\n\n                if (mandatory && toValidate[key] === undefined) {\n                    console.error(`${prefix} Missing mandatory key \"${key}\"`); // eslint-disable-line no-console\n                    return false;\n                }\n            }\n\n            return true;\n        }));\n    }\n\n    return results.reduce((acc, current) => {\n        return acc && current;\n    }, true);\n}\n\n/**\n * Check the provided FORMAT.\n *\n * @param {NumbroFormat} format - format to check\n * @return {boolean}\n */\nfunction validateFormat(format) {\n    return validateSpec(format, validFormat, \"[Validate format]\");\n}\n\n/**\n * Check the provided LANGUAGE.\n *\n * @param {NumbroLanguage} language - language to check\n * @return {boolean}\n */\nfunction validateLanguage(language) {\n    return validateSpec(language, validLanguage, \"[Validate language]\");\n}\n\nmodule.exports = {\n    validate,\n    validateFormat,\n    validateInput,\n    validateLanguage\n};\n","import { sortAll } from './utils.js';\nimport drain from 'it-drain';\nimport filter from 'it-filter';\nimport take from 'it-take';\nexport class BaseDatastore {\n  open() {\n    return Promise.reject(new Error('.open is not implemented'));\n  }\n  close() {\n    return Promise.reject(new Error('.close is not implemented'));\n  }\n  put(key, val, options) {\n    return Promise.reject(new Error('.put is not implemented'));\n  }\n  get(key, options) {\n    return Promise.reject(new Error('.get is not implemented'));\n  }\n  has(key, options) {\n    return Promise.reject(new Error('.has is not implemented'));\n  }\n  delete(key, options) {\n    return Promise.reject(new Error('.delete is not implemented'));\n  }\n  async *putMany(source, options = {}) {\n    for await (const {key, value} of source) {\n      await this.put(key, value, options);\n      yield {\n        key,\n        value\n      };\n    }\n  }\n  async *getMany(source, options = {}) {\n    for await (const key of source) {\n      yield this.get(key, options);\n    }\n  }\n  async *deleteMany(source, options = {}) {\n    for await (const key of source) {\n      await this.delete(key, options);\n      yield key;\n    }\n  }\n  batch() {\n    let puts = [];\n    let dels = [];\n    return {\n      put(key, value) {\n        puts.push({\n          key,\n          value\n        });\n      },\n      delete(key) {\n        dels.push(key);\n      },\n      commit: async options => {\n        await drain(this.putMany(puts, options));\n        puts = [];\n        await drain(this.deleteMany(dels, options));\n        dels = [];\n      }\n    };\n  }\n  async *_all(q, options) {\n    throw new Error('._all is not implemented');\n  }\n  async *_allKeys(q, options) {\n    throw new Error('._allKeys is not implemented');\n  }\n  query(q, options) {\n    let it = this._all(q, options);\n    if (q.prefix != null) {\n      it = filter(it, e => e.key.toString().startsWith(q.prefix));\n    }\n    if (Array.isArray(q.filters)) {\n      it = q.filters.reduce((it, f) => filter(it, f), it);\n    }\n    if (Array.isArray(q.orders)) {\n      it = q.orders.reduce((it, f) => sortAll(it, f), it);\n    }\n    if (q.offset != null) {\n      let i = 0;\n      it = filter(it, () => i++ >= q.offset);\n    }\n    if (q.limit != null) {\n      it = take(it, q.limit);\n    }\n    return it;\n  }\n  queryKeys(q, options) {\n    let it = this._allKeys(q, options);\n    if (q.prefix != null) {\n      it = filter(it, key => key.toString().startsWith(q.prefix));\n    }\n    if (Array.isArray(q.filters)) {\n      it = q.filters.reduce((it, f) => filter(it, f), it);\n    }\n    if (Array.isArray(q.orders)) {\n      it = q.orders.reduce((it, f) => sortAll(it, f), it);\n    }\n    if (q.offset != null) {\n      let i = 0;\n      it = filter(it, () => i++ >= q.offset);\n    }\n    if (q.limit != null) {\n      it = take(it, q.limit);\n    }\n    return it;\n  }\n}","import errCode from 'err-code';\nexport function dbOpenFailedError(err) {\n  err = err || new Error('Cannot open database');\n  return errCode(err, 'ERR_DB_OPEN_FAILED');\n}\nexport function dbDeleteFailedError(err) {\n  err = err || new Error('Delete failed');\n  return errCode(err, 'ERR_DB_DELETE_FAILED');\n}\nexport function dbWriteFailedError(err) {\n  err = err || new Error('Write failed');\n  return errCode(err, 'ERR_DB_WRITE_FAILED');\n}\nexport function notFoundError(err) {\n  err = err || new Error('Not Found');\n  return errCode(err, 'ERR_NOT_FOUND');\n}\nexport function abortedError(err) {\n  err = err || new Error('Aborted');\n  return errCode(err, 'ERR_ABORTED');\n}","import { BaseDatastore } from './base.js';\nimport map from 'it-map';\nimport { pipe } from 'it-pipe';\nexport class KeyTransformDatastore extends BaseDatastore {\n  constructor(child, transform) {\n    super();\n    this.child = child;\n    this.transform = transform;\n  }\n  open() {\n    return this.child.open();\n  }\n  put(key, val, options) {\n    return this.child.put(this.transform.convert(key), val, options);\n  }\n  get(key, options) {\n    return this.child.get(this.transform.convert(key), options);\n  }\n  has(key, options) {\n    return this.child.has(this.transform.convert(key), options);\n  }\n  delete(key, options) {\n    return this.child.delete(this.transform.convert(key), options);\n  }\n  async *putMany(source, options = {}) {\n    const transform = this.transform;\n    const child = this.child;\n    yield* pipe(source, async function* (source) {\n      yield* map(source, ({key, value}) => ({\n        key: transform.convert(key),\n        value\n      }));\n    }, async function* (source) {\n      yield* child.putMany(source, options);\n    }, async function* (source) {\n      yield* map(source, ({key, value}) => ({\n        key: transform.invert(key),\n        value\n      }));\n    });\n  }\n  async *getMany(source, options = {}) {\n    const transform = this.transform;\n    const child = this.child;\n    yield* pipe(source, async function* (source) {\n      yield* map(source, key => transform.convert(key));\n    }, async function* (source) {\n      yield* child.getMany(source, options);\n    });\n  }\n  async *deleteMany(source, options = {}) {\n    const transform = this.transform;\n    const child = this.child;\n    yield* pipe(source, async function* (source) {\n      yield* map(source, key => transform.convert(key));\n    }, async function* (source) {\n      yield* child.deleteMany(source, options);\n    }, async function* (source) {\n      yield* map(source, key => transform.invert(key));\n    });\n  }\n  batch() {\n    const b = this.child.batch();\n    return {\n      put: (key, value) => {\n        b.put(this.transform.convert(key), value);\n      },\n      delete: key => {\n        b.delete(this.transform.convert(key));\n      },\n      commit: options => {\n        return b.commit(options);\n      }\n    };\n  }\n  query(q, options) {\n    const query = { ...q };\n    query.filters = (query.filters || []).map(filter => {\n      return ({key, value}) => filter({\n        key: this.transform.convert(key),\n        value\n      });\n    });\n    const {prefix} = q;\n    if (prefix != null && prefix !== '/') {\n      delete query.prefix;\n      query.filters.push(({key}) => {\n        return this.transform.invert(key).toString().startsWith(prefix);\n      });\n    }\n    if (query.orders) {\n      query.orders = query.orders.map(order => {\n        return (a, b) => order({\n          key: this.transform.invert(a.key),\n          value: a.value\n        }, {\n          key: this.transform.invert(b.key),\n          value: b.value\n        });\n      });\n    }\n    return map(this.child.query(query, options), ({key, value}) => {\n      return {\n        key: this.transform.invert(key),\n        value\n      };\n    });\n  }\n  queryKeys(q, options) {\n    const query = { ...q };\n    query.filters = (query.filters || []).map(filter => {\n      return key => filter(this.transform.convert(key));\n    });\n    const {prefix} = q;\n    if (prefix != null && prefix !== '/') {\n      delete query.prefix;\n      query.filters.push(key => {\n        return this.transform.invert(key).toString().startsWith(prefix);\n      });\n    }\n    if (query.orders) {\n      query.orders = query.orders.map(order => {\n        return (a, b) => order(this.transform.invert(a), this.transform.invert(b));\n      });\n    }\n    return map(this.child.queryKeys(query, options), key => {\n      return this.transform.invert(key);\n    });\n  }\n  close() {\n    return this.child.close();\n  }\n}","import { BaseDatastore } from './base.js';\nimport { Key } from 'interface-datastore/key';\nimport * as Errors from './errors.js';\nexport class MemoryDatastore extends BaseDatastore {\n  constructor() {\n    super();\n    this.data = {};\n  }\n  open() {\n    return Promise.resolve();\n  }\n  close() {\n    return Promise.resolve();\n  }\n  async put(key, val) {\n    this.data[key.toString()] = val;\n  }\n  async get(key) {\n    const exists = await this.has(key);\n    if (!exists)\n      throw Errors.notFoundError();\n    return this.data[key.toString()];\n  }\n  async has(key) {\n    return this.data[key.toString()] !== undefined;\n  }\n  async delete(key) {\n    delete this.data[key.toString()];\n  }\n  async *_all() {\n    yield* Object.entries(this.data).map(([key, value]) => ({\n      key: new Key(key),\n      value\n    }));\n  }\n  async *_allKeys() {\n    yield* Object.entries(this.data).map(([key]) => new Key(key));\n  }\n}","import filter from 'it-filter';\nimport take from 'it-take';\nimport merge from 'it-merge';\nimport { BaseDatastore } from './base.js';\nimport * as Errors from './errors.js';\nimport { sortAll } from './utils.js';\nexport class MountDatastore extends BaseDatastore {\n  constructor(mounts) {\n    super();\n    this.mounts = mounts.slice();\n  }\n  async open() {\n    await Promise.all(this.mounts.map(m => m.datastore.open()));\n  }\n  _lookup(key) {\n    for (const mount of this.mounts) {\n      if (mount.prefix.toString() === key.toString() || mount.prefix.isAncestorOf(key)) {\n        return {\n          datastore: mount.datastore,\n          mountpoint: mount.prefix\n        };\n      }\n    }\n  }\n  put(key, value, options) {\n    const match = this._lookup(key);\n    if (match == null) {\n      throw Errors.dbWriteFailedError(new Error('No datastore mounted for this key'));\n    }\n    return match.datastore.put(key, value, options);\n  }\n  get(key, options) {\n    const match = this._lookup(key);\n    if (match == null) {\n      throw Errors.notFoundError(new Error('No datastore mounted for this key'));\n    }\n    return match.datastore.get(key, options);\n  }\n  has(key, options) {\n    const match = this._lookup(key);\n    if (match == null) {\n      return Promise.resolve(false);\n    }\n    return match.datastore.has(key, options);\n  }\n  delete(key, options) {\n    const match = this._lookup(key);\n    if (match == null) {\n      throw Errors.dbDeleteFailedError(new Error('No datastore mounted for this key'));\n    }\n    return match.datastore.delete(key, options);\n  }\n  async close() {\n    await Promise.all(this.mounts.map(m => {\n      return m.datastore.close();\n    }));\n  }\n  batch() {\n    const batchMounts = {};\n    const lookup = key => {\n      const match = this._lookup(key);\n      if (match == null) {\n        throw new Error('No datastore mounted for this key');\n      }\n      const m = match.mountpoint.toString();\n      if (batchMounts[m] == null) {\n        batchMounts[m] = match.datastore.batch();\n      }\n      return { batch: batchMounts[m] };\n    };\n    return {\n      put: (key, value) => {\n        const match = lookup(key);\n        match.batch.put(key, value);\n      },\n      delete: key => {\n        const match = lookup(key);\n        match.batch.delete(key);\n      },\n      commit: async options => {\n        await Promise.all(Object.keys(batchMounts).map(p => batchMounts[p].commit(options)));\n      }\n    };\n  }\n  query(q, options) {\n    const qs = this.mounts.map(m => {\n      return m.datastore.query({\n        prefix: q.prefix,\n        filters: q.filters\n      }, options);\n    });\n    let it = merge(...qs);\n    if (q.filters)\n      q.filters.forEach(f => {\n        it = filter(it, f);\n      });\n    if (q.orders)\n      q.orders.forEach(o => {\n        it = sortAll(it, o);\n      });\n    if (q.offset != null) {\n      let i = 0;\n      it = filter(it, () => i++ >= q.offset);\n    }\n    if (q.limit != null)\n      it = take(it, q.limit);\n    return it;\n  }\n  queryKeys(q, options) {\n    const qs = this.mounts.map(m => {\n      return m.datastore.queryKeys({\n        prefix: q.prefix,\n        filters: q.filters\n      }, options);\n    });\n    let it = merge(...qs);\n    if (q.filters)\n      q.filters.forEach(f => {\n        it = filter(it, f);\n      });\n    if (q.orders)\n      q.orders.forEach(o => {\n        it = sortAll(it, o);\n      });\n    if (q.offset != null) {\n      let i = 0;\n      it = filter(it, () => i++ >= q.offset);\n    }\n    if (q.limit != null)\n      it = take(it, q.limit);\n    return it;\n  }\n}","import { Key } from 'interface-datastore';\nimport { KeyTransformDatastore } from './keytransform.js';\nexport class NamespaceDatastore extends KeyTransformDatastore {\n  constructor(child, prefix) {\n    super(child, {\n      convert(key) {\n        return prefix.child(key);\n      },\n      invert(key) {\n        if (prefix.toString() === '/') {\n          return key;\n        }\n        if (!prefix.isAncestorOf(key)) {\n          throw new Error(`Expected prefix: (${ prefix.toString() }) in key: ${ key.toString() }`);\n        }\n        return new Key(key.toString().slice(prefix.toString().length), false);\n      }\n    });\n  }\n}","import { Key } from 'interface-datastore/key';\nimport readme from './shard-readme.js';\nexport const PREFIX = '/repo/flatfs/shard/';\nexport const SHARDING_FN = 'SHARDING';\nexport const README_FN = '_README';\nexport class ShardBase {\n  constructor(param) {\n    this.param = param;\n    this.name = 'base';\n    this._padding = '';\n  }\n  fun(s) {\n    return 'implement me';\n  }\n  toString() {\n    return `${ PREFIX }v1/${ this.name }/${ this.param }`;\n  }\n}\nexport class Prefix extends ShardBase {\n  constructor(prefixLen) {\n    super(prefixLen);\n    this._padding = ''.padStart(prefixLen, '_');\n    this.name = 'prefix';\n  }\n  fun(noslash) {\n    return (noslash + this._padding).slice(0, this.param);\n  }\n}\nexport class Suffix extends ShardBase {\n  constructor(suffixLen) {\n    super(suffixLen);\n    this._padding = ''.padStart(suffixLen, '_');\n    this.name = 'suffix';\n  }\n  fun(noslash) {\n    const s = this._padding + noslash;\n    return s.slice(s.length - this.param);\n  }\n}\nexport class NextToLast extends ShardBase {\n  constructor(suffixLen) {\n    super(suffixLen);\n    this._padding = ''.padStart(suffixLen + 1, '_');\n    this.name = 'next-to-last';\n  }\n  fun(noslash) {\n    const s = this._padding + noslash;\n    const offset = s.length - this.param - 1;\n    return s.slice(offset, offset + this.param);\n  }\n}\nexport function parseShardFun(str) {\n  str = str.trim();\n  if (str.length === 0) {\n    throw new Error('empty shard string');\n  }\n  if (!str.startsWith(PREFIX)) {\n    throw new Error(`invalid or no path prefix: ${ str }`);\n  }\n  const parts = str.slice(PREFIX.length).split('/');\n  const version = parts[0];\n  if (version !== 'v1') {\n    throw new Error(`expect 'v1' version, got '${ version }'`);\n  }\n  const name = parts[1];\n  if (!parts[2]) {\n    throw new Error('missing param');\n  }\n  const param = parseInt(parts[2], 10);\n  switch (name) {\n  case 'prefix':\n    return new Prefix(param);\n  case 'suffix':\n    return new Suffix(param);\n  case 'next-to-last':\n    return new NextToLast(param);\n  default:\n    throw new Error(`unkown sharding function: ${ name }`);\n  }\n}\nexport const readShardFun = async (path, store) => {\n  const key = new Key(path).child(new Key(SHARDING_FN));\n  const get = typeof store.getRaw === 'function' ? store.getRaw.bind(store) : store.get.bind(store);\n  const res = await get(key);\n  return parseShardFun(new TextDecoder().decode(res || '').trim());\n};\nexport {\n  default as readme\n} from './shard-readme.js';","import { Key } from 'interface-datastore';\nimport {\n  readShardFun,\n  SHARDING_FN,\n  README_FN,\n  readme\n} from './shard.js';\nimport { BaseDatastore } from './base.js';\nimport { KeyTransformDatastore } from './keytransform.js';\nimport * as Errors from './errors.js';\nconst shardKey = new Key(SHARDING_FN);\nconst shardReadmeKey = new Key(README_FN);\nexport class ShardingDatastore extends BaseDatastore {\n  constructor(store, shard) {\n    super();\n    this.child = new KeyTransformDatastore(store, {\n      convert: this._convertKey.bind(this),\n      invert: this._invertKey.bind(this)\n    });\n    this.shard = shard;\n  }\n  async open() {\n    await this.child.open();\n    this.shard = await ShardingDatastore.create(this.child, this.shard);\n  }\n  _convertKey(key) {\n    const s = key.toString();\n    if (s === shardKey.toString() || s === shardReadmeKey.toString()) {\n      return key;\n    }\n    const parent = new Key(this.shard.fun(s));\n    return parent.child(key);\n  }\n  _invertKey(key) {\n    const s = key.toString();\n    if (s === shardKey.toString() || s === shardReadmeKey.toString()) {\n      return key;\n    }\n    return Key.withNamespaces(key.list().slice(1));\n  }\n  static async createOrOpen(store, shard) {\n    try {\n      await ShardingDatastore.create(store, shard);\n    } catch (err) {\n      if (err && err.message !== 'datastore exists')\n        throw err;\n    }\n    return ShardingDatastore.open(store);\n  }\n  static async open(store) {\n    const shard = await readShardFun('/', store);\n    return new ShardingDatastore(store, shard);\n  }\n  static async create(store, shard) {\n    const hasShard = await store.has(shardKey);\n    if (!hasShard && !shard) {\n      throw Errors.dbOpenFailedError(Error('Shard is required when datastore doesn\\'t have a shard key already.'));\n    }\n    if (!hasShard) {\n      const put = typeof store.putRaw === 'function' ? store.putRaw.bind(store) : store.put.bind(store);\n      await Promise.all([\n        put(shardKey, new TextEncoder().encode(shard.toString() + '\\n')),\n        put(shardReadmeKey, new TextEncoder().encode(readme))\n      ]);\n      return shard;\n    }\n    const diskShard = await readShardFun('/', store);\n    const a = (diskShard || '').toString();\n    const b = shard.toString();\n    if (a !== b) {\n      throw new Error(`specified fun ${ b } does not match repo shard fun ${ a }`);\n    }\n    return diskShard;\n  }\n  put(key, val, options) {\n    return this.child.put(key, val, options);\n  }\n  get(key, options) {\n    return this.child.get(key, options);\n  }\n  has(key, options) {\n    return this.child.has(key, options);\n  }\n  delete(key, options) {\n    return this.child.delete(key, options);\n  }\n  async *putMany(source, options = {}) {\n    yield* this.child.putMany(source, options);\n  }\n  async *getMany(source, options = {}) {\n    yield* this.child.getMany(source, options);\n  }\n  async *deleteMany(source, options = {}) {\n    yield* this.child.deleteMany(source, options);\n  }\n  batch() {\n    return this.child.batch();\n  }\n  query(q, options) {\n    const tq = {\n      ...q,\n      filters: [\n        ({key}) => key.toString() !== shardKey.toString(),\n        ({key}) => key.toString() !== shardReadmeKey.toString()\n      ].concat(q.filters || [])\n    };\n    return this.child.query(tq, options);\n  }\n  queryKeys(q, options) {\n    const tq = {\n      ...q,\n      filters: [\n        key => key.toString() !== shardKey.toString(),\n        key => key.toString() !== shardReadmeKey.toString()\n      ].concat(q.filters || [])\n    };\n    return this.child.queryKeys(tq, options);\n  }\n  close() {\n    return this.child.close();\n  }\n}","import { BaseDatastore } from './base.js';\nimport * as Errors from './errors.js';\nimport debug from 'debug';\nimport pushable from 'it-pushable';\nimport drain from 'it-drain';\nconst log = debug('datastore:core:tiered');\nexport class TieredDatastore extends BaseDatastore {\n  constructor(stores) {\n    super();\n    this.stores = stores.slice();\n  }\n  async open() {\n    try {\n      await Promise.all(this.stores.map(store => store.open()));\n    } catch (err) {\n      throw Errors.dbOpenFailedError();\n    }\n  }\n  async put(key, value) {\n    try {\n      await Promise.all(this.stores.map(store => store.put(key, value)));\n    } catch (err) {\n      throw Errors.dbWriteFailedError();\n    }\n  }\n  async get(key, options) {\n    for (const store of this.stores) {\n      try {\n        const res = await store.get(key, options);\n        if (res)\n          return res;\n      } catch (err) {\n        log(err);\n      }\n    }\n    throw Errors.notFoundError();\n  }\n  async has(key, options) {\n    for (const s of this.stores) {\n      if (await s.has(key, options)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  async delete(key, options) {\n    try {\n      await Promise.all(this.stores.map(store => store.delete(key, options)));\n    } catch (err) {\n      throw Errors.dbDeleteFailedError();\n    }\n  }\n  async *putMany(source, options = {}) {\n    let error;\n    const pushables = this.stores.map(store => {\n      const source = pushable();\n      drain(store.putMany(source, options)).catch(err => {\n        error = err;\n      });\n      return source;\n    });\n    try {\n      for await (const pair of source) {\n        if (error) {\n          throw error;\n        }\n        pushables.forEach(p => p.push(pair));\n        yield pair;\n      }\n    } finally {\n      pushables.forEach(p => p.end());\n    }\n  }\n  async *deleteMany(source, options = {}) {\n    let error;\n    const pushables = this.stores.map(store => {\n      const source = pushable();\n      drain(store.deleteMany(source, options)).catch(err => {\n        error = err;\n      });\n      return source;\n    });\n    try {\n      for await (const key of source) {\n        if (error) {\n          throw error;\n        }\n        pushables.forEach(p => p.push(key));\n        yield key;\n      }\n    } finally {\n      pushables.forEach(p => p.end());\n    }\n  }\n  async close() {\n    await Promise.all(this.stores.map(store => store.close()));\n  }\n  batch() {\n    const batches = this.stores.map(store => store.batch());\n    return {\n      put: (key, value) => {\n        batches.forEach(b => b.put(key, value));\n      },\n      delete: key => {\n        batches.forEach(b => b.delete(key));\n      },\n      commit: async options => {\n        for (const batch of batches) {\n          await batch.commit(options);\n        }\n      }\n    };\n  }\n  query(q, options) {\n    return this.stores[this.stores.length - 1].query(q, options);\n  }\n  queryKeys(q, options) {\n    return this.stores[this.stores.length - 1].queryKeys(q, options);\n  }\n}","import all from 'it-all';\nexport const sortAll = (iterable, sorter) => {\n  return async function* () {\n    const values = await all(iterable);\n    yield* values.sort(sorter);\n  }();\n};\nexport const replaceStartWith = (s, r) => {\n  const matcher = new RegExp('^' + r);\n  return s.replace(matcher, '');\n};","import { nanoid } from 'nanoid';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nconst pathSepS = '/';\nconst pathSepB = new TextEncoder().encode(pathSepS);\nconst pathSep = pathSepB[0];\nexport class Key {\n  constructor(s, clean) {\n    if (typeof s === 'string') {\n      this._buf = uint8ArrayFromString(s);\n    } else if (s instanceof Uint8Array) {\n      this._buf = s;\n    } else {\n      throw new Error('Invalid key, should be String of Uint8Array');\n    }\n    if (clean == null) {\n      clean = true;\n    }\n    if (clean) {\n      this.clean();\n    }\n    if (this._buf.byteLength === 0 || this._buf[0] !== pathSep) {\n      throw new Error('Invalid key');\n    }\n  }\n  toString(encoding = 'utf8') {\n    return uint8ArrayToString(this._buf, encoding);\n  }\n  uint8Array() {\n    return this._buf;\n  }\n  get [Symbol.toStringTag]() {\n    return `Key(${ this.toString() })`;\n  }\n  static withNamespaces(list) {\n    return new Key(list.join(pathSepS));\n  }\n  static random() {\n    return new Key(nanoid().replace(/-/g, ''));\n  }\n  static asKey(other) {\n    if (other instanceof Uint8Array || typeof other === 'string') {\n      return new Key(other);\n    }\n    if (other.uint8Array) {\n      return new Key(other.uint8Array());\n    }\n    return null;\n  }\n  clean() {\n    if (!this._buf || this._buf.byteLength === 0) {\n      this._buf = pathSepB;\n    }\n    if (this._buf[0] !== pathSep) {\n      const bytes = new Uint8Array(this._buf.byteLength + 1);\n      bytes.fill(pathSep, 0, 1);\n      bytes.set(this._buf, 1);\n      this._buf = bytes;\n    }\n    while (this._buf.byteLength > 1 && this._buf[this._buf.byteLength - 1] === pathSep) {\n      this._buf = this._buf.subarray(0, -1);\n    }\n  }\n  less(key) {\n    const list1 = this.list();\n    const list2 = key.list();\n    for (let i = 0; i < list1.length; i++) {\n      if (list2.length < i + 1) {\n        return false;\n      }\n      const c1 = list1[i];\n      const c2 = list2[i];\n      if (c1 < c2) {\n        return true;\n      } else if (c1 > c2) {\n        return false;\n      }\n    }\n    return list1.length < list2.length;\n  }\n  reverse() {\n    return Key.withNamespaces(this.list().slice().reverse());\n  }\n  namespaces() {\n    return this.list();\n  }\n  baseNamespace() {\n    const ns = this.namespaces();\n    return ns[ns.length - 1];\n  }\n  list() {\n    return this.toString().split(pathSepS).slice(1);\n  }\n  type() {\n    return namespaceType(this.baseNamespace());\n  }\n  name() {\n    return namespaceValue(this.baseNamespace());\n  }\n  instance(s) {\n    return new Key(this.toString() + ':' + s);\n  }\n  path() {\n    let p = this.parent().toString();\n    if (!p.endsWith(pathSepS)) {\n      p += pathSepS;\n    }\n    p += this.type();\n    return new Key(p);\n  }\n  parent() {\n    const list = this.list();\n    if (list.length === 1) {\n      return new Key(pathSepS);\n    }\n    return new Key(list.slice(0, -1).join(pathSepS));\n  }\n  child(key) {\n    if (this.toString() === pathSepS) {\n      return key;\n    } else if (key.toString() === pathSepS) {\n      return this;\n    }\n    return new Key(this.toString() + key.toString(), false);\n  }\n  isAncestorOf(other) {\n    if (other.toString() === this.toString()) {\n      return false;\n    }\n    return other.toString().startsWith(this.toString());\n  }\n  isDecendantOf(other) {\n    if (other.toString() === this.toString()) {\n      return false;\n    }\n    return this.toString().startsWith(other.toString());\n  }\n  isTopLevel() {\n    return this.list().length === 1;\n  }\n  concat(...keys) {\n    return Key.withNamespaces([\n      ...this.namespaces(),\n      ...flatten(keys.map(key => key.namespaces()))\n    ]);\n  }\n}\nfunction namespaceType(ns) {\n  const parts = ns.split(':');\n  if (parts.length < 2) {\n    return '';\n  }\n  return parts.slice(0, -1).join(':');\n}\nfunction namespaceValue(ns) {\n  const parts = ns.split(':');\n  return parts[parts.length - 1];\n}\nfunction flatten(arr) {\n  return [].concat(...arr);\n}","import { Wantlist } from '../wantlist/index.js';\nimport { base58btc } from 'multiformats/bases/base58';\nconst WantlistEntry = Wantlist.Entry;\nexport class BitswapMessageEntry {\n  constructor(cid, priority, wantType, cancel, sendDontHave) {\n    this.entry = new WantlistEntry(cid, priority, wantType);\n    this.cancel = Boolean(cancel);\n    this.sendDontHave = Boolean(sendDontHave);\n  }\n  get cid() {\n    return this.entry.cid;\n  }\n  set cid(cid) {\n    this.entry.cid = cid;\n  }\n  get priority() {\n    return this.entry.priority;\n  }\n  set priority(val) {\n    this.entry.priority = val;\n  }\n  get wantType() {\n    return this.entry.wantType;\n  }\n  set wantType(val) {\n    this.entry.wantType = val;\n  }\n  get [Symbol.toStringTag]() {\n    const cidStr = this.cid.toString(base58btc);\n    return `BitswapMessageEntry ${ cidStr } <cancel: ${ this.cancel }, priority: ${ this.priority }>`;\n  }\n  equals(other) {\n    return this.cancel === other.cancel && this.sendDontHave === other.sendDontHave && this.wantType === other.wantType && this.entry.equals(other.entry);\n  }\n}","import { CID } from 'multiformats/cid';\nimport errCode from 'err-code';\nconst IPFS_PREFIX = '/ipfs/';\nexport function toCidAndPath(string) {\n  if (string instanceof Uint8Array) {\n    try {\n      string = CID.decode(string);\n    } catch (err) {\n      throw errCode(err, 'ERR_INVALID_CID');\n    }\n  }\n  let cid = CID.asCID(string);\n  if (cid) {\n    return {\n      cid,\n      path: undefined\n    };\n  }\n  string = string.toString();\n  if (string.startsWith(IPFS_PREFIX)) {\n    string = string.substring(IPFS_PREFIX.length);\n  }\n  const parts = string.split('/');\n  let path;\n  try {\n    cid = CID.parse(parts.shift() || '');\n  } catch (err) {\n    throw errCode(err, 'ERR_INVALID_CID');\n  }\n  if (parts.length) {\n    path = `/${ parts.join('/') }`;\n  }\n  return {\n    cid,\n    path\n  };\n}","const empty = new Uint8Array(0);\nconst toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '');\nconst fromHex = hex => {\n  const hexes = hex.match(/../g);\n  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty;\n};\nconst equals = (aa, bb) => {\n  if (aa === bb)\n    return true;\n  if (aa.byteLength !== bb.byteLength) {\n    return false;\n  }\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false;\n    }\n  }\n  return true;\n};\nconst coerce = o => {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array')\n    return o;\n  if (o instanceof ArrayBuffer)\n    return new Uint8Array(o);\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);\n  }\n  throw new Error('Unknown type, must be binary type');\n};\nconst isBinary = o => o instanceof ArrayBuffer || ArrayBuffer.isView(o);\nconst fromString = str => new TextEncoder().encode(str);\nconst toString = b => new TextDecoder().decode(b);\nexport {\n  equals,\n  coerce,\n  isBinary,\n  fromHex,\n  toHex,\n  fromString,\n  toString,\n  empty\n};"],"names":["__createBinding","this","Object","create","o","m","k","k2","undefined","defineProperty","enumerable","get","__exportStar","exports","p","prototype","hasOwnProperty","call","value","Purchasing","Stake","IDO","Farming","Swap","SPLT","Lamports","utils","schema","keystore","account","RawWallet","require","rawWallet_1","default","account_1","keystore_1","schema_1","utils_1","lamports_1","splt_1","swap_1","farming_1","ido_1","stake_1","purchasing_1","base58btc","base32","Digest","Multiaddr","mafmt","CID","URL","toString","uint8ArrayToString","pathGatewayPattern","pathPattern","subdomainGatewayPattern","fqdnWithTld","isCID","hash","Boolean","parse","Uint8Array","decode","asCID","e","isMultiaddr","input","isIpfs","pattern","protocolMatch","hashMatch","formatted","convertToString","match","toLowerCase","isIpns","ipnsId","includes","replace","hostname","test","isString","ipfsSubdomain","url","ipnsSubdomain","subdomain","ipfsUrl","ipnsUrl","path","module","multihash","multiaddr","peerMultiaddr","P2P","matches","cid","base32cid","isBase32EncodedMultibase","ipfsPath","ipnsPath","urlOrPath","x","cidPath","async","source","fn","entry","func","val","pushable","sources","output","setTimeout","Promise","all","map","item","push","end","err","rawPipe","res","fns","length","shift","isIterable","obj","Symbol","asyncIterator","iterator","next","isDuplex","sink","duplexPipelineFn","duplex","pipe","i","limit","items","forgePbkdf2","forgeUtil","errcode","hashName","sha1","password","salt","iterations","keySize","hasher","types","keys","join","Error","dek","encode64","randomBytes","isNaN","r","1","isNumeric","hasSymbol","mathceil","mathfloor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","j","s","z","xc","yc","l","a","b","n","String","str","len","BigNumber","pow2_53","random53bitInt","decimal","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","P","constructor","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","prefix","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","ALPHABET","v","intCheck","round","isNum","alphabet","caseChanged","arrL","arr","carry","klo","khi","temp","xlo","xhi","cmp","c0","ne","toExponential","toFixedPoint","method","c","pows10","out","rd","ni","d","rm","sd","crypto","getRandomValues","EXPONENTIAL_AT","RANGE","rand","dp","args","sum","convertBase","y","baseOut","div","yL","yz","qc","q","base","more","xL","xi","remL","rem","yc0","rem0","prodL","prod","subtract","parseNumeric","nIsBig","nIsNeg","isModExp","nIsOdd","half","isOdd","ye","xe","t","xLTy","reverse","normalise","sqrtBase","xcL","ycL","zc","ylo","yhi","slice","coeffToString","rep","format","toFixed","g1","g2","intPart","fractionPart","isNeg","intDigits","isInteger","n1","d1","md","exp","n0","d2","d0","globalObject","languageTag","delimiters","thousands","abbreviations","thousand","million","billion","trillion","spaceSeparated","ordinal","number","bytes","binarySuffixes","decimalSuffixes","currency","symbol","position","code","currencyFormat","thousandSeparated","totalLength","spaceSeparatedCurrency","formats","fourDigits","fullWithTwoDecimals","mantissa","fullWithTwoDecimalsNoCurrency","fullWithNoDecimals","globalState","validating","parsing","powers","Math","pow","defaultOptions","characteristic","forceAverage","average","optionalMantissa","negative","forceSign","roundingFunction","spaceSeparatedAbbreviation","currentBytes","general","scale","suffixes","marker","binary","_format","instance","providedFormat","numbro","parseFormat","validateFormat","postfix","state","currentCurrency","clonedFormat","assign","options","space","currencyPosition","currencySymbol","lowPrecision","formatNumber","_value","formatOrDefault","currentCurrencyDefaultFormat","prefixSymbol","currentPercentageDefaultFormat","_state$currentBytes","localBinarySuffixes","localDecimalSuffixes","baseInfo","_getFormatByteUnits","getFormatByteUnits","defaults","currentByteDefaultFormat","currentTimeDefaultFormat","hours","floor","minutes","seconds","ordinalFn","currentOrdinal","currentOrdinalDefaultFormat","abs","power","min","max","zeroes","result","precision","indexOf","_result$split2","split","_slicedToArray","_base$split2","_base$split2$","substr","replaceDelimiters","currentDelimiters","thousandSeparator","thousandsSize","hasNegativeSign","counter","unshift","forEach","index","_ref3","_ref3$state","_ref3$defaults","currentDefaults","hasZeroFormat","getZeroFormat","isFinite","_ref2","_ref2$characteristicP","characteristicPrecision","_value$toExponential$2","numberString","exponential","optionalCharacteristic","mantissaPrecision","trimMantissa","abbreviation","data","_ref","_ref$lowPrecision","_ref$spaceSeparated","_ref$totalLength","_ref$roundingFunction","isNegative","characteristicLength","currentAbbreviations","_data","trim","_result$toString$spli2","currentCharacteristic","_result$toString$spli3","currentMantissa","hasTrailingZeroes","_result$toString$spli5","missingZeros","defaultFormat","_key","arguments","apply","concat","getByteUnit","_key2","getBinaryByteUnit","_key3","getDecimalByteUnit","_key4","enUS","currentLanguageTag","languages","zeroFormat","globalDefaults","chooseLanguage","tag","currentLanguageData","currentLanguage","ordinalFormat","byteFormat","percentageFormat","timeFormat","setDefaults","setZeroFormat","string","languageData","registerLanguage","useLanguage","validateLanguage","setLanguage","fallbackTag","matchingLanguageTag","find","each","loadLanguagesInNode","tags","console","error","_subtract","other","otherValue","isNumbro","minus","toNumber","add","plus","multiply","times","divide","dividedBy","set","difference","clone","validator","loader","unformatter","formatter","manipulate","Numbro","normalizeInput","unformat","NaN","version","object","language","defaultCurrencyFormat","validate","allSuffixes","key","factor","escapeRegExp","unformatValue","inputString","computeUnformattedValue","u","stripped","newInput","RegExp","possibleOrdinalValue","parseFloat","ordinalString","inversedAbbreviations","abbreviationValues","sort","numberOfAbbreviations","_i","segments","bcp47RegExp","validFormat","type","validValues","restriction","message","mandatory","restrictions","children","validLanguage","timeDefaults","validateInput","validateSpec","toValidate","spec","skipMandatoryCheck","results","_typeof","_data$restrictions$i","JSON","stringify","_toConsumableArray","reduce","acc","current","validInput","isFormatValid","BaseDatastore","open","reject","close","put","has","delete","batch","puts","dels","commit","drain","putMany","deleteMany","query","it","_all","filter","startsWith","Array","isArray","filters","f","orders","sortAll","offset","take","queryKeys","_allKeys","dbOpenFailedError","errCode","dbDeleteFailedError","dbWriteFailedError","notFoundError","abortedError","KeyTransformDatastore","child","transform","super","convert","invert","getMany","order","MemoryDatastore","resolve","Errors","entries","Key","MountDatastore","mounts","datastore","_lookup","mount","isAncestorOf","mountpoint","batchMounts","lookup","qs","merge","NamespaceDatastore","PREFIX","SHARDING_FN","README_FN","ShardBase","param","name","_padding","fun","Prefix","prefixLen","padStart","noslash","Suffix","suffixLen","NextToLast","parseShardFun","parts","parseInt","readShardFun","store","getRaw","bind","TextDecoder","shardKey","shardReadmeKey","ShardingDatastore","shard","_convertKey","_invertKey","list","hasShard","putRaw","TextEncoder","encode","readme","diskShard","tq","log","debug","TieredDatastore","stores","pushables","catch","pair","batches","iterable","sorter","values","pathSepS","pathSepB","pathSep","clean","_buf","uint8ArrayFromString","byteLength","encoding","uint8Array","toStringTag","nanoid","fill","subarray","less","list1","list2","c1","c2","withNamespaces","namespaces","baseNamespace","ns","namespaceType","namespaceValue","parent","endsWith","isDecendantOf","isTopLevel","WantlistEntry","Wantlist","BitswapMessageEntry","priority","wantType","cancel","sendDontHave","equals","IPFS_PREFIX","toCidAndPath","substring","empty","toHex","hex","byte","fromHex","hexes","aa","bb","ii","coerce","ArrayBuffer","isView","buffer","byteOffset","isBinary","fromString"],"sourceRoot":""}