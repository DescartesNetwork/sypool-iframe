{"version":3,"file":"static/js/vendors-node_modules_senswap_sen-js_dist_index_js-node_modules_solana_web3_js_lib_index_brows-df8fd6.70440d13.chunk.js","mappings":"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","sources":["../node_modules/@senswap/sen-js/dist/index.js","../../src/util/to-buffer.ts","../../node_modules/minimalistic-assert/index.js","../../node_modules/inherits/inherits_browser.js","../../node_modules/hash.js/lib/hash/utils.js","../../node_modules/hash.js/lib/hash/common.js","../../node_modules/hash.js/lib/hash/sha/common.js","../../node_modules/hash.js/lib/hash/sha/1.js","../../node_modules/hash.js/lib/hash/sha/256.js","../../node_modules/hash.js/lib/hash/sha/224.js","../../node_modules/hash.js/lib/hash/sha/512.js","../../node_modules/hash.js/lib/hash/sha/384.js","../../node_modules/hash.js/lib/hash/sha.js","../../node_modules/hash.js/lib/hash/ripemd.js","../../node_modules/hash.js/lib/hash/hmac.js","../../node_modules/hash.js/lib/hash.js","../../node_modules/@ethersproject/logger/lib.esm/index.js","../../node_modules/@ethersproject/logger/lib.esm/_version.js","../../node_modules/@ethersproject/bytes/lib.esm/_version.js","../../node_modules/@ethersproject/bytes/lib.esm/index.js","../../node_modules/@ethersproject/sha2/lib.esm/sha2.js","../../node_modules/@ethersproject/sha2/lib.esm/_version.js","../../src/util/borsh-schema.ts","../../src/publickey.ts","../../src/account.ts","../../src/bpf-loader-deprecated.ts","../../src/transaction-constants.ts","../../src/layout.ts","../../src/util/shortvec-encoding.ts","../../src/message.ts","../../src/util/assert.ts","../../src/transaction.ts","../../src/sysvar.ts","../../src/util/send-and-confirm-transaction.ts","../../src/util/sleep.ts","../../src/instruction.ts","../../src/fee-calculator.ts","../../src/nonce-account.ts","../../src/util/bigint.ts","../../src/system-program.ts","../../src/loader.ts","../../src/bpf-loader.ts","../../src/compute-budget.ts","../../node_modules/fast-stable-stringify/index.js","../../src/epoch-schedule.ts","../../src/errors.ts","../../src/__forks__/browser/fetch-impl.ts","../../src/util/tx-expiry-custom-errors.ts","../../src/connection.ts","../../src/util/url.ts","../../src/keypair.ts","../../src/ed25519-program.ts","../../src/stake-program.ts","../../src/secp256k1-program.ts","../../src/validator-info.ts","../../src/vote-account.ts","../../src/vote-program.ts","../../src/util/send-and-confirm-raw-transaction.ts","../../src/util/cluster.ts","../../src/index.ts","../node_modules/is-ipfs/src/index.js","../node_modules/it-filter/index.js","../node_modules/it-map/index.js","../node_modules/it-merge/index.js","../node_modules/it-pipe/index.js","../node_modules/it-take/index.js","../node_modules/libp2p-crypto/src/pbkdf2.js","../node_modules/libp2p-crypto/src/random-bytes.js","../node_modules/browser-pack/_prelude.js","../node_modules/bignumber.js/bignumber.js","en-US.js","formatting.js","globalState.js","loading.js","manipulating.js","numbro.js","parsing.js","unformatting.js","validating.js","../node_modules/react/cjs/react-jsx-runtime.production.min.js","../node_modules/react/jsx-runtime.js","../node_modules/datastore-core/esm/src/base.js","../node_modules/datastore-core/esm/src/errors.js","../node_modules/datastore-core/esm/src/keytransform.js","../node_modules/datastore-core/esm/src/memory.js","../node_modules/datastore-core/esm/src/mount.js","../node_modules/datastore-core/esm/src/namespace.js","../node_modules/datastore-core/esm/src/shard.js","../node_modules/datastore-core/esm/src/sharding.js","../node_modules/datastore-core/esm/src/tiered.js","../node_modules/datastore-core/esm/src/utils.js","../node_modules/interface-datastore/esm/src/key.js","../node_modules/ipfs-bitswap/esm/src/message/entry.js","../node_modules/ipfs-core-utils/esm/src/to-cid-and-path.js","../node_modules/multiformats/esm/src/bytes.js"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Purchasing = exports.Stake = exports.IDO = exports.Farming = exports.Swap = exports.SPLT = exports.Lamports = exports.utils = exports.schema = exports.keystore = exports.account = exports.RawWallet = void 0;\n__exportStar(require(\"./rawWallet\"), exports);\nvar rawWallet_1 = require(\"./rawWallet\");\nObject.defineProperty(exports, \"RawWallet\", { enumerable: true, get: function () { return rawWallet_1.default; } });\nvar account_1 = require(\"./account\");\nObject.defineProperty(exports, \"account\", { enumerable: true, get: function () { return account_1.default; } });\n__exportStar(require(\"./default\"), exports);\n__exportStar(require(\"./keystore\"), exports);\nvar keystore_1 = require(\"./keystore\");\nObject.defineProperty(exports, \"keystore\", { enumerable: true, get: function () { return keystore_1.default; } });\n__exportStar(require(\"./schema\"), exports);\nvar schema_1 = require(\"./schema\");\nObject.defineProperty(exports, \"schema\", { enumerable: true, get: function () { return schema_1.default; } });\nvar utils_1 = require(\"./utils\");\nObject.defineProperty(exports, \"utils\", { enumerable: true, get: function () { return utils_1.default; } });\nvar lamports_1 = require(\"./lamports\");\nObject.defineProperty(exports, \"Lamports\", { enumerable: true, get: function () { return lamports_1.default; } });\n__exportStar(require(\"./splt\"), exports);\nvar splt_1 = require(\"./splt\");\nObject.defineProperty(exports, \"SPLT\", { enumerable: true, get: function () { return splt_1.default; } });\n__exportStar(require(\"./swap\"), exports);\nvar swap_1 = require(\"./swap\");\nObject.defineProperty(exports, \"Swap\", { enumerable: true, get: function () { return swap_1.default; } });\n__exportStar(require(\"./farming\"), exports);\nvar farming_1 = require(\"./farming\");\nObject.defineProperty(exports, \"Farming\", { enumerable: true, get: function () { return farming_1.default; } });\n__exportStar(require(\"./ido\"), exports);\nvar ido_1 = require(\"./ido\");\nObject.defineProperty(exports, \"IDO\", { enumerable: true, get: function () { return ido_1.default; } });\n__exportStar(require(\"./stake\"), exports);\nvar stake_1 = require(\"./stake\");\nObject.defineProperty(exports, \"Stake\", { enumerable: true, get: function () { return stake_1.default; } });\n__exportStar(require(\"./purchasing\"), exports);\nvar purchasing_1 = require(\"./purchasing\");\nObject.defineProperty(exports, \"Purchasing\", { enumerable: true, get: function () { return purchasing_1.default; } });\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","module.exports = assert;\n\nfunction assert(val, msg) {\n  if (!val)\n    throw new Error(msg || 'Assertion failed');\n}\n\nassert.equal = function assertEqual(l, r, msg) {\n  if (l != r)\n    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));\n};\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n","'use strict';\n\nvar assert = require('minimalistic-assert');\nvar inherits = require('inherits');\n\nexports.inherits = inherits;\n\nfunction isSurrogatePair(msg, i) {\n  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {\n    return false;\n  }\n  if (i < 0 || i + 1 >= msg.length) {\n    return false;\n  }\n  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;\n}\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg))\n    return msg.slice();\n  if (!msg)\n    return [];\n  var res = [];\n  if (typeof msg === 'string') {\n    if (!enc) {\n      // Inspired by stringToUtf8ByteArray() in closure-library by Google\n      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143\n      // Apache License 2.0\n      // https://github.com/google/closure-library/blob/master/LICENSE\n      var p = 0;\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n        if (c < 128) {\n          res[p++] = c;\n        } else if (c < 2048) {\n          res[p++] = (c >> 6) | 192;\n          res[p++] = (c & 63) | 128;\n        } else if (isSurrogatePair(msg, i)) {\n          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);\n          res[p++] = (c >> 18) | 240;\n          res[p++] = ((c >> 12) & 63) | 128;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        } else {\n          res[p++] = (c >> 12) | 224;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        }\n      }\n    } else if (enc === 'hex') {\n      msg = msg.replace(/[^a-z0-9]+/ig, '');\n      if (msg.length % 2 !== 0)\n        msg = '0' + msg;\n      for (i = 0; i < msg.length; i += 2)\n        res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n  } else {\n    for (i = 0; i < msg.length; i++)\n      res[i] = msg[i] | 0;\n  }\n  return res;\n}\nexports.toArray = toArray;\n\nfunction toHex(msg) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++)\n    res += zero2(msg[i].toString(16));\n  return res;\n}\nexports.toHex = toHex;\n\nfunction htonl(w) {\n  var res = (w >>> 24) |\n            ((w >>> 8) & 0xff00) |\n            ((w << 8) & 0xff0000) |\n            ((w & 0xff) << 24);\n  return res >>> 0;\n}\nexports.htonl = htonl;\n\nfunction toHex32(msg, endian) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++) {\n    var w = msg[i];\n    if (endian === 'little')\n      w = htonl(w);\n    res += zero8(w.toString(16));\n  }\n  return res;\n}\nexports.toHex32 = toHex32;\n\nfunction zero2(word) {\n  if (word.length === 1)\n    return '0' + word;\n  else\n    return word;\n}\nexports.zero2 = zero2;\n\nfunction zero8(word) {\n  if (word.length === 7)\n    return '0' + word;\n  else if (word.length === 6)\n    return '00' + word;\n  else if (word.length === 5)\n    return '000' + word;\n  else if (word.length === 4)\n    return '0000' + word;\n  else if (word.length === 3)\n    return '00000' + word;\n  else if (word.length === 2)\n    return '000000' + word;\n  else if (word.length === 1)\n    return '0000000' + word;\n  else\n    return word;\n}\nexports.zero8 = zero8;\n\nfunction join32(msg, start, end, endian) {\n  var len = end - start;\n  assert(len % 4 === 0);\n  var res = new Array(len / 4);\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n    var w;\n    if (endian === 'big')\n      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];\n    else\n      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];\n    res[i] = w >>> 0;\n  }\n  return res;\n}\nexports.join32 = join32;\n\nfunction split32(msg, endian) {\n  var res = new Array(msg.length * 4);\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n    var m = msg[i];\n    if (endian === 'big') {\n      res[k] = m >>> 24;\n      res[k + 1] = (m >>> 16) & 0xff;\n      res[k + 2] = (m >>> 8) & 0xff;\n      res[k + 3] = m & 0xff;\n    } else {\n      res[k + 3] = m >>> 24;\n      res[k + 2] = (m >>> 16) & 0xff;\n      res[k + 1] = (m >>> 8) & 0xff;\n      res[k] = m & 0xff;\n    }\n  }\n  return res;\n}\nexports.split32 = split32;\n\nfunction rotr32(w, b) {\n  return (w >>> b) | (w << (32 - b));\n}\nexports.rotr32 = rotr32;\n\nfunction rotl32(w, b) {\n  return (w << b) | (w >>> (32 - b));\n}\nexports.rotl32 = rotl32;\n\nfunction sum32(a, b) {\n  return (a + b) >>> 0;\n}\nexports.sum32 = sum32;\n\nfunction sum32_3(a, b, c) {\n  return (a + b + c) >>> 0;\n}\nexports.sum32_3 = sum32_3;\n\nfunction sum32_4(a, b, c, d) {\n  return (a + b + c + d) >>> 0;\n}\nexports.sum32_4 = sum32_4;\n\nfunction sum32_5(a, b, c, d, e) {\n  return (a + b + c + d + e) >>> 0;\n}\nexports.sum32_5 = sum32_5;\n\nfunction sum64(buf, pos, ah, al) {\n  var bh = buf[pos];\n  var bl = buf[pos + 1];\n\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  buf[pos] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\nexports.sum64 = sum64;\n\nfunction sum64_hi(ah, al, bh, bl) {\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  return hi >>> 0;\n}\nexports.sum64_hi = sum64_hi;\n\nfunction sum64_lo(ah, al, bh, bl) {\n  var lo = al + bl;\n  return lo >>> 0;\n}\nexports.sum64_lo = sum64_lo;\n\nfunction sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n}\nexports.sum64_4_hi = sum64_4_hi;\n\nfunction sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {\n  var lo = al + bl + cl + dl;\n  return lo >>> 0;\n}\nexports.sum64_4_lo = sum64_4_lo;\n\nfunction sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n  lo = (lo + el) >>> 0;\n  carry += lo < el ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n}\nexports.sum64_5_hi = sum64_5_hi;\n\nfunction sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var lo = al + bl + cl + dl + el;\n\n  return lo >>> 0;\n}\nexports.sum64_5_lo = sum64_5_lo;\n\nfunction rotr64_hi(ah, al, num) {\n  var r = (al << (32 - num)) | (ah >>> num);\n  return r >>> 0;\n}\nexports.rotr64_hi = rotr64_hi;\n\nfunction rotr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.rotr64_lo = rotr64_lo;\n\nfunction shr64_hi(ah, al, num) {\n  return ah >>> num;\n}\nexports.shr64_hi = shr64_hi;\n\nfunction shr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.shr64_lo = shr64_lo;\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction BlockHash() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = 'big';\n\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\nexports.BlockHash = BlockHash;\n\nBlockHash.prototype.update = function update(msg, enc) {\n  // Convert message to array, pad it, and join into 32bit blocks\n  msg = utils.toArray(msg, enc);\n  if (!this.pending)\n    this.pending = msg;\n  else\n    this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length;\n\n  // Enough data, try updating\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending;\n\n    // Process pending data in blocks\n    var r = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r, msg.length);\n    if (this.pending.length === 0)\n      this.pending = null;\n\n    msg = utils.join32(msg, 0, msg.length - r, this.endian);\n    for (var i = 0; i < msg.length; i += this._delta32)\n      this._update(msg, i, i + this._delta32);\n  }\n\n  return this;\n};\n\nBlockHash.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert(this.pending === null);\n\n  return this._digest(enc);\n};\n\nBlockHash.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - ((len + this.padLength) % bytes);\n  var res = new Array(k + this.padLength);\n  res[0] = 0x80;\n  for (var i = 1; i < k; i++)\n    res[i] = 0;\n\n  // Append length\n  len <<= 3;\n  if (this.endian === 'big') {\n    for (var t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = len & 0xff;\n  } else {\n    res[i++] = len & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n\n    for (t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n  }\n\n  return res;\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar rotr32 = utils.rotr32;\n\nfunction ft_1(s, x, y, z) {\n  if (s === 0)\n    return ch32(x, y, z);\n  if (s === 1 || s === 3)\n    return p32(x, y, z);\n  if (s === 2)\n    return maj32(x, y, z);\n}\nexports.ft_1 = ft_1;\n\nfunction ch32(x, y, z) {\n  return (x & y) ^ ((~x) & z);\n}\nexports.ch32 = ch32;\n\nfunction maj32(x, y, z) {\n  return (x & y) ^ (x & z) ^ (y & z);\n}\nexports.maj32 = maj32;\n\nfunction p32(x, y, z) {\n  return x ^ y ^ z;\n}\nexports.p32 = p32;\n\nfunction s0_256(x) {\n  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\nexports.s0_256 = s0_256;\n\nfunction s1_256(x) {\n  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\nexports.s1_256 = s1_256;\n\nfunction g0_256(x) {\n  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);\n}\nexports.g0_256 = g0_256;\n\nfunction g1_256(x) {\n  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);\n}\nexports.g1_256 = g1_256;\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_5 = utils.sum32_5;\nvar ft_1 = shaCommon.ft_1;\nvar BlockHash = common.BlockHash;\n\nvar sha1_K = [\n  0x5A827999, 0x6ED9EBA1,\n  0x8F1BBCDC, 0xCA62C1D6\n];\n\nfunction SHA1() {\n  if (!(this instanceof SHA1))\n    return new SHA1();\n\n  BlockHash.call(this);\n  this.h = [\n    0x67452301, 0xefcdab89, 0x98badcfe,\n    0x10325476, 0xc3d2e1f0 ];\n  this.W = new Array(80);\n}\n\nutils.inherits(SHA1, BlockHash);\nmodule.exports = SHA1;\n\nSHA1.blockSize = 512;\nSHA1.outSize = 160;\nSHA1.hmacStrength = 80;\nSHA1.padLength = 64;\n\nSHA1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n\n  for(; i < W.length; i++)\n    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n\n  for (i = 0; i < W.length; i++) {\n    var s = ~~(i / 20);\n    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);\n    e = d;\n    d = c;\n    c = rotl32(b, 30);\n    b = a;\n    a = t;\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n};\n\nSHA1.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\nvar assert = require('minimalistic-assert');\n\nvar sum32 = utils.sum32;\nvar sum32_4 = utils.sum32_4;\nvar sum32_5 = utils.sum32_5;\nvar ch32 = shaCommon.ch32;\nvar maj32 = shaCommon.maj32;\nvar s0_256 = shaCommon.s0_256;\nvar s1_256 = shaCommon.s1_256;\nvar g0_256 = shaCommon.g0_256;\nvar g1_256 = shaCommon.g1_256;\n\nvar BlockHash = common.BlockHash;\n\nvar sha256_K = [\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\n  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\n  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n];\n\nfunction SHA256() {\n  if (!(this instanceof SHA256))\n    return new SHA256();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,\n    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n  ];\n  this.k = sha256_K;\n  this.W = new Array(64);\n}\nutils.inherits(SHA256, BlockHash);\nmodule.exports = SHA256;\n\nSHA256.blockSize = 512;\nSHA256.outSize = 256;\nSHA256.hmacStrength = 192;\nSHA256.padLength = 64;\n\nSHA256.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i++)\n    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  var f = this.h[5];\n  var g = this.h[6];\n  var h = this.h[7];\n\n  assert(this.k.length === W.length);\n  for (i = 0; i < W.length; i++) {\n    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n    var T2 = sum32(s0_256(a), maj32(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = sum32(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = sum32(T1, T2);\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n  this.h[5] = sum32(this.h[5], f);\n  this.h[6] = sum32(this.h[6], g);\n  this.h[7] = sum32(this.h[7], h);\n};\n\nSHA256.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar SHA256 = require('./256');\n\nfunction SHA224() {\n  if (!(this instanceof SHA224))\n    return new SHA224();\n\n  SHA256.call(this);\n  this.h = [\n    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];\n}\nutils.inherits(SHA224, SHA256);\nmodule.exports = SHA224;\n\nSHA224.blockSize = 512;\nSHA224.outSize = 224;\nSHA224.hmacStrength = 192;\nSHA224.padLength = 64;\n\nSHA224.prototype._digest = function digest(enc) {\n  // Just truncate output\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 7), 'big');\n  else\n    return utils.split32(this.h.slice(0, 7), 'big');\n};\n\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar assert = require('minimalistic-assert');\n\nvar rotr64_hi = utils.rotr64_hi;\nvar rotr64_lo = utils.rotr64_lo;\nvar shr64_hi = utils.shr64_hi;\nvar shr64_lo = utils.shr64_lo;\nvar sum64 = utils.sum64;\nvar sum64_hi = utils.sum64_hi;\nvar sum64_lo = utils.sum64_lo;\nvar sum64_4_hi = utils.sum64_4_hi;\nvar sum64_4_lo = utils.sum64_4_lo;\nvar sum64_5_hi = utils.sum64_5_hi;\nvar sum64_5_lo = utils.sum64_5_lo;\n\nvar BlockHash = common.BlockHash;\n\nvar sha512_K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n];\n\nfunction SHA512() {\n  if (!(this instanceof SHA512))\n    return new SHA512();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xf3bcc908,\n    0xbb67ae85, 0x84caa73b,\n    0x3c6ef372, 0xfe94f82b,\n    0xa54ff53a, 0x5f1d36f1,\n    0x510e527f, 0xade682d1,\n    0x9b05688c, 0x2b3e6c1f,\n    0x1f83d9ab, 0xfb41bd6b,\n    0x5be0cd19, 0x137e2179 ];\n  this.k = sha512_K;\n  this.W = new Array(160);\n}\nutils.inherits(SHA512, BlockHash);\nmodule.exports = SHA512;\n\nSHA512.blockSize = 1024;\nSHA512.outSize = 512;\nSHA512.hmacStrength = 192;\nSHA512.padLength = 128;\n\nSHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {\n  var W = this.W;\n\n  // 32 x 32bit words\n  for (var i = 0; i < 32; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i += 2) {\n    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2\n    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n    var c1_hi = W[i - 14];  // i - 7\n    var c1_lo = W[i - 13];\n    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15\n    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n    var c3_hi = W[i - 32];  // i - 16\n    var c3_lo = W[i - 31];\n\n    W[i] = sum64_4_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n    W[i + 1] = sum64_4_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n  }\n};\n\nSHA512.prototype._update = function _update(msg, start) {\n  this._prepareBlock(msg, start);\n\n  var W = this.W;\n\n  var ah = this.h[0];\n  var al = this.h[1];\n  var bh = this.h[2];\n  var bl = this.h[3];\n  var ch = this.h[4];\n  var cl = this.h[5];\n  var dh = this.h[6];\n  var dl = this.h[7];\n  var eh = this.h[8];\n  var el = this.h[9];\n  var fh = this.h[10];\n  var fl = this.h[11];\n  var gh = this.h[12];\n  var gl = this.h[13];\n  var hh = this.h[14];\n  var hl = this.h[15];\n\n  assert(this.k.length === W.length);\n  for (var i = 0; i < W.length; i += 2) {\n    var c0_hi = hh;\n    var c0_lo = hl;\n    var c1_hi = s1_512_hi(eh, el);\n    var c1_lo = s1_512_lo(eh, el);\n    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);\n    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n    var c3_hi = this.k[i];\n    var c3_lo = this.k[i + 1];\n    var c4_hi = W[i];\n    var c4_lo = W[i + 1];\n\n    var T1_hi = sum64_5_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n    var T1_lo = sum64_5_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n\n    c0_hi = s0_512_hi(ah, al);\n    c0_lo = s0_512_lo(ah, al);\n    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);\n    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n\n    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n\n    hh = gh;\n    hl = gl;\n\n    gh = fh;\n    gl = fl;\n\n    fh = eh;\n    fl = el;\n\n    eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n    el = sum64_lo(dl, dl, T1_hi, T1_lo);\n\n    dh = ch;\n    dl = cl;\n\n    ch = bh;\n    cl = bl;\n\n    bh = ah;\n    bl = al;\n\n    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n  }\n\n  sum64(this.h, 0, ah, al);\n  sum64(this.h, 2, bh, bl);\n  sum64(this.h, 4, ch, cl);\n  sum64(this.h, 6, dh, dl);\n  sum64(this.h, 8, eh, el);\n  sum64(this.h, 10, fh, fl);\n  sum64(this.h, 12, gh, gl);\n  sum64(this.h, 14, hh, hl);\n};\n\nSHA512.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n\nfunction ch64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ ((~xh) & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ ((~xl) & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 28);\n  var c1_hi = rotr64_hi(xl, xh, 2);  // 34\n  var c2_hi = rotr64_hi(xl, xh, 7);  // 39\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 28);\n  var c1_lo = rotr64_lo(xl, xh, 2);  // 34\n  var c2_lo = rotr64_lo(xl, xh, 7);  // 39\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 14);\n  var c1_hi = rotr64_hi(xh, xl, 18);\n  var c2_hi = rotr64_hi(xl, xh, 9);  // 41\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 14);\n  var c1_lo = rotr64_lo(xh, xl, 18);\n  var c2_lo = rotr64_lo(xl, xh, 9);  // 41\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 1);\n  var c1_hi = rotr64_hi(xh, xl, 8);\n  var c2_hi = shr64_hi(xh, xl, 7);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 1);\n  var c1_lo = rotr64_lo(xh, xl, 8);\n  var c2_lo = shr64_lo(xh, xl, 7);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 19);\n  var c1_hi = rotr64_hi(xl, xh, 29);  // 61\n  var c2_hi = shr64_hi(xh, xl, 6);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 19);\n  var c1_lo = rotr64_lo(xl, xh, 29);  // 61\n  var c2_lo = shr64_lo(xh, xl, 6);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n","'use strict';\n\nvar utils = require('../utils');\n\nvar SHA512 = require('./512');\n\nfunction SHA384() {\n  if (!(this instanceof SHA384))\n    return new SHA384();\n\n  SHA512.call(this);\n  this.h = [\n    0xcbbb9d5d, 0xc1059ed8,\n    0x629a292a, 0x367cd507,\n    0x9159015a, 0x3070dd17,\n    0x152fecd8, 0xf70e5939,\n    0x67332667, 0xffc00b31,\n    0x8eb44a87, 0x68581511,\n    0xdb0c2e0d, 0x64f98fa7,\n    0x47b5481d, 0xbefa4fa4 ];\n}\nutils.inherits(SHA384, SHA512);\nmodule.exports = SHA384;\n\nSHA384.blockSize = 1024;\nSHA384.outSize = 384;\nSHA384.hmacStrength = 192;\nSHA384.padLength = 128;\n\nSHA384.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 12), 'big');\n  else\n    return utils.split32(this.h.slice(0, 12), 'big');\n};\n","'use strict';\n\nexports.sha1 = require('./sha/1');\nexports.sha224 = require('./sha/224');\nexports.sha256 = require('./sha/256');\nexports.sha384 = require('./sha/384');\nexports.sha512 = require('./sha/512');\n","'use strict';\n\nvar utils = require('./utils');\nvar common = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_3 = utils.sum32_3;\nvar sum32_4 = utils.sum32_4;\nvar BlockHash = common.BlockHash;\n\nfunction RIPEMD160() {\n  if (!(this instanceof RIPEMD160))\n    return new RIPEMD160();\n\n  BlockHash.call(this);\n\n  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];\n  this.endian = 'little';\n}\nutils.inherits(RIPEMD160, BlockHash);\nexports.ripemd160 = RIPEMD160;\n\nRIPEMD160.blockSize = 512;\nRIPEMD160.outSize = 160;\nRIPEMD160.hmacStrength = 192;\nRIPEMD160.padLength = 64;\n\nRIPEMD160.prototype._update = function update(msg, start) {\n  var A = this.h[0];\n  var B = this.h[1];\n  var C = this.h[2];\n  var D = this.h[3];\n  var E = this.h[4];\n  var Ah = A;\n  var Bh = B;\n  var Ch = C;\n  var Dh = D;\n  var Eh = E;\n  for (var j = 0; j < 80; j++) {\n    var T = sum32(\n      rotl32(\n        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),\n        s[j]),\n      E);\n    A = E;\n    E = D;\n    D = rotl32(C, 10);\n    C = B;\n    B = T;\n    T = sum32(\n      rotl32(\n        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),\n        sh[j]),\n      Eh);\n    Ah = Eh;\n    Eh = Dh;\n    Dh = rotl32(Ch, 10);\n    Ch = Bh;\n    Bh = T;\n  }\n  T = sum32_3(this.h[1], C, Dh);\n  this.h[1] = sum32_3(this.h[2], D, Eh);\n  this.h[2] = sum32_3(this.h[3], E, Ah);\n  this.h[3] = sum32_3(this.h[4], A, Bh);\n  this.h[4] = sum32_3(this.h[0], B, Ch);\n  this.h[0] = T;\n};\n\nRIPEMD160.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'little');\n  else\n    return utils.split32(this.h, 'little');\n};\n\nfunction f(j, x, y, z) {\n  if (j <= 15)\n    return x ^ y ^ z;\n  else if (j <= 31)\n    return (x & y) | ((~x) & z);\n  else if (j <= 47)\n    return (x | (~y)) ^ z;\n  else if (j <= 63)\n    return (x & z) | (y & (~z));\n  else\n    return x ^ (y | (~z));\n}\n\nfunction K(j) {\n  if (j <= 15)\n    return 0x00000000;\n  else if (j <= 31)\n    return 0x5a827999;\n  else if (j <= 47)\n    return 0x6ed9eba1;\n  else if (j <= 63)\n    return 0x8f1bbcdc;\n  else\n    return 0xa953fd4e;\n}\n\nfunction Kh(j) {\n  if (j <= 15)\n    return 0x50a28be6;\n  else if (j <= 31)\n    return 0x5c4dd124;\n  else if (j <= 47)\n    return 0x6d703ef3;\n  else if (j <= 63)\n    return 0x7a6d76e9;\n  else\n    return 0x00000000;\n}\n\nvar r = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,\n  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,\n  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13\n];\n\nvar rh = [\n  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,\n  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,\n  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,\n  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,\n  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11\n];\n\nvar s = [\n  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,\n  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,\n  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,\n  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,\n  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6\n];\n\nvar sh = [\n  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,\n  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,\n  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,\n  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,\n  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11\n];\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction Hmac(hash, key, enc) {\n  if (!(this instanceof Hmac))\n    return new Hmac(hash, key, enc);\n  this.Hash = hash;\n  this.blockSize = hash.blockSize / 8;\n  this.outSize = hash.outSize / 8;\n  this.inner = null;\n  this.outer = null;\n\n  this._init(utils.toArray(key, enc));\n}\nmodule.exports = Hmac;\n\nHmac.prototype._init = function init(key) {\n  // Shorten key, if needed\n  if (key.length > this.blockSize)\n    key = new this.Hash().update(key).digest();\n  assert(key.length <= this.blockSize);\n\n  // Add padding to key\n  for (var i = key.length; i < this.blockSize; i++)\n    key.push(0);\n\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x36;\n  this.inner = new this.Hash().update(key);\n\n  // 0x36 ^ 0x5c = 0x6a\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x6a;\n  this.outer = new this.Hash().update(key);\n};\n\nHmac.prototype.update = function update(msg, enc) {\n  this.inner.update(msg, enc);\n  return this;\n};\n\nHmac.prototype.digest = function digest(enc) {\n  this.outer.update(this.inner.digest());\n  return this.outer.digest(enc);\n};\n","var hash = exports;\n\nhash.utils = require('./hash/utils');\nhash.common = require('./hash/common');\nhash.sha = require('./hash/sha');\nhash.ripemd = require('./hash/ripemd');\nhash.hmac = require('./hash/hmac');\n\n// Proxy hash functions to the main object\nhash.sha1 = hash.sha.sha1;\nhash.sha256 = hash.sha.sha256;\nhash.sha224 = hash.sha.sha224;\nhash.sha384 = hash.sha.sha384;\nhash.sha512 = hash.sha.sha512;\nhash.ripemd160 = hash.ripemd.ripemd160;\n","\"use strict\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nlet _logLevel = LogLevels[\"default\"];\nimport { version } from \"./_version\";\nlet _globalLogger = null;\nfunction _checkNormalize() {\n    try {\n        const missing = [];\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                }\n                ;\n            }\n            catch (error) {\n                missing.push(form);\n            }\n        });\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\");\n        }\n    }\n    catch (error) {\n        return error.message;\n    }\n    return null;\n}\nconst _normalizeError = _checkNormalize();\nexport var LogLevel;\n(function (LogLevel) {\n    LogLevel[\"DEBUG\"] = \"DEBUG\";\n    LogLevel[\"INFO\"] = \"INFO\";\n    LogLevel[\"WARNING\"] = \"WARNING\";\n    LogLevel[\"ERROR\"] = \"ERROR\";\n    LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\nexport var ErrorCode;\n(function (ErrorCode) {\n    ///////////////////\n    // Generic Errors\n    // Unknown Error\n    ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n    // Not Implemented\n    ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n    // Unsupported Operation\n    //   - operation\n    ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n    // Some sort of bad response from the server\n    ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n    // Timeout\n    ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n    ///////////////////\n    // Operational  Errors\n    // Buffer Overrun\n    ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n    ///////////////////\n    // Argument Errors\n    // Missing new operator to an object\n    //  - name: The name of the class\n    ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n    ///////////////////\n    // Blockchain Errors\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n    // Insufficient funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n    // The transaction was replaced by one with a higher gas price\n    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n    //   - hash: original transaction hash\n    //   - replacement: the full TransactionsResponse for the replacement\n    //   - receipt: the receipt of the replacement\n    ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n})(ErrorCode || (ErrorCode = {}));\n;\nconst HEX = \"0123456789abcdef\";\nexport class Logger {\n    constructor(version) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n    _log(logLevel, args) {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) {\n            return;\n        }\n        console.log.apply(console, args);\n    }\n    debug(...args) {\n        this._log(Logger.levels.DEBUG, args);\n    }\n    info(...args) {\n        this._log(Logger.levels.INFO, args);\n    }\n    warn(...args) {\n        this._log(Logger.levels.WARNING, args);\n    }\n    makeError(message, code, params) {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, {});\n        }\n        if (!code) {\n            code = Logger.errors.UNKNOWN_ERROR;\n        }\n        if (!params) {\n            params = {};\n        }\n        const messageDetails = [];\n        Object.keys(params).forEach((key) => {\n            const value = params[key];\n            try {\n                if (value instanceof Uint8Array) {\n                    let hex = \"\";\n                    for (let i = 0; i < value.length; i++) {\n                        hex += HEX[value[i] >> 4];\n                        hex += HEX[value[i] & 0x0f];\n                    }\n                    messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n                }\n                else {\n                    messageDetails.push(key + \"=\" + JSON.stringify(value));\n                }\n            }\n            catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${code}`);\n        messageDetails.push(`version=${this.version}`);\n        const reason = message;\n        let url = \"\";\n        switch (code) {\n            case ErrorCode.NUMERIC_FAULT: {\n                url = \"NUMERIC_FAULT\";\n                const fault = message;\n                switch (fault) {\n                    case \"overflow\":\n                    case \"underflow\":\n                    case \"division-by-zero\":\n                        url += \"-\" + fault;\n                        break;\n                    case \"negative-power\":\n                    case \"negative-width\":\n                        url += \"-unsupported\";\n                        break;\n                    case \"unbound-bitwise-result\":\n                        url += \"-unbound-result\";\n                        break;\n                }\n                break;\n            }\n            case ErrorCode.CALL_EXCEPTION:\n            case ErrorCode.INSUFFICIENT_FUNDS:\n            case ErrorCode.MISSING_NEW:\n            case ErrorCode.NONCE_EXPIRED:\n            case ErrorCode.REPLACEMENT_UNDERPRICED:\n            case ErrorCode.TRANSACTION_REPLACED:\n            case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n                url = code;\n                break;\n        }\n        if (url) {\n            message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n        }\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n        // @TODO: Any??\n        const error = new Error(message);\n        error.reason = reason;\n        error.code = code;\n        Object.keys(params).forEach(function (key) {\n            error[key] = params[key];\n        });\n        return error;\n    }\n    throwError(message, code, params) {\n        throw this.makeError(message, code, params);\n    }\n    throwArgumentError(message, name, value) {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n    assert(condition, message, code, params) {\n        if (!!condition) {\n            return;\n        }\n        this.throwError(message, code, params);\n    }\n    assertArgument(condition, message, name, value) {\n        if (!!condition) {\n            return;\n        }\n        this.throwArgumentError(message, name, value);\n    }\n    checkNormalize(message) {\n        if (message == null) {\n            message = \"platform missing String.prototype.normalize\";\n        }\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n    checkSafeUint53(value, message) {\n        if (typeof (value) !== \"number\") {\n            return;\n        }\n        if (message == null) {\n            message = \"value not safe\";\n        }\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n    checkArgumentCount(count, expectedCount, message) {\n        if (message) {\n            message = \": \" + message;\n        }\n        else {\n            message = \"\";\n        }\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n    checkNew(target, kind) {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    checkAbstract(target, kind) {\n        if (target === kind) {\n            this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: \"new\" });\n        }\n        else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    static globalLogger() {\n        if (!_globalLogger) {\n            _globalLogger = new Logger(version);\n        }\n        return _globalLogger;\n    }\n    static setCensorship(censorship, permanent) {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        if (_permanentCensorErrors) {\n            if (!censorship) {\n                return;\n            }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n    static setLogLevel(logLevel) {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n    static from(version) {\n        return new Logger(version);\n    }\n}\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\n//# sourceMappingURL=index.js.map","export const version = \"logger/5.6.0\";\n//# sourceMappingURL=_version.js.map","export const version = \"bytes/5.6.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n///////////////////////////////\nfunction isHexable(value) {\n    return !!(value.toHexString);\n}\nfunction addSlice(array) {\n    if (array.slice) {\n        return array;\n    }\n    array.slice = function () {\n        const args = Array.prototype.slice.call(arguments);\n        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n    };\n    return array;\n}\nexport function isBytesLike(value) {\n    return ((isHexString(value) && !(value.length % 2)) || isBytes(value));\n}\nfunction isInteger(value) {\n    return (typeof (value) === \"number\" && value == value && (value % 1) === 0);\n}\nexport function isBytes(value) {\n    if (value == null) {\n        return false;\n    }\n    if (value.constructor === Uint8Array) {\n        return true;\n    }\n    if (typeof (value) === \"string\") {\n        return false;\n    }\n    if (!isInteger(value.length) || value.length < 0) {\n        return false;\n    }\n    for (let i = 0; i < value.length; i++) {\n        const v = value[i];\n        if (!isInteger(v) || v < 0 || v >= 256) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function arrayify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid arrayify value\");\n        const result = [];\n        while (value) {\n            result.unshift(value & 0xff);\n            value = parseInt(String(value / 256));\n        }\n        if (result.length === 0) {\n            result.push(0);\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        value = value.toHexString();\n    }\n    if (isHexString(value)) {\n        let hex = value.substring(2);\n        if (hex.length % 2) {\n            if (options.hexPad === \"left\") {\n                hex = \"0x0\" + hex.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                hex += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        const result = [];\n        for (let i = 0; i < hex.length; i += 2) {\n            result.push(parseInt(hex.substring(i, i + 2), 16));\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (isBytes(value)) {\n        return addSlice(new Uint8Array(value));\n    }\n    return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n}\nexport function concat(items) {\n    const objects = items.map(item => arrayify(item));\n    const length = objects.reduce((accum, item) => (accum + item.length), 0);\n    const result = new Uint8Array(length);\n    objects.reduce((offset, object) => {\n        result.set(object, offset);\n        return offset + object.length;\n    }, 0);\n    return addSlice(result);\n}\nexport function stripZeros(value) {\n    let result = arrayify(value);\n    if (result.length === 0) {\n        return result;\n    }\n    // Find the first non-zero entry\n    let start = 0;\n    while (start < result.length && result[start] === 0) {\n        start++;\n    }\n    // If we started with zeros, strip them\n    if (start) {\n        result = result.slice(start);\n    }\n    return result;\n}\nexport function zeroPad(value, length) {\n    value = arrayify(value);\n    if (value.length > length) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[0]);\n    }\n    const result = new Uint8Array(length);\n    result.set(value, length - value.length);\n    return addSlice(result);\n}\nexport function isHexString(value, length) {\n    if (typeof (value) !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false;\n    }\n    if (length && value.length !== 2 + 2 * length) {\n        return false;\n    }\n    return true;\n}\nconst HexCharacters = \"0123456789abcdef\";\nexport function hexlify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid hexlify value\");\n        let hex = \"\";\n        while (value) {\n            hex = HexCharacters[value & 0xf] + hex;\n            value = Math.floor(value / 16);\n        }\n        if (hex.length) {\n            if (hex.length % 2) {\n                hex = \"0\" + hex;\n            }\n            return \"0x\" + hex;\n        }\n        return \"0x00\";\n    }\n    if (typeof (value) === \"bigint\") {\n        value = value.toString(16);\n        if (value.length % 2) {\n            return (\"0x0\" + value);\n        }\n        return \"0x\" + value;\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        return value.toHexString();\n    }\n    if (isHexString(value)) {\n        if (value.length % 2) {\n            if (options.hexPad === \"left\") {\n                value = \"0x0\" + value.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                value += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        return value.toLowerCase();\n    }\n    if (isBytes(value)) {\n        let result = \"0x\";\n        for (let i = 0; i < value.length; i++) {\n            let v = value[i];\n            result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n        }\n        return result;\n    }\n    return logger.throwArgumentError(\"invalid hexlify value\", \"value\", value);\n}\n/*\nfunction unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {\n    if (typeof(value) === \"string\" && value.length % 2 && value.substring(0, 2) === \"0x\") {\n        return \"0x0\" + value.substring(2);\n    }\n    return value;\n}\n*/\nexport function hexDataLength(data) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        return null;\n    }\n    return (data.length - 2) / 2;\n}\nexport function hexDataSlice(data, offset, endOffset) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        logger.throwArgumentError(\"invalid hexData\", \"value\", data);\n    }\n    offset = 2 + 2 * offset;\n    if (endOffset != null) {\n        return \"0x\" + data.substring(offset, 2 + 2 * endOffset);\n    }\n    return \"0x\" + data.substring(offset);\n}\nexport function hexConcat(items) {\n    let result = \"0x\";\n    items.forEach((item) => {\n        result += hexlify(item).substring(2);\n    });\n    return result;\n}\nexport function hexValue(value) {\n    const trimmed = hexStripZeros(hexlify(value, { hexPad: \"left\" }));\n    if (trimmed === \"0x\") {\n        return \"0x0\";\n    }\n    return trimmed;\n}\nexport function hexStripZeros(value) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    value = value.substring(2);\n    let offset = 0;\n    while (offset < value.length && value[offset] === \"0\") {\n        offset++;\n    }\n    return \"0x\" + value.substring(offset);\n}\nexport function hexZeroPad(value, length) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    else if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    if (value.length > 2 * length + 2) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[1]);\n    }\n    while (value.length < 2 * length + 2) {\n        value = \"0x0\" + value.substring(2);\n    }\n    return value;\n}\nexport function splitSignature(signature) {\n    const result = {\n        r: \"0x\",\n        s: \"0x\",\n        _vs: \"0x\",\n        recoveryParam: 0,\n        v: 0,\n        yParityAndS: \"0x\",\n        compact: \"0x\"\n    };\n    if (isBytesLike(signature)) {\n        let bytes = arrayify(signature);\n        // Get the r, s and v\n        if (bytes.length === 64) {\n            // EIP-2098; pull the v from the top bit of s and clear it\n            result.v = 27 + (bytes[32] >> 7);\n            bytes[32] &= 0x7f;\n            result.r = hexlify(bytes.slice(0, 32));\n            result.s = hexlify(bytes.slice(32, 64));\n        }\n        else if (bytes.length === 65) {\n            result.r = hexlify(bytes.slice(0, 32));\n            result.s = hexlify(bytes.slice(32, 64));\n            result.v = bytes[64];\n        }\n        else {\n            logger.throwArgumentError(\"invalid signature string\", \"signature\", signature);\n        }\n        // Allow a recid to be used as the v\n        if (result.v < 27) {\n            if (result.v === 0 || result.v === 1) {\n                result.v += 27;\n            }\n            else {\n                logger.throwArgumentError(\"signature invalid v byte\", \"signature\", signature);\n            }\n        }\n        // Compute recoveryParam from v\n        result.recoveryParam = 1 - (result.v % 2);\n        // Compute _vs from recoveryParam and s\n        if (result.recoveryParam) {\n            bytes[32] |= 0x80;\n        }\n        result._vs = hexlify(bytes.slice(32, 64));\n    }\n    else {\n        result.r = signature.r;\n        result.s = signature.s;\n        result.v = signature.v;\n        result.recoveryParam = signature.recoveryParam;\n        result._vs = signature._vs;\n        // If the _vs is available, use it to populate missing s, v and recoveryParam\n        // and verify non-missing s, v and recoveryParam\n        if (result._vs != null) {\n            const vs = zeroPad(arrayify(result._vs), 32);\n            result._vs = hexlify(vs);\n            // Set or check the recid\n            const recoveryParam = ((vs[0] >= 128) ? 1 : 0);\n            if (result.recoveryParam == null) {\n                result.recoveryParam = recoveryParam;\n            }\n            else if (result.recoveryParam !== recoveryParam) {\n                logger.throwArgumentError(\"signature recoveryParam mismatch _vs\", \"signature\", signature);\n            }\n            // Set or check the s\n            vs[0] &= 0x7f;\n            const s = hexlify(vs);\n            if (result.s == null) {\n                result.s = s;\n            }\n            else if (result.s !== s) {\n                logger.throwArgumentError(\"signature v mismatch _vs\", \"signature\", signature);\n            }\n        }\n        // Use recid and v to populate each other\n        if (result.recoveryParam == null) {\n            if (result.v == null) {\n                logger.throwArgumentError(\"signature missing v and recoveryParam\", \"signature\", signature);\n            }\n            else if (result.v === 0 || result.v === 1) {\n                result.recoveryParam = result.v;\n            }\n            else {\n                result.recoveryParam = 1 - (result.v % 2);\n            }\n        }\n        else {\n            if (result.v == null) {\n                result.v = 27 + result.recoveryParam;\n            }\n            else {\n                const recId = (result.v === 0 || result.v === 1) ? result.v : (1 - (result.v % 2));\n                if (result.recoveryParam !== recId) {\n                    logger.throwArgumentError(\"signature recoveryParam mismatch v\", \"signature\", signature);\n                }\n            }\n        }\n        if (result.r == null || !isHexString(result.r)) {\n            logger.throwArgumentError(\"signature missing or invalid r\", \"signature\", signature);\n        }\n        else {\n            result.r = hexZeroPad(result.r, 32);\n        }\n        if (result.s == null || !isHexString(result.s)) {\n            logger.throwArgumentError(\"signature missing or invalid s\", \"signature\", signature);\n        }\n        else {\n            result.s = hexZeroPad(result.s, 32);\n        }\n        const vs = arrayify(result.s);\n        if (vs[0] >= 128) {\n            logger.throwArgumentError(\"signature s out of range\", \"signature\", signature);\n        }\n        if (result.recoveryParam) {\n            vs[0] |= 0x80;\n        }\n        const _vs = hexlify(vs);\n        if (result._vs) {\n            if (!isHexString(result._vs)) {\n                logger.throwArgumentError(\"signature invalid _vs\", \"signature\", signature);\n            }\n            result._vs = hexZeroPad(result._vs, 32);\n        }\n        // Set or check the _vs\n        if (result._vs == null) {\n            result._vs = _vs;\n        }\n        else if (result._vs !== _vs) {\n            logger.throwArgumentError(\"signature _vs mismatch v and s\", \"signature\", signature);\n        }\n    }\n    result.yParityAndS = result._vs;\n    result.compact = result.r + result.yParityAndS.substring(2);\n    return result;\n}\nexport function joinSignature(signature) {\n    signature = splitSignature(signature);\n    return hexlify(concat([\n        signature.r,\n        signature.s,\n        (signature.recoveryParam ? \"0x1c\" : \"0x1b\")\n    ]));\n}\n//# sourceMappingURL=index.js.map","\"use strict\";\nimport hash from \"hash.js\";\n//const _ripemd160 = _hash.ripemd160;\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { SupportedAlgorithm } from \"./types\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport function ripemd160(data) {\n    return \"0x\" + (hash.ripemd160().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha256(data) {\n    return \"0x\" + (hash.sha256().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha512(data) {\n    return \"0x\" + (hash.sha512().update(arrayify(data)).digest(\"hex\"));\n}\nexport function computeHmac(algorithm, key, data) {\n    if (!SupportedAlgorithm[algorithm]) {\n        logger.throwError(\"unsupported algorithm \" + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"hmac\",\n            algorithm: algorithm\n        });\n    }\n    return \"0x\" + hash.hmac(hash[algorithm], arrayify(key)).update(arrayify(data)).digest(\"hex\");\n}\n//# sourceMappingURL=sha2.js.map","export const version = \"sha2/5.6.0\";\n//# sourceMappingURL=_version.js.map","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport nacl from 'tweetnacl';\nimport {sha256} from '@ethersproject/sha2';\n\nimport {Struct, SOLANA_SCHEMA} from './util/borsh-schema';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Buffer\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != 32) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Default public key value. (All zeros)\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  toBytes(): Uint8Array {\n    return this.toBuffer();\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const hash = sha256(new Uint8Array(buffer)).slice(2);\n    return new PublicKey(Buffer.from(hash, 'hex'));\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    let hash = sha256(new Uint8Array(buffer)).slice(2);\n    let publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return is_on_curve(pubkey.toBytes()) == 1;\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n\n// @ts-ignore\nlet naclLowLevel = nacl.lowlevel;\n\n// Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\nfunction is_on_curve(p: any) {\n  var r = [\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n  ];\n\n  var t = naclLowLevel.gf(),\n    chk = naclLowLevel.gf(),\n    num = naclLowLevel.gf(),\n    den = naclLowLevel.gf(),\n    den2 = naclLowLevel.gf(),\n    den4 = naclLowLevel.gf(),\n    den6 = naclLowLevel.gf();\n\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([\n  0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7,\n  0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83,\n]);\nfunction neq25519(a: any, b: any) {\n  var c = new Uint8Array(32),\n    d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n","import nacl from 'tweetnacl';\nimport type {SignKeyPair as KeyPair} from 'tweetnacl';\nimport type {Buffer} from 'buffer';\n\nimport {toBuffer} from './util/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  _keypair: KeyPair;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Buffer | Uint8Array | Array<number>) {\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account\n   */\n  get secretKey(): Buffer {\n    return toBuffer(this._keypair.secretKey);\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PACKET_DATA_SIZE} from './transaction-constants';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * The message header, identifying signed and read-only account\n */\nexport type MessageHeader = {\n  /**\n   * The number of signatures required for this message to be considered valid. The\n   * signatures must match the first `numRequiredSignatures` of `accountKeys`.\n   */\n  numRequiredSignatures: number;\n  /** The last `numReadonlySignedAccounts` of the signed keys are read-only accounts */\n  numReadonlySignedAccounts: number;\n  /** The last `numReadonlySignedAccounts` of the unsigned keys are read-only accounts */\n  numReadonlyUnsignedAccounts: number;\n};\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nconst PUBKEY_LENGTH = 32;\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    return (\n      index <\n        this.header.numRequiredSignatures -\n          this.header.numReadonlySignedAccounts ||\n      (index >= this.header.numRequiredSignatures &&\n        index <\n          this.accountKeys.length - this.header.numReadonlyUnsignedAccounts)\n    );\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift() as number;\n    const numReadonlySignedAccounts = byteArray.shift() as number;\n    const numReadonlyUnsignedAccounts = byteArray.shift() as number;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import nacl from 'tweetnacl';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {\n  PACKET_DATA_SIZE,\n  SIGNATURE_LENGTH_IN_BYTES,\n} from './transaction-constants';\nimport {Connection} from './connection';\nimport {Message} from './message';\nimport {PublicKey} from './publickey';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\nimport invariant from './util/assert';\nimport type {Signer} from './keypair';\nimport type {Blockhash} from './blockhash';\nimport type {CompiledInstruction} from './message';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?: TransactionBlockhashCtor | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    } else if (\n      Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')\n    ) {\n      const newOpts = opts as TransactionBlockhashCtor;\n      Object.assign(this, newOpts);\n      this.recentBlockhash = newOpts.blockhash;\n      this.lastValidBlockHeight = newOpts.lastValidBlockHeight;\n    } else {\n      const oldOpts = opts as TransactionCtorFields_DEPRECATED;\n      Object.assign(this, oldOpts);\n      this.recentBlockhash = oldOpts.recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    const {nonceInfo} = this;\n    if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {\n      this.recentBlockhash = nonceInfo.nonce;\n      this.instructions.unshift(nonceInfo.nonceInstruction);\n    }\n    const {recentBlockhash} = this;\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (this.instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < this.instructions.length; i++) {\n      if (this.instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    this.instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const instructions: CompiledInstruction[] = this.instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    instructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = nacl.sign.detached(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (\n          !nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())\n        ) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  const status =\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n      ? (\n          await connection.confirmTransaction(\n            {\n              signature: signature,\n              blockhash: transaction.recentBlockhash,\n              lastValidBlockHeight: transaction.lastValidBlockHeight,\n            },\n            options && options.commitment,\n          )\n        ).value\n      : (\n          await connection.confirmTransaction(\n            signature,\n            options && options.commitment,\n          )\n        ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {NONCE_ACCOUNT_LENGTH} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\nimport {u64} from './util/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport {sleep} from './util/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './system-program';\nimport {IInstructionInputData} from './instruction';\nimport {PACKET_DATA_SIZE} from './transaction-constants';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport {u64} from './util/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n","export const Headers = globalThis.Headers;\nexport const Request = globalThis.Request;\nexport const Response = globalThis.Response;\nexport default globalThis.fetch;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\n\nimport {AgentManager} from './agent-manager';\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError} from './errors';\nimport fetchImpl, {Response} from './fetch-impl';\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport {MS_PER_SLOT} from './timing';\nimport {Transaction, TransactionStatus} from './transaction';\nimport {Message} from './message';\nimport assert from './util/assert';\nimport {sleep} from './util/sleep';\nimport {toBuffer} from './util/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredTimeoutError,\n} from './util/tx-expiry-custom-errors';\nimport {makeWebsocketUrl} from './util/url';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => any;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => any;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy = {\n  signature: TransactionSignature;\n} & BlockhashWithExpiryBlockHeight;\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n      }),\n    ),\n  ),\n);\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n};\n\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A confirmed transaction on the ledger\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A ConfirmedBlock on the ledger\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  useHttps: boolean,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agentManager: AgentManager | undefined;\n  if (!process.env.BROWSER) {\n    agentManager = new AgentManager(useHttps);\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = agentManager ? agentManager.requestStart() : undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {\n      agentManager && agentManager.requestEnd();\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n  }),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(\n      pick({\n        pubkey: PublicKeyFromString,\n        signer: boolean(),\n        writable: boolean(),\n      }),\n    ),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64) */\n  encoding?: 'base64' | 'jsonParsed';\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {[header: string]: string};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let url = new URL(endpoint);\n    const useHttps = url.protocol === 'https:';\n\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = endpoint;\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      url.toString(),\n      useHttps,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get balance for ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block time for slot ' + slot + ': ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get minimum ledger slot: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get first available block: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error('failed to get token supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token account balance: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get largest accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token largest accounts: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info for accounts ' + keys + ': ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitment?: Commitment,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitment,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined,\n      epoch !== undefined ? {epoch} : undefined,\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new Error(\n        `failed to get Stake Activation ${publicKey.toBase58()}: ${\n          res.error.message\n        }`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const extra: Pick<GetProgramAccountsConfig, 'dataSlice' | 'filters'> = {};\n\n    let commitment;\n    let encoding;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n        encoding = configOrCommitment.encoding;\n\n        if (configOrCommitment.dataSlice) {\n          extra.dataSlice = configOrCommitment.dataSlice;\n        }\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const extra: Pick<GetParsedProgramAccountsConfig, 'filters'> = {};\n\n    let commitment;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: BlockheightBasedTransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` using a `TransactionConfirmationConfig` */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy:\n      | BlockheightBasedTransactionConfirmationStrategy\n      | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config =\n        strategy as BlockheightBasedTransactionConfirmationStrategy;\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const subscriptionCommitment = commitment || this.commitment;\n    let timeoutId;\n    let subscriptionId;\n    let done = false;\n\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          rawSignature,\n          (result: SignatureResult, context: Context) => {\n            subscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            done = true;\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    const checkBlockHeight = async () => {\n      try {\n        const blockHeight = await this.getBlockHeight(commitment);\n        return blockHeight;\n      } catch (_e) {\n        return -1;\n      }\n    };\n\n    const expiryPromise = new Promise<\n      | {__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED}\n      | {__type: TransactionStatus.TIMED_OUT; timeoutMs: number}\n    >(resolve => {\n      if (typeof strategy === 'string') {\n        let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n        switch (subscriptionCommitment) {\n          case 'processed':\n          case 'recent':\n          case 'single':\n          case 'confirmed':\n          case 'singleGossip': {\n            timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n            break;\n          }\n          // exhaust enums to ensure full coverage\n          case 'finalized':\n          case 'max':\n          case 'root':\n        }\n\n        timeoutId = setTimeout(\n          () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n          timeoutMs,\n        );\n      } else {\n        let config =\n          strategy as BlockheightBasedTransactionConfirmationStrategy;\n        (async () => {\n          let currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n          while (currentBlockHeight <= config.lastValidBlockHeight) {\n            await sleep(1000);\n            if (done) return;\n            currentBlockHeight = await checkBlockHeight();\n            if (done) return;\n          }\n          resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n        })();\n      }\n    });\n\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      switch (outcome.__type) {\n        case TransactionStatus.BLOCKHEIGHT_EXCEEDED:\n          throw new TransactionExpiredBlockheightExceededError(rawSignature);\n        case TransactionStatus.PROCESSED:\n          result = outcome.response;\n          break;\n        case TransactionStatus.TIMED_OUT:\n          throw new TransactionExpiredTimeoutError(\n            rawSignature,\n            outcome.timeoutMs / 1000,\n          );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new Error('failed to get cluster nodes: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new Error('failed to get vote accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitment?: Commitment): Promise<string> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get slot leader: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new Error('failed to get slot leaders: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get signature status: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get transaction count: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitment?: Commitment,\n  ): Promise<(InflationReward | null)[]> {\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined,\n      {\n        epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation reward: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitment?: Commitment): Promise<EpochInfo> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch info: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch schedule: ' + res.error.message);\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get leader schedule: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get recent blockhash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const args = this._buildArgs(limit ? [limit] : []);\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get recent performance samples: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get fee calculator: ' + res.error.message);\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: Message,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const wireMessage = message.serialize().toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result as unknown as RpcResponseAndContext<number>;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitment?: Commitment,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get latest blockhash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new Error('failed to get version: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get genesis hash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  async getBlock(\n    slot: number,\n    opts?: {commitment?: Finality},\n  ): Promise<BlockResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  async getBlockHeight(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block height information: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block production information: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  async getTransaction(\n    signature: string,\n    opts?: {commitment?: Finality},\n  ): Promise<TransactionResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: new Message(result.transaction.message),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error('failed to get transactions: ' + res.error.message);\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(TransactionResponse | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error('failed to get transactions: ' + res.error.message);\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new Error('failed to get blocks: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed transaction: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error(\n          'failed to get confirmed transactions: ' + res.error.message,\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'airdrop to ' + to.toBase58() + ' failed: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * Simulate a transaction\n   */\n  async simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration++;\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._subscriptionsByHash[hash] = {\n        ...subscription,\n        state: 'pending',\n      };\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'subscribing',\n                };\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                };\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'pending',\n                };\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._subscriptionsByHash[hash] = {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  };\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._subscriptionsByHash[hash] = {\n                      ...subscription,\n                      state: 'subscribed',\n                    };\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'unsubscribed',\n                };\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","export function makeWebsocketUrl(endpoint: string) {\n  let url = new URL(endpoint);\n  const useHttps = url.protocol === 'https:';\n\n  url.protocol = useHttps ? 'wss:' : 'ws:';\n  url.host = '';\n\n  // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  if (url.port !== '') {\n    url.port = String(Number(url.port) + 1);\n  }\n  return url.toString();\n}\n","import nacl from 'tweetnacl';\n\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    if (keypair) {\n      this._keypair = keypair;\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(nacl.sign.keyPair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    const keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n    if (!options || !options.skipValidation) {\n      const encoder = new TextEncoder();\n      const signData = encoder.encode('@solana/web3.js-validation-v1');\n      const signature = nacl.sign.detached(signData, keypair.secretKey);\n      if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n        throw new Error('provided secretKey is invalid');\n      }\n    }\n    return new Keypair(keypair);\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    return new Keypair(nacl.sign.keyPair.fromSeed(seed));\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return this._keypair.secretKey;\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport nacl from 'tweetnacl';\n\nimport {Keypair} from './keypair';\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = nacl.sign.detached(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport secp256k1 from 'secp256k1';\nimport sha3 from 'js-sha3';\n\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\nimport {toBuffer} from './util/to-buffer';\n\nconst {publicKeyCreate, ecdsaSign} = secp256k1;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(\n        sha3.keccak_256.update(toBuffer(publicKey)).digest(),\n      ).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(\n        sha3.keccak_256.update(toBuffer(message)).digest(),\n      );\n      const {signature, recid: recoveryId} = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './util/shortvec-encoding';\nimport {PublicKey} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    const PUBKEY_LENGTH = 32;\n\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './util/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'InitializeAccount' | 'Withdraw';\n\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   */\n  static space: number = 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {\n  BlockheightBasedTransactionConfirmationStrategy,\n  Connection,\n} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {BlockheightBasedTransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategy: BlockheightBasedTransactionConfirmationStrategy,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategyOrConfirmOptions:\n    | BlockheightBasedTransactionConfirmationStrategy\n    | ConfirmOptions\n    | undefined,\n  maybeConfirmOptions?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  let confirmationStrategy:\n    | BlockheightBasedTransactionConfirmationStrategy\n    | undefined;\n  let options: ConfirmOptions | undefined;\n  if (\n    confirmationStrategyOrConfirmOptions &&\n    Object.prototype.hasOwnProperty.call(\n      confirmationStrategyOrConfirmOptions,\n      'lastValidBlockHeight',\n    )\n  ) {\n    confirmationStrategy =\n      confirmationStrategyOrConfirmOptions as BlockheightBasedTransactionConfirmationStrategy;\n    options = maybeConfirmOptions;\n  } else {\n    options = confirmationStrategyOrConfirmOptions as\n      | ConfirmOptions\n      | undefined;\n  }\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const commitment = options && options.commitment;\n  const confirmationPromise = confirmationStrategy\n    ? connection.confirmTransaction(confirmationStrategy, commitment)\n    : connection.confirmTransaction(signature, commitment);\n  const status = (await confirmationPromise).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './compute-budget';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './ed25519-program';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './publickey';\nexport * from './stake-program';\nexport * from './system-program';\nexport * from './secp256k1-program';\nexport * from './transaction';\nexport * from './transaction-constants';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './vote-program';\nexport * from './sysvar';\nexport * from './errors';\nexport * from './util/borsh-schema';\nexport * from './util/send-and-confirm-transaction';\nexport * from './util/send-and-confirm-raw-transaction';\nexport * from './util/cluster';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n","'use strict'\n\nconst { base58btc } = require('multiformats/bases/base58')\nconst { base32 } = require('multiformats/bases/base32')\nconst Digest = require('multiformats/hashes/digest')\nconst { Multiaddr } = require('multiaddr')\nconst mafmt = require('mafmt')\nconst { CID } = require('multiformats/cid')\nconst { URL } = require('iso-url')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\n\nconst pathGatewayPattern = /^https?:\\/\\/[^/]+\\/(ip[fn]s)\\/([^/?#]+)/\nconst pathPattern = /^\\/(ip[fn]s)\\/([^/?#]+)/\nconst defaultProtocolMatch = 1\nconst defaultHashMath = 2\n\n// CID, libp2p-key or DNSLink\nconst subdomainGatewayPattern = /^https?:\\/\\/([^/]+)\\.(ip[fn]s)\\.[^/?]+/\nconst subdomainIdMatch = 1\nconst subdomainProtocolMatch = 2\n\n// Fully qualified domain name (FQDN) that has an explicit .tld suffix\nconst fqdnWithTld = /^(([a-z0-9]|[a-z0-9][a-z0-9-]*[a-z0-9])\\.)+([a-z0-9]|[a-z0-9][a-z0-9-]*[a-z0-9])$/\n\n/**\n * @param {*} hash\n */\nfunction isMultihash (hash) {\n  const formatted = convertToString(hash)\n  try {\n    Digest.decode(base58btc.decode('z' + formatted))\n  } catch {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {*} hash\n */\nfunction isBase32EncodedMultibase (hash) {\n  try {\n    base32.decode(hash)\n  } catch {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {*} hash\n */\nfunction isCID (hash) {\n  try {\n    if (typeof hash === 'string') {\n      return Boolean(CID.parse(hash))\n    }\n\n    if (hash instanceof Uint8Array) {\n      return Boolean(CID.decode(hash))\n    }\n\n    return Boolean(CID.asCID(hash)) // eslint-disable-line no-new\n  } catch (e) {\n    return false\n  }\n}\n\n/**\n * @param {*} input\n */\nfunction isMultiaddr (input) {\n  if (!input) return false\n  if (Multiaddr.isMultiaddr(input)) return true\n  try {\n    new Multiaddr(input) // eslint-disable-line no-new\n    return true\n  } catch (e) {\n    return false\n  }\n}\n\n/**\n * @param {string | Uint8Array | Multiaddr} input\n */\nfunction isPeerMultiaddr (input) {\n  return isMultiaddr(input) && mafmt.P2P.matches(input)\n}\n\n/**\n * @param {string | Uint8Array} input\n * @param {RegExp | string} pattern\n * @param {number} [protocolMatch=1]\n * @param {number} [hashMatch=2]\n */\nfunction isIpfs (input, pattern, protocolMatch = defaultProtocolMatch, hashMatch = defaultHashMath) {\n  const formatted = convertToString(input)\n  if (!formatted) {\n    return false\n  }\n\n  const match = formatted.match(pattern)\n  if (!match) {\n    return false\n  }\n\n  if (match[protocolMatch] !== 'ipfs') {\n    return false\n  }\n\n  let hash = match[hashMatch]\n\n  if (hash && pattern === subdomainGatewayPattern) {\n    // when doing checks for subdomain context\n    // ensure hash is case-insensitive\n    // (browsers force-lowercase authority component anyway)\n    hash = hash.toLowerCase()\n  }\n\n  return isCID(hash)\n}\n\n/**\n *\n * @param {string | Uint8Array} input\n * @param {string | RegExp} pattern\n * @param {number} [protocolMatch=1]\n * @param {number} [hashMatch=1]\n */\nfunction isIpns (input, pattern, protocolMatch = defaultProtocolMatch, hashMatch = defaultHashMath) {\n  const formatted = convertToString(input)\n  if (!formatted) {\n    return false\n  }\n  const match = formatted.match(pattern)\n  if (!match) {\n    return false\n  }\n\n  if (match[protocolMatch] !== 'ipns') {\n    return false\n  }\n\n  let ipnsId = match[hashMatch]\n\n  if (ipnsId && pattern === subdomainGatewayPattern) {\n    // when doing checks for subdomain context\n    // ensure ipnsId is case-insensitive\n    // (browsers force-lowercase authority compotent anyway)\n    ipnsId = ipnsId.toLowerCase()\n    // Check if it is cidv1\n    if (isCID(ipnsId)) return true\n    // Check if it looks like FQDN\n    try {\n      if (!ipnsId.includes('.') && ipnsId.includes('-')) {\n        // name without tld, assuming its inlined into a single DNS label\n        // (https://github.com/ipfs/in-web-browsers/issues/169)\n        // en-wikipedia--on--ipfs-org → en.wikipedia-on-ipfs.org\n        ipnsId = ipnsId.replace(/--/g, '@').replace(/-/g, '.').replace(/@/g, '-')\n      }\n      // URL implementation in web browsers forces lowercase of the hostname\n      const { hostname } = new URL(`http://${ipnsId}`) // eslint-disable-line no-new\n      // Check if potential FQDN has an explicit TLD\n      return fqdnWithTld.test(hostname)\n    } catch (e) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/**\n * @param {any} input\n */\nfunction isString (input) {\n  return typeof input === 'string'\n}\n\n/**\n * @param {Uint8Array | string} input\n */\nfunction convertToString (input) {\n  if (input instanceof Uint8Array) {\n    return uint8ArrayToString(input, 'base58btc')\n  }\n\n  if (isString(input)) {\n    return input\n  }\n\n  return false\n}\n\n/**\n * @param {string | Uint8Array} url\n */\nconst ipfsSubdomain = (url) => isIpfs(url, subdomainGatewayPattern, subdomainProtocolMatch, subdomainIdMatch)\n/**\n * @param {string | Uint8Array} url\n */\nconst ipnsSubdomain = (url) => isIpns(url, subdomainGatewayPattern, subdomainProtocolMatch, subdomainIdMatch)\n/**\n * @param {string | Uint8Array} url\n */\nconst subdomain = (url) => ipfsSubdomain(url) || ipnsSubdomain(url)\n\n/**\n * @param {string | Uint8Array} url\n */\nconst ipfsUrl = (url) => isIpfs(url, pathGatewayPattern) || ipfsSubdomain(url)\n/**\n * @param {string | Uint8Array} url\n */\nconst ipnsUrl = (url) => isIpns(url, pathGatewayPattern) || ipnsSubdomain(url)\n/**\n * @param {string | Uint8Array} url\n */\nconst url = (url) => ipfsUrl(url) || ipnsUrl(url) || subdomain(url)\n\n/**\n * @param {string | Uint8Array} path\n */\nconst path = (path) => isIpfs(path, pathPattern) || isIpns(path, pathPattern)\n\nmodule.exports = {\n  multihash: isMultihash,\n  multiaddr: isMultiaddr,\n  peerMultiaddr: isPeerMultiaddr,\n  cid: isCID,\n  /**\n   * @param {CID | string | Uint8Array} cid\n   */\n  base32cid: (cid) => (isBase32EncodedMultibase(cid) && isCID(cid)),\n  ipfsSubdomain,\n  ipnsSubdomain,\n  subdomain,\n  subdomainGatewayPattern,\n  ipfsUrl,\n  ipnsUrl,\n  url,\n  pathGatewayPattern: pathGatewayPattern,\n  /**\n   * @param {string | Uint8Array} path\n   */\n  ipfsPath: (path) => isIpfs(path, pathPattern),\n  /**\n   * @param {string | Uint8Array} path\n   */\n  ipnsPath: (path) => isIpns(path, pathPattern),\n  path,\n  pathPattern,\n  /**\n   * @param {string | Uint8Array} x\n   */\n  urlOrPath: (x) => url(x) || path(x),\n  /**\n   * @param {string | Uint8Array | CID} path\n   */\n  cidPath: path => isString(path) && !isCID(path) && isIpfs(`/ipfs/${path}`, pathPattern)\n}\n","'use strict'\n\n/**\n * Filters the passed (async) iterable by using the filter function\n *\n * @template T\n * @param {AsyncIterable<T>|Iterable<T>} source\n * @param {function(T):boolean|Promise<boolean>} fn\n */\nconst filter = async function * (source, fn) {\n  for await (const entry of source) {\n    if (await fn(entry)) {\n      yield entry\n    }\n  }\n}\n\nmodule.exports = filter\n","'use strict'\n\n/**\n * Takes an (async) iterable and returns one with each item mapped by the passed\n * function.\n *\n * @template I,O\n * @param {AsyncIterable<I>|Iterable<I>} source\n * @param {function(I):O|Promise<O>} func\n * @returns {AsyncIterable<O>}\n */\nconst map = async function * (source, func) {\n  for await (const val of source) {\n    yield func(val)\n  }\n}\n\nmodule.exports = map\n","'use strict'\n\nconst pushable = require('it-pushable')\n\n/**\n * Treat one or more iterables as a single iterable.\n *\n * Nb. sources are iterated over in parallel so the\n * order of emitted items is not guaranteed.\n *\n * @template T\n * @param {...AsyncIterable<T>|Iterable<T>} sources\n * @returns {AsyncIterable<T>}\n */\nconst merge = async function * (...sources) {\n  const output = pushable()\n\n  setTimeout(async () => {\n    try {\n      await Promise.all(\n        sources.map(async (source) => {\n          for await (const item of source) {\n            output.push(item)\n          }\n        })\n      )\n\n      output.end()\n    } catch (/** @type {any} */ err) {\n      output.end(err)\n    }\n  }, 0)\n\n  yield * output\n}\n\nmodule.exports = merge\n","const rawPipe = (...fns) => {\n  let res\n  while (fns.length) {\n    res = fns.shift()(res)\n  }\n  return res\n}\n\nconst isIterable = obj => obj && (\n  typeof obj[Symbol.asyncIterator] === 'function' ||\n  typeof obj[Symbol.iterator] === 'function' ||\n  typeof obj.next === 'function' // Probably, right?\n)\n\nconst isDuplex = obj => obj && typeof obj.sink === 'function' && isIterable(obj.source)\n\nconst duplexPipelineFn = duplex => source => {\n  duplex.sink(source) // TODO: error on sink side is unhandled rejection - this is the same as pull streams\n  return duplex.source\n}\n\nconst pipe = (...fns) => {\n  // Duplex at start: wrap in function and return duplex source\n  if (isDuplex(fns[0])) {\n    const duplex = fns[0]\n    fns[0] = () => duplex.source\n  // Iterable at start: wrap in function\n  } else if (isIterable(fns[0])) {\n    const source = fns[0]\n    fns[0] = () => source\n  }\n\n  if (fns.length > 1) {\n    // Duplex at end: use duplex sink\n    if (isDuplex(fns[fns.length - 1])) {\n      fns[fns.length - 1] = fns[fns.length - 1].sink\n    }\n  }\n\n  if (fns.length > 2) {\n    // Duplex in the middle, consume source with duplex sink and return duplex source\n    for (let i = 1; i < fns.length - 1; i++) {\n      if (isDuplex(fns[i])) {\n        fns[i] = duplexPipelineFn(fns[i])\n      }\n    }\n  }\n\n  return rawPipe(...fns)\n}\n\nmodule.exports = pipe\nmodule.exports.pipe = pipe\nmodule.exports.rawPipe = rawPipe\nmodule.exports.isIterable = isIterable\nmodule.exports.isDuplex = isDuplex\n","'use strict'\n\n/**\n * Stop iteration after n items have been received.\n *\n * @template T\n * @param {AsyncIterable<T>|Iterable<T>} source\n * @param {number} limit\n * @returns {AsyncIterable<T>}\n */\nconst take = async function * (source, limit) {\n  let items = 0\n\n  if (limit < 1) {\n    return\n  }\n\n  for await (const entry of source) {\n    yield entry\n\n    items++\n\n    if (items === limit) {\n      return\n    }\n  }\n}\n\nmodule.exports = take\n","'use strict'\n\nconst forgePbkdf2 = require('node-forge/lib/pbkdf2')\nconst forgeUtil = require('node-forge/lib/util')\nconst errcode = require('err-code')\n\n/**\n * Maps an IPFS hash name to its node-forge equivalent.\n *\n * See https://github.com/multiformats/multihash/blob/master/hashtable.csv\n *\n * @private\n */\nconst hashName = {\n  sha1: 'sha1',\n  'sha2-256': 'sha256',\n  'sha2-512': 'sha512'\n}\n\n/**\n * Computes the Password-Based Key Derivation Function 2.\n *\n * @param {string} password\n * @param {string} salt\n * @param {number} iterations\n * @param {number} keySize - (in bytes)\n * @param {string} hash - The hash name ('sha1', 'sha2-512, ...)\n * @returns {string} - A new password\n */\nfunction pbkdf2 (password, salt, iterations, keySize, hash) {\n  const hasher = hashName[hash]\n  if (!hasher) {\n    const types = Object.keys(hashName).join(' / ')\n    throw errcode(new Error(`Hash '${hash}' is unknown or not supported. Must be ${types}`), 'ERR_UNSUPPORTED_HASH_TYPE')\n  }\n  const dek = forgePbkdf2(\n    password,\n    salt,\n    iterations,\n    keySize,\n    hasher)\n  return forgeUtil.encode64(dek)\n}\n\nmodule.exports = pbkdf2\n","'use strict'\nconst randomBytes = require('iso-random-stream/src/random')\nconst errcode = require('err-code')\n\nmodule.exports = function (length) {\n  if (isNaN(length) || length <= 0) {\n    throw errcode(new Error('random bytes length must be a Number bigger than 0'), 'ERR_INVALID_LENGTH')\n  }\n  return randomBytes(length)\n}\n","(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v8.1.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2019 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    hasSymbol = typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol',\r\n\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                    // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if only one character,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.$|[+-.\\s]|(.).*\\1/.test(v)) {\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var n,\r\n        i = 1,\r\n        m = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '1e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (hasSymbol) {\r\n      P[Symbol.toStringTag] = 'BigNumber';\r\n\r\n      // Node.js v10.12.0+\r\n      P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;\r\n    }\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nmodule.exports = {\n    languageTag: \"en-US\",\n    delimiters: {\n        thousands: \",\",\n        decimal: \".\"\n    },\n    abbreviations: {\n        thousand: \"k\",\n        million: \"m\",\n        billion: \"b\",\n        trillion: \"t\"\n    },\n    spaceSeparated: false,\n    ordinal: function(number) {\n        let b = number % 10;\n        return (~~(number % 100 / 10) === 1) ? \"th\" : (b === 1) ? \"st\" : (b === 2) ? \"nd\" : (b === 3) ? \"rd\" : \"th\";\n    },\n    bytes: {\n        binarySuffixes: [\"B\", \"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\", \"ZiB\", \"YiB\"],\n        decimalSuffixes: [\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"]\n    },\n    currency: {\n        symbol: \"$\",\n        position: \"prefix\",\n        code: \"USD\"\n    },\n    currencyFormat: {\n        thousandSeparated: true,\n        totalLength: 4,\n        spaceSeparated: true,\n        spaceSeparatedCurrency: true\n    },\n    formats: {\n        fourDigits: {\n            totalLength: 4,\n            spaceSeparated: true\n        },\n        fullWithTwoDecimals: {\n            output: \"currency\",\n            thousandSeparated: true,\n            mantissa: 2\n        },\n        fullWithTwoDecimalsNoCurrency: {\n            thousandSeparated: true,\n            mantissa: 2\n        },\n        fullWithNoDecimals: {\n            output: \"currency\",\n            thousandSeparated: true,\n            mantissa: 0\n        }\n    }\n};\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst globalState = require(\"./globalState\");\nconst validating = require(\"./validating\");\nconst parsing = require(\"./parsing\");\nconst BigNumber = require(\"bignumber.js\");\n\nconst powers = {\n    trillion: Math.pow(10, 12),\n    billion: Math.pow(10, 9),\n    million: Math.pow(10, 6),\n    thousand: Math.pow(10, 3)\n};\n\nconst defaultOptions = {\n    totalLength: 0,\n    characteristic: 0,\n    forceAverage: false,\n    average: false,\n    mantissa: -1,\n    optionalMantissa: true,\n    thousandSeparated: false,\n    spaceSeparated: false,\n    negative: \"sign\",\n    forceSign: false,\n    roundingFunction: Math.round,\n    spaceSeparatedAbbreviation: false\n};\n\nconst { binarySuffixes, decimalSuffixes } = globalState.currentBytes();\n\nconst bytes = {\n    general: { scale: 1024, suffixes: decimalSuffixes, marker: \"bd\" },\n    binary: { scale: 1024, suffixes: binarySuffixes, marker: \"b\" },\n    decimal: { scale: 1000, suffixes: decimalSuffixes, marker: \"d\" }\n};\n\n/**\n * Entry point. Format the provided INSTANCE according to the PROVIDEDFORMAT.\n * This method ensure the prefix and postfix are added as the last step.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {NumbroFormat|string} [providedFormat] - specification for formatting\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction format(instance, providedFormat = {}, numbro) {\n    if (typeof providedFormat === \"string\") {\n        providedFormat = parsing.parseFormat(providedFormat);\n    }\n\n    let valid = validating.validateFormat(providedFormat);\n\n    if (!valid) {\n        return \"ERROR: invalid format\";\n    }\n\n    let prefix = providedFormat.prefix || \"\";\n    let postfix = providedFormat.postfix || \"\";\n\n    let output = formatNumbro(instance, providedFormat, numbro);\n    output = insertPrefix(output, prefix);\n    output = insertPostfix(output, postfix);\n    return output;\n}\n\n/**\n * Format the provided INSTANCE according to the PROVIDEDFORMAT.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction formatNumbro(instance, providedFormat, numbro) {\n    switch (providedFormat.output) {\n        case \"currency\": {\n            providedFormat = formatOrDefault(providedFormat, globalState.currentCurrencyDefaultFormat());\n            return formatCurrency(instance, providedFormat, globalState, numbro);\n        }\n        case \"percent\": {\n            providedFormat = formatOrDefault(providedFormat, globalState.currentPercentageDefaultFormat());\n            return formatPercentage(instance, providedFormat, globalState, numbro);\n        }\n        case \"byte\":\n            providedFormat = formatOrDefault(providedFormat, globalState.currentByteDefaultFormat());\n            return formatByte(instance, providedFormat, globalState, numbro);\n        case \"time\":\n            providedFormat = formatOrDefault(providedFormat, globalState.currentTimeDefaultFormat());\n            return formatTime(instance, providedFormat, globalState, numbro);\n        case \"ordinal\":\n            providedFormat = formatOrDefault(providedFormat, globalState.currentOrdinalDefaultFormat());\n            return formatOrdinal(instance, providedFormat, globalState, numbro);\n        case \"number\":\n        default:\n            return formatNumber({\n                instance,\n                providedFormat,\n                numbro\n            });\n    }\n}\n\n/**\n * Get the decimal byte unit (MB) for the provided numbro INSTANCE.\n * We go from one unit to another using the decimal system (1000).\n *\n * @param {Numbro} instance - numbro instance to compute\n * @return {String}\n */\nfunction getDecimalByteUnit(instance) {\n    let data = bytes.decimal;\n    return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;\n}\n\n/**\n * Get the binary byte unit (MiB) for the provided numbro INSTANCE.\n * We go from one unit to another using the decimal system (1024).\n *\n * @param {Numbro} instance - numbro instance to compute\n * @return {String}\n */\nfunction getBinaryByteUnit(instance) {\n    let data = bytes.binary;\n    return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;\n}\n\n/**\n * Get the decimal byte unit (MB) for the provided numbro INSTANCE.\n * We go from one unit to another using the decimal system (1024).\n *\n * @param {Numbro} instance - numbro instance to compute\n * @return {String}\n */\nfunction getByteUnit(instance) {\n    let data = bytes.general;\n    return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;\n}\n\n/**\n * Return the value and the suffix computed in byte.\n * It uses the SUFFIXES and the SCALE provided.\n *\n * @param {number} value - Number to format\n * @param {[String]} suffixes - List of suffixes\n * @param {number} scale - Number in-between two units\n * @return {{value: Number, suffix: String}}\n */\nfunction getFormatByteUnits(value, suffixes, scale) {\n    let suffix = suffixes[0];\n    let abs = Math.abs(value);\n\n    if (abs >= scale) {\n        for (let power = 1; power < suffixes.length; ++power) {\n            let min = Math.pow(scale, power);\n            let max = Math.pow(scale, power + 1);\n\n            if (abs >= min && abs < max) {\n                suffix = suffixes[power];\n                value = value / min;\n                break;\n            }\n        }\n\n        // values greater than or equal to [scale] YB never set the suffix\n        if (suffix === suffixes[0]) {\n            value = value / Math.pow(scale, suffixes.length - 1);\n            suffix = suffixes[suffixes.length - 1];\n        }\n    }\n\n    return { value, suffix };\n}\n\n/**\n * Format the provided INSTANCE as bytes using the PROVIDEDFORMAT, and STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction formatByte(instance, providedFormat, state, numbro) {\n    let base = providedFormat.base || \"binary\";\n    let options = Object.assign({}, defaultOptions, providedFormat);\n\n    const { binarySuffixes: localBinarySuffixes, decimalSuffixes: localDecimalSuffixes } = state.currentBytes();\n\n    const localBytes = {\n        general: { scale: 1024, suffixes: localDecimalSuffixes || decimalSuffixes, marker: \"bd\" },\n        binary: { scale: 1024, suffixes: localBinarySuffixes || binarySuffixes, marker: \"b\" },\n        decimal: { scale: 1000, suffixes: localDecimalSuffixes || decimalSuffixes, marker: \"d\" }\n    };\n    let baseInfo = localBytes[base];\n\n    let { value, suffix } = getFormatByteUnits(instance._value, baseInfo.suffixes, baseInfo.scale);\n\n    let output = formatNumber({\n        instance: numbro(value),\n        providedFormat,\n        state,\n        defaults: state.currentByteDefaultFormat()\n    });\n\n    return `${output}${options.spaceSeparated ? \" \" : \"\"}${suffix}`;\n}\n\n/**\n * Format the provided INSTANCE as an ordinal using the PROVIDEDFORMAT,\n * and the STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @return {string}\n */\nfunction formatOrdinal(instance, providedFormat, state) {\n    let ordinalFn = state.currentOrdinal();\n    let options = Object.assign({}, defaultOptions, providedFormat);\n\n    let output = formatNumber({\n        instance,\n        providedFormat,\n        state\n    });\n    let ordinal = ordinalFn(instance._value);\n\n    return `${output}${options.spaceSeparated ? \" \" : \"\"}${ordinal}`;\n}\n\n/**\n * Format the provided INSTANCE as a time HH:MM:SS.\n *\n * @param {Numbro} instance - numbro instance to format\n * @return {string}\n */\nfunction formatTime(instance) {\n    let hours = Math.floor(instance._value / 60 / 60);\n    let minutes = Math.floor((instance._value - (hours * 60 * 60)) / 60);\n    let seconds = Math.round(instance._value - (hours * 60 * 60) - (minutes * 60));\n    return `${hours}:${(minutes < 10) ? \"0\" : \"\"}${minutes}:${(seconds < 10) ? \"0\" : \"\"}${seconds}`;\n}\n\n/**\n * Format the provided INSTANCE as a percentage using the PROVIDEDFORMAT,\n * and the STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction formatPercentage(instance, providedFormat, state, numbro) {\n    let prefixSymbol = providedFormat.prefixSymbol;\n\n    let output = formatNumber({\n        instance: numbro(instance._value * 100),\n        providedFormat,\n        state\n    });\n    let options = Object.assign({}, defaultOptions, providedFormat);\n\n    if (prefixSymbol) {\n        return `%${options.spaceSeparated ? \" \" : \"\"}${output}`;\n    }\n\n    return `${output}${options.spaceSeparated ? \" \" : \"\"}%`;\n}\n\n/**\n * Format the provided INSTANCE as a percentage using the PROVIDEDFORMAT,\n * and the STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @return {string}\n */\nfunction formatCurrency(instance, providedFormat, state) {\n    const currentCurrency = state.currentCurrency();\n    let clonedFormat = Object.assign({}, providedFormat);\n    let options = Object.assign({}, defaultOptions, clonedFormat);\n    let decimalSeparator = undefined;\n    let space = \"\";\n    let average = !!options.totalLength || !!options.forceAverage || options.average;\n    let position = clonedFormat.currencyPosition || currentCurrency.position;\n    let symbol = clonedFormat.currencySymbol || currentCurrency.symbol;\n    const spaceSeparatedCurrency = options.spaceSeparatedCurrency !== void 0\n        ? options.spaceSeparatedCurrency : options.spaceSeparated;\n\n    if (clonedFormat.lowPrecision === undefined) {\n        clonedFormat.lowPrecision = false;\n    }\n\n    if (spaceSeparatedCurrency) {\n        space = \" \";\n    }\n\n    if (position === \"infix\") {\n        decimalSeparator = space + symbol + space;\n    }\n\n    let output = formatNumber({\n        instance,\n        providedFormat: clonedFormat,\n        state,\n        decimalSeparator\n    });\n\n    if (position === \"prefix\") {\n        if (instance._value < 0 && options.negative === \"sign\") {\n            output = `-${space}${symbol}${output.slice(1)}`;\n        } else if (instance._value > 0 && options.forceSign) {\n            output = `+${space}${symbol}${output.slice(1)}`;\n        } else {\n            output = symbol + space + output;\n        }\n    }\n\n    if (!position || position === \"postfix\") {\n        space = !options.spaceSeparatedAbbreviation && average ? \"\" : space;\n        output = output + space + symbol;\n    }\n\n    return output;\n}\n\n/**\n * Compute the average value out of VALUE.\n * The other parameters are computation options.\n *\n * @param {number} value - value to compute\n * @param {string} [forceAverage] - forced unit used to compute\n * @param {boolean} [lowPrecision=true] - reduce average precision\n * @param {{}} abbreviations - part of the language specification\n * @param {boolean} spaceSeparated - `true` if a space must be inserted between the value and the abbreviation\n * @param {number} [totalLength] - total length of the output including the characteristic and the mantissa\n * @param {function} roundingFunction - function used to round numbers\n * @return {{value: number, abbreviation: string, mantissaPrecision: number}}\n */\nfunction computeAverage({ value, forceAverage, lowPrecision = true, abbreviations, spaceSeparated = false, totalLength = 0, roundingFunction = Math.round }) {\n    let abbreviation = \"\";\n    let abs = Math.abs(value);\n    let mantissaPrecision = -1;\n\n    if (forceAverage && abbreviations[forceAverage] && powers[forceAverage]) {\n        abbreviation = abbreviations[forceAverage];\n        value = value / powers[forceAverage];\n    } else {\n        if (abs >= powers.trillion || (lowPrecision && roundingFunction(abs / powers.trillion) === 1)) {\n            // trillion\n            abbreviation = abbreviations.trillion;\n            value = value / powers.trillion;\n        } else if (abs < powers.trillion && abs >= powers.billion || (lowPrecision && roundingFunction(abs / powers.billion) === 1)) {\n            // billion\n            abbreviation = abbreviations.billion;\n            value = value / powers.billion;\n        } else if (abs < powers.billion && abs >= powers.million || (lowPrecision && roundingFunction(abs / powers.million) === 1)) {\n            // million\n            abbreviation = abbreviations.million;\n            value = value / powers.million;\n        } else if (abs < powers.million && abs >= powers.thousand || (lowPrecision && roundingFunction(abs / powers.thousand) === 1)) {\n            // thousand\n            abbreviation = abbreviations.thousand;\n            value = value / powers.thousand;\n        }\n    }\n\n    let optionalSpace = spaceSeparated ? \" \" : \"\";\n\n    if (abbreviation) {\n        abbreviation = optionalSpace + abbreviation;\n    }\n\n    if (totalLength) {\n        let isNegative = value < 0;\n        let characteristic = value.toString().split(\".\")[0];\n\n        let characteristicLength = isNegative\n            ? characteristic.length - 1\n            : characteristic.length;\n\n        mantissaPrecision = Math.max(totalLength - characteristicLength, 0);\n    }\n\n    return { value, abbreviation, mantissaPrecision };\n}\n\n/**\n * Compute an exponential form for VALUE, taking into account CHARACTERISTIC\n * if provided.\n * @param {number} value - value to compute\n * @param {number} [characteristicPrecision] - optional characteristic length\n * @return {{value: number, abbreviation: string}}\n */\nfunction computeExponential({ value, characteristicPrecision = 0 }) {\n    let [numberString, exponential] = value.toExponential().split(\"e\");\n    let number = +numberString;\n\n    if (!characteristicPrecision) {\n        return {\n            value: number,\n            abbreviation: `e${exponential}`\n        };\n    }\n\n    let characteristicLength = 1; // see `toExponential`\n\n    if (characteristicLength < characteristicPrecision) {\n        number = number * Math.pow(10, characteristicPrecision - characteristicLength);\n        exponential = +exponential - (characteristicPrecision - characteristicLength);\n        exponential = exponential >= 0 ? `+${exponential}` : exponential;\n    }\n\n    return {\n        value: number,\n        abbreviation: `e${exponential}`\n    };\n}\n\n/**\n * Return a string of NUMBER zero.\n *\n * @param {number} number - Length of the output\n * @return {string}\n */\nfunction zeroes(number) {\n    let result = \"\";\n    for (let i = 0; i < number; i++) {\n        result += \"0\";\n    }\n\n    return result;\n}\n\n/**\n * Return a string representing VALUE with a PRECISION-long mantissa.\n * This method is for large/small numbers only (a.k.a. including a \"e\").\n *\n * @param {number} value - number to precise\n * @param {number} precision - desired length for the mantissa\n * @return {string}\n */\nfunction toFixedLarge(value, precision) {\n    let result = value.toString();\n\n    let [base, exp] = result.split(\"e\");\n\n    let [characteristic, mantissa = \"\"] = base.split(\".\");\n\n    if (+exp > 0) {\n        result = characteristic + mantissa + zeroes(exp - mantissa.length);\n    } else {\n        let prefix = \".\";\n\n        if (+characteristic < 0) {\n            prefix = `-0${prefix}`;\n        } else {\n            prefix = `0${prefix}`;\n        }\n\n        let suffix = (zeroes(-exp - 1) + Math.abs(characteristic) + mantissa).substr(0, precision);\n        if (suffix.length < precision) {\n            suffix += zeroes(precision - suffix.length);\n        }\n        result = prefix + suffix;\n    }\n\n    if (+exp > 0 && precision > 0) {\n        result += `.${zeroes(precision)}`;\n    }\n\n    return result;\n}\n\n/**\n * Return a string representing VALUE with a PRECISION-long mantissa.\n *\n * @param {number} value - number to precise\n * @param {number} precision - desired length for the mantissa\n * @param {function} roundingFunction - rounding function to be used\n * @return {string}\n */\nfunction toFixed(value, precision, roundingFunction = Math.round) {\n    if (value.toString().indexOf(\"e\") !== -1) {\n        return toFixedLarge(value, precision);\n    }\n\n    const n = new BigNumber(roundingFunction(+`${value}e+${precision}`) / (Math.pow(10, precision)));\n    return n.toFixed(precision);\n}\n\n/**\n * Return the current OUTPUT with a mantissa precision of PRECISION.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {boolean} optionalMantissa - if `true`, the mantissa is omitted when it's only zeroes\n * @param {number} precision - desired precision of the mantissa\n * @param {boolean} trim - if `true`, trailing zeroes are removed from the mantissa\n * @return {string}\n */\nfunction setMantissaPrecision(output, value, optionalMantissa, precision, trim, roundingFunction) {\n    if (precision === -1) {\n        return output;\n    }\n\n    let result = toFixed(value, precision, roundingFunction);\n    let [currentCharacteristic, currentMantissa = \"\"] = result.toString().split(\".\");\n\n    if (currentMantissa.match(/^0+$/) && (optionalMantissa || trim)) {\n        return currentCharacteristic;\n    }\n\n    let hasTrailingZeroes = currentMantissa.match(/0+$/);\n    if (trim && hasTrailingZeroes) {\n        return `${currentCharacteristic}.${currentMantissa.toString().slice(0, hasTrailingZeroes.index)}`;\n    }\n\n    return result.toString();\n}\n\n/**\n * Return the current OUTPUT with a characteristic precision of PRECISION.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {boolean} optionalCharacteristic - `true` if the characteristic is omitted when it's only zeroes\n * @param {number} precision - desired precision of the characteristic\n * @return {string}\n */\nfunction setCharacteristicPrecision(output, value, optionalCharacteristic, precision) {\n    let result = output;\n    let [currentCharacteristic, currentMantissa] = result.toString().split(\".\");\n\n    if (currentCharacteristic.match(/^-?0$/) && optionalCharacteristic) {\n        if (!currentMantissa) {\n            return currentCharacteristic.replace(\"0\", \"\");\n        }\n\n        return `${currentCharacteristic.replace(\"0\", \"\")}.${currentMantissa}`;\n    }\n\n    const hasNegativeSign = value < 0 && currentCharacteristic.indexOf(\"-\") === 0;\n    if (hasNegativeSign) {\n            // Remove the negative sign\n            currentCharacteristic = currentCharacteristic.slice(1);\n            result = result.slice(1);\n    }\n\n    if (currentCharacteristic.length < precision) {\n        let missingZeros = precision - currentCharacteristic.length;\n        for (let i = 0; i < missingZeros; i++) {\n            result = `0${result}`;\n        }\n    }\n\n    if (hasNegativeSign) {\n        // Add back the minus sign\n        result = `-${result}`;\n    }\n    return result.toString();\n}\n\n/**\n * Return the indexes where are the group separations after splitting\n * `totalLength` in group of `groupSize` size.\n * Important: we start grouping from the right hand side.\n *\n * @param {number} totalLength - total length of the characteristic to split\n * @param {number} groupSize - length of each group\n * @return {[number]}\n */\nfunction indexesOfGroupSpaces(totalLength, groupSize) {\n    let result = [];\n    let counter = 0;\n    for (let i = totalLength; i > 0; i--) {\n        if (counter === groupSize) {\n            result.unshift(i);\n            counter = 0;\n        }\n        counter++;\n    }\n\n    return result;\n}\n\n/**\n * Replace the decimal separator with DECIMALSEPARATOR and insert thousand\n * separators.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {boolean} thousandSeparated - `true` if the characteristic must be separated\n * @param {globalState} state - shared state of the library\n * @param {string} decimalSeparator - string to use as decimal separator\n * @return {string}\n */\nfunction replaceDelimiters(output, value, thousandSeparated, state, decimalSeparator) {\n    let delimiters = state.currentDelimiters();\n    let thousandSeparator = delimiters.thousands;\n    decimalSeparator = decimalSeparator || delimiters.decimal;\n    let thousandsSize = delimiters.thousandsSize || 3;\n\n    let result = output.toString();\n    let characteristic = result.split(\".\")[0];\n    let mantissa = result.split(\".\")[1];\n    const hasNegativeSign = value < 0 && characteristic.indexOf(\"-\") === 0;\n\n    if (thousandSeparated) {\n        if (hasNegativeSign) {\n            // Remove the negative sign\n            characteristic = characteristic.slice(1);\n        }\n\n        let indexesToInsertThousandDelimiters = indexesOfGroupSpaces(characteristic.length, thousandsSize);\n        indexesToInsertThousandDelimiters.forEach((position, index) => {\n            characteristic = characteristic.slice(0, position + index) + thousandSeparator + characteristic.slice(position + index);\n        });\n\n        if (hasNegativeSign) {\n            // Add back the negative sign\n            characteristic = `-${characteristic}`;\n        }\n    }\n\n    if (!mantissa) {\n        result = characteristic;\n    } else {\n        result = characteristic + decimalSeparator + mantissa;\n    }\n    return result;\n}\n\n/**\n * Insert the provided ABBREVIATION at the end of OUTPUT.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {string} abbreviation - abbreviation to append\n * @return {*}\n */\nfunction insertAbbreviation(output, abbreviation) {\n    return output + abbreviation;\n}\n\n/**\n * Insert the positive/negative sign according to the NEGATIVE flag.\n * If the value is negative but still output as 0, the negative sign is removed.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {string} negative - flag for the negative form (\"sign\" or \"parenthesis\")\n * @return {*}\n */\nfunction insertSign(output, value, negative) {\n    if (value === 0) {\n        return output;\n    }\n\n    if (+output === 0) {\n        return output.replace(\"-\", \"\");\n    }\n\n    if (value > 0) {\n        return `+${output}`;\n    }\n\n    if (negative === \"sign\") {\n        return output;\n    }\n\n    return `(${output.replace(\"-\", \"\")})`;\n}\n\n/**\n * Insert the provided PREFIX at the start of OUTPUT.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {string} prefix - abbreviation to prepend\n * @return {*}\n */\nfunction insertPrefix(output, prefix) {\n    return prefix + output;\n}\n\n/**\n * Insert the provided POSTFIX at the end of OUTPUT.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {string} postfix - abbreviation to append\n * @return {*}\n */\nfunction insertPostfix(output, postfix) {\n    return output + postfix;\n}\n\n/**\n * Format the provided INSTANCE as a number using the PROVIDEDFORMAT,\n * and the STATE.\n * This is the key method of the framework!\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} [providedFormat] - specification for formatting\n * @param {globalState} state - shared state of the library\n * @param {string} decimalSeparator - string to use as decimal separator\n * @param {{}} defaults - Set of default values used for formatting\n * @return {string}\n */\nfunction formatNumber({ instance, providedFormat, state = globalState, decimalSeparator, defaults = state.currentDefaults() }) {\n    let value = instance._value;\n\n    if (value === 0 && state.hasZeroFormat()) {\n        return state.getZeroFormat();\n    }\n\n    if (!isFinite(value)) {\n        return value.toString();\n    }\n\n    let options = Object.assign({}, defaultOptions, defaults, providedFormat);\n\n    let totalLength = options.totalLength;\n    let characteristicPrecision = totalLength ? 0 : options.characteristic;\n    let optionalCharacteristic = options.optionalCharacteristic;\n    let forceAverage = options.forceAverage;\n    let lowPrecision = options.lowPrecision;\n    let average = !!totalLength || !!forceAverage || options.average;\n\n    // default when averaging is to chop off decimals\n    let mantissaPrecision = totalLength ? -1 : (average && providedFormat.mantissa === undefined ? 0 : options.mantissa);\n    let optionalMantissa = totalLength ? false : (providedFormat.optionalMantissa === undefined ? mantissaPrecision === -1 : options.optionalMantissa);\n    let trimMantissa = options.trimMantissa;\n    let thousandSeparated = options.thousandSeparated;\n    let spaceSeparated = options.spaceSeparated;\n    let negative = options.negative;\n    let forceSign = options.forceSign;\n    let exponential = options.exponential;\n    let roundingFunction = options.roundingFunction;\n\n    let abbreviation = \"\";\n    if (average) {\n        let data = computeAverage({\n            value,\n            forceAverage,\n            lowPrecision,\n            abbreviations: state.currentAbbreviations(),\n            spaceSeparated,\n            roundingFunction,\n            totalLength\n        });\n\n        value = data.value;\n        abbreviation += data.abbreviation;\n\n        if (totalLength) {\n            mantissaPrecision = data.mantissaPrecision;\n        }\n    }\n\n    if (exponential) {\n        let data = computeExponential({\n            value,\n            characteristicPrecision\n        });\n\n        value = data.value;\n        abbreviation = data.abbreviation + abbreviation;\n    }\n\n    let output = setMantissaPrecision(value.toString(), value, optionalMantissa, mantissaPrecision, trimMantissa, roundingFunction);\n    output = setCharacteristicPrecision(output, value, optionalCharacteristic, characteristicPrecision);\n    output = replaceDelimiters(output, value, thousandSeparated, state, decimalSeparator);\n\n    if (average || exponential) {\n        output = insertAbbreviation(output, abbreviation);\n    }\n\n    if (forceSign || value < 0) {\n        output = insertSign(output, value, negative);\n    }\n\n    return output;\n}\n\n/**\n * If FORMAT is non-null and not just an output, return FORMAT.\n * Return DEFAULTFORMAT otherwise.\n *\n * @param providedFormat\n * @param defaultFormat\n */\nfunction formatOrDefault(providedFormat, defaultFormat) {\n    if (!providedFormat) {\n        return defaultFormat;\n    }\n\n    let keys = Object.keys(providedFormat);\n    if (keys.length === 1 && keys[0] === \"output\") {\n        return defaultFormat;\n    }\n\n    return providedFormat;\n}\n\nmodule.exports = (numbro) => ({\n    format: (...args) => format(...args, numbro),\n    getByteUnit: (...args) => getByteUnit(...args, numbro),\n    getBinaryByteUnit: (...args) => getBinaryByteUnit(...args, numbro),\n    getDecimalByteUnit: (...args) => getDecimalByteUnit(...args, numbro),\n    formatOrDefault\n});\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst enUS = require(\"./en-US\");\nconst validating = require(\"./validating\");\nconst parsing = require(\"./parsing\");\n\nlet state = {};\n\nlet currentLanguageTag = undefined;\nlet languages = {};\n\nlet zeroFormat = null;\n\nlet globalDefaults = {};\n\nfunction chooseLanguage(tag) { currentLanguageTag = tag; }\n\nfunction currentLanguageData() { return languages[currentLanguageTag]; }\n\n/**\n * Return all the register languages\n *\n * @return {{}}\n */\nstate.languages = () => Object.assign({}, languages);\n\n//\n// Current language accessors\n//\n\n/**\n * Return the current language tag\n *\n * @return {string}\n */\nstate.currentLanguage = () => currentLanguageTag;\n\n/**\n * Return the current language bytes data\n *\n * @return {{}}\n */\nstate.currentBytes = () => currentLanguageData().bytes || {};\n\n/**\n * Return the current language currency data\n *\n * @return {{}}\n */\nstate.currentCurrency = () => currentLanguageData().currency;\n\n/**\n * Return the current language abbreviations data\n *\n * @return {{}}\n */\nstate.currentAbbreviations = () => currentLanguageData().abbreviations;\n\n/**\n * Return the current language delimiters data\n *\n * @return {{}}\n */\nstate.currentDelimiters = () => currentLanguageData().delimiters;\n\n/**\n * Return the current language ordinal function\n *\n * @return {function}\n */\nstate.currentOrdinal = () => currentLanguageData().ordinal;\n\n//\n// Defaults\n//\n\n/**\n * Return the current formatting defaults.\n * First use the current language default, then fallback to the globally defined defaults.\n *\n * @return {{}}\n */\nstate.currentDefaults = () => Object.assign({}, currentLanguageData().defaults, globalDefaults);\n\n/**\n * Return the ordinal default-format.\n * First use the current language ordinal default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentOrdinalDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().ordinalFormat);\n\n/**\n * Return the byte default-format.\n * First use the current language byte default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentByteDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().byteFormat);\n\n/**\n * Return the percentage default-format.\n * First use the current language percentage default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentPercentageDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().percentageFormat);\n\n/**\n * Return the currency default-format.\n * First use the current language currency default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentCurrencyDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().currencyFormat);\n\n/**\n * Return the time default-format.\n * First use the current language currency default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentTimeDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().timeFormat);\n\n/**\n * Set the global formatting defaults.\n *\n * @param {{}|string} format - formatting options to use as defaults\n */\nstate.setDefaults = (format) => {\n    format = parsing.parseFormat(format);\n    if (validating.validateFormat(format)) {\n        globalDefaults = format;\n    }\n};\n\n//\n// Zero format\n//\n\n/**\n * Return the format string for 0.\n *\n * @return {string}\n */\nstate.getZeroFormat = () => zeroFormat;\n\n/**\n * Set a STRING to output when the value is 0.\n *\n * @param {{}|string} string - string to set\n */\nstate.setZeroFormat = (string) => zeroFormat = typeof(string) === \"string\" ? string : null;\n\n/**\n * Return true if a format for 0 has been set already.\n *\n * @return {boolean}\n */\nstate.hasZeroFormat = () => zeroFormat !== null;\n\n//\n// Getters/Setters\n//\n\n/**\n * Return the language data for the provided TAG.\n * Return the current language data if no tag is provided.\n *\n * Throw an error if the tag doesn't match any registered language.\n *\n * @param {string} [tag] - language tag of a registered language\n * @return {{}}\n */\nstate.languageData = (tag) => {\n    if (tag) {\n        if (languages[tag]) {\n            return languages[tag];\n        }\n        throw new Error(`Unknown tag \"${tag}\"`);\n    }\n\n    return currentLanguageData();\n};\n\n/**\n * Register the provided DATA as a language if and only if the data is valid.\n * If the data is not valid, an error is thrown.\n *\n * When USELANGUAGE is true, the registered language is then used.\n *\n * @param {{}} data - language data to register\n * @param {boolean} [useLanguage] - `true` if the provided data should become the current language\n */\nstate.registerLanguage = (data, useLanguage = false) => {\n    if (!validating.validateLanguage(data)) {\n        throw new Error(\"Invalid language data\");\n    }\n\n    languages[data.languageTag] = data;\n\n    if (useLanguage) {\n        chooseLanguage(data.languageTag);\n    }\n};\n\n/**\n * Set the current language according to TAG.\n * If TAG doesn't match a registered language, another language matching\n * the \"language\" part of the tag (according to BCP47: https://tools.ietf.org/rfc/bcp/bcp47.txt).\n * If none, the FALLBACKTAG is used. If the FALLBACKTAG doesn't match a register language,\n * `en-US` is finally used.\n *\n * @param tag\n * @param fallbackTag\n */\nstate.setLanguage = (tag, fallbackTag = enUS.languageTag) => {\n    if (!languages[tag]) {\n        let suffix = tag.split(\"-\")[0];\n\n        let matchingLanguageTag = Object.keys(languages).find(each => {\n            return each.split(\"-\")[0] === suffix;\n        });\n\n        if (!languages[matchingLanguageTag]) {\n            chooseLanguage(fallbackTag);\n            return;\n        }\n\n        chooseLanguage(matchingLanguageTag);\n        return;\n    }\n\n    chooseLanguage(tag);\n};\n\nstate.registerLanguage(enUS);\ncurrentLanguageTag = enUS.languageTag;\n\nmodule.exports = state;\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * Load languages matching TAGS. Silently pass over the failing load.\n *\n * We assume here that we are in a node environment, so we don't check for it.\n * @param {[String]} tags - list of tags to load\n * @param {Numbro} numbro - the numbro singleton\n */\nfunction loadLanguagesInNode(tags, numbro) {\n    tags.forEach((tag) => {\n        let data = undefined;\n        try {\n            data = require(`../languages/${tag}`);\n        } catch (e) {\n            console.error(`Unable to load \"${tag}\". No matching language file found.`); // eslint-disable-line no-console\n        }\n\n        if (data) {\n            numbro.registerLanguage(data);\n        }\n    });\n}\n\nmodule.exports = (numbro) => ({\n    loadLanguagesInNode: (tags) => loadLanguagesInNode(tags, numbro)\n});\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst BigNumber = require(\"bignumber.js\");\n\n/**\n * Add a number or a numbro to N.\n *\n * @param {Numbro} n - augend\n * @param {number|Numbro} other - addend\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction add(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.plus(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Subtract a number or a numbro from N.\n *\n * @param {Numbro} n - minuend\n * @param {number|Numbro} other - subtrahend\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction subtract(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.minus(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Multiply N by a number or a numbro.\n *\n * @param {Numbro} n - multiplicand\n * @param {number|Numbro} other - multiplier\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction multiply(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.times(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Divide N by a number or a numbro.\n *\n * @param {Numbro} n - dividend\n * @param {number|Numbro} other - divisor\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction divide(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.dividedBy(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Set N to the OTHER (or the value of OTHER when it's a numbro instance).\n *\n * @param {Numbro} n - numbro instance to mutate\n * @param {number|Numbro} other - new value to assign to N\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction set (n, other, numbro) {\n    let value = other;\n\n    if (numbro.isNumbro(other)) {\n        value = other._value;\n    }\n\n    n._value = value;\n    return n;\n}\n\n/**\n * Return the distance between N and OTHER.\n *\n * @param {Numbro} n\n * @param {number|Numbro} other\n * @param {numbro} numbro - numbro singleton\n * @return {number}\n */\nfunction difference(n, other, numbro) {\n    let clone = numbro(n._value);\n    subtract(clone, other, numbro);\n\n    return Math.abs(clone._value);\n}\n\nmodule.exports = numbro => ({\n    add: (n, other) => add(n, other, numbro),\n    subtract: (n, other) => subtract(n, other, numbro),\n    multiply: (n, other) => multiply(n, other, numbro),\n    divide: (n, other) => divide(n, other, numbro),\n    set: (n, other) => set(n, other, numbro),\n    difference: (n, other) => difference(n, other, numbro),\n    BigNumber: BigNumber\n});\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst VERSION = \"2.3.6\";\n\nconst globalState = require(\"./globalState\");\nconst validator = require(\"./validating\");\nconst loader = require(\"./loading\")(numbro);\nconst unformatter = require(\"./unformatting\");\nlet formatter = require(\"./formatting\")(numbro);\nlet manipulate = require(\"./manipulating\")(numbro);\nconst parsing = require(\"./parsing\");\n\nclass Numbro {\n    constructor(number) {\n        this._value = number;\n    }\n\n    clone() { return numbro(this._value); }\n\n    format(format = {}) { return formatter.format(this, format); }\n\n    formatCurrency(format) {\n        if (typeof format === \"string\") {\n            format = parsing.parseFormat(format);\n        }\n        format = formatter.formatOrDefault(format, globalState.currentCurrencyDefaultFormat());\n        format.output = \"currency\";\n        return formatter.format(this, format);\n    }\n\n    formatTime(format = {}) {\n        format.output = \"time\";\n        return formatter.format(this, format);\n    }\n\n    binaryByteUnits() { return formatter.getBinaryByteUnit(this);}\n\n    decimalByteUnits() { return formatter.getDecimalByteUnit(this);}\n\n    byteUnits() { return formatter.getByteUnit(this);}\n\n    difference(other) { return manipulate.difference(this, other); }\n\n    add(other) { return manipulate.add(this, other); }\n\n    subtract(other) { return manipulate.subtract(this, other); }\n\n    multiply(other) { return manipulate.multiply(this, other); }\n\n    divide(other) { return manipulate.divide(this, other); }\n\n    set(input) { return manipulate.set(this, normalizeInput(input)); }\n\n    value() { return this._value; }\n\n    valueOf() { return this._value; }\n}\n\n/**\n * Make its best to convert input into a number.\n *\n * @param {numbro|string|number} input - Input to convert\n * @return {number}\n */\nfunction normalizeInput(input) {\n    let result = input;\n    if (numbro.isNumbro(input)) {\n        result = input._value;\n    } else if (typeof input === \"string\") {\n        result = numbro.unformat(input);\n    } else if (isNaN(input)) {\n        result = NaN;\n    }\n\n    return result;\n}\n\nfunction numbro(input) {\n    return new Numbro(normalizeInput(input));\n}\n\nnumbro.version = VERSION;\n\nnumbro.isNumbro = function(object) {\n    return object instanceof Numbro;\n};\n\n//\n// `numbro` static methods\n//\n\nnumbro.language = globalState.currentLanguage;\nnumbro.registerLanguage = globalState.registerLanguage;\nnumbro.setLanguage = globalState.setLanguage;\nnumbro.languages = globalState.languages;\nnumbro.languageData = globalState.languageData;\nnumbro.zeroFormat = globalState.setZeroFormat;\nnumbro.defaultFormat = globalState.currentDefaults;\nnumbro.setDefaults = globalState.setDefaults;\nnumbro.defaultCurrencyFormat = globalState.currentCurrencyDefaultFormat;\nnumbro.validate = validator.validate;\nnumbro.loadLanguagesInNode = loader.loadLanguagesInNode;\nnumbro.unformat = unformatter.unformat;\nnumbro.BigNumber = manipulate.BigNumber;\n\nmodule.exports = numbro;\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * Parse the format STRING looking for a prefix. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parsePrefix(string, result) {\n    let match = string.match(/^{([^}]*)}/);\n    if (match) {\n        result.prefix = match[1];\n        return string.slice(match[0].length);\n    }\n\n    return string;\n}\n\n/**\n * Parse the format STRING looking for a postfix. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parsePostfix(string, result) {\n    let match = string.match(/{([^}]*)}$/);\n    if (match) {\n        result.postfix = match[1];\n\n        return string.slice(0, -match[0].length);\n    }\n\n    return string;\n}\n\n/**\n * Parse the format STRING looking for the output value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n */\nfunction parseOutput(string, result) {\n    if (string.indexOf(\"$\") !== -1) {\n        result.output = \"currency\";\n        return;\n    }\n\n    if (string.indexOf(\"%\") !== -1) {\n        result.output = \"percent\";\n        return;\n    }\n\n    if (string.indexOf(\"bd\") !== -1) {\n        result.output = \"byte\";\n        result.base = \"general\";\n        return;\n    }\n\n    if (string.indexOf(\"b\") !== -1) {\n        result.output = \"byte\";\n        result.base = \"binary\";\n        return;\n\n    }\n\n    if (string.indexOf(\"d\") !== -1) {\n        result.output = \"byte\";\n        result.base = \"decimal\";\n        return;\n\n    }\n\n    if (string.indexOf(\":\") !== -1) {\n        result.output = \"time\";\n        return;\n    }\n\n    if (string.indexOf(\"o\") !== -1) {\n        result.output = \"ordinal\";\n    }\n}\n\n/**\n * Parse the format STRING looking for the thousand separated value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseThousandSeparated(string, result) {\n    if (string.indexOf(\",\") !== -1) {\n        result.thousandSeparated = true;\n    }\n}\n\n/**\n * Parse the format STRING looking for the space separated value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseSpaceSeparated(string, result) {\n    if (string.indexOf(\" \") !== -1) {\n        result.spaceSeparated = true;\n        result.spaceSeparatedCurrency = true;\n\n        if (result.average || result.forceAverage) {\n            result.spaceSeparatedAbbreviation = true;\n        }\n    }\n}\n\n/**\n * Parse the format STRING looking for the total length. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseTotalLength(string, result) {\n    let match = string.match(/[1-9]+[0-9]*/);\n\n    if (match) {\n        result.totalLength = +match[0];\n    }\n}\n\n/**\n * Parse the format STRING looking for the characteristic length. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseCharacteristic(string, result) {\n    let characteristic = string.split(\".\")[0];\n    let match = characteristic.match(/0+/);\n    if (match) {\n        result.characteristic = match[0].length;\n    }\n}\n\n/**\n * Parse the format STRING looking for the mantissa length. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseMantissa(string, result) {\n    let mantissa = string.split(\".\")[1];\n    if (mantissa) {\n        let match = mantissa.match(/0+/);\n        if (match) {\n            result.mantissa = match[0].length;\n        }\n    }\n}\n\n/**\n * Parse the format STRING looking for a trimmed mantissa. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n */\nfunction parseTrimMantissa(string, result) {\n    const mantissa = string.split(\".\")[1];\n    if (mantissa) {\n        result.trimMantissa = mantissa.indexOf(\"[\") !== -1;\n    }\n}\n\n/**\n * Parse the format STRING looking for the average value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseAverage(string, result) {\n    if (string.indexOf(\"a\") !== -1) {\n        result.average = true;\n    }\n}\n\n/**\n * Parse the format STRING looking for a forced average precision. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseForceAverage(string, result) {\n    if (string.indexOf(\"K\") !== -1) {\n        result.forceAverage = \"thousand\";\n    } else if (string.indexOf(\"M\") !== -1) {\n        result.forceAverage = \"million\";\n    } else if (string.indexOf(\"B\") !== -1) {\n        result.forceAverage = \"billion\";\n    } else if (string.indexOf(\"T\") !== -1) {\n        result.forceAverage = \"trillion\";\n    }\n}\n\n/**\n * Parse the format STRING finding if the mantissa is optional. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseOptionalMantissa(string, result) {\n    if (string.match(/\\[\\.]/)) {\n        result.optionalMantissa = true;\n    } else if (string.match(/\\./)) {\n        result.optionalMantissa = false;\n    }\n}\n\n/**\n * Parse the format STRING finding if the characteristic is optional. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseOptionalCharacteristic(string, result) {\n    if (string.indexOf(\".\") !== -1) {\n        let characteristic = string.split(\".\")[0];\n        result.optionalCharacteristic = characteristic.indexOf(\"0\") === -1;\n    }\n}\n\n/**\n * Parse the format STRING looking for the negative format. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseNegative(string, result) {\n    if (string.match(/^\\+?\\([^)]*\\)$/)) {\n        result.negative = \"parenthesis\";\n    }\n    if (string.match(/^\\+?-/)) {\n        result.negative = \"sign\";\n    }\n}\n\n/**\n * Parse the format STRING finding if the sign is mandatory. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n */\nfunction parseForceSign(string, result) {\n    if (string.match(/^\\+/)) {\n        result.forceSign = true;\n    }\n}\n\n/**\n * Parse the format STRING and accumulating the values ie RESULT.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {NumbroFormat} - format\n */\nfunction parseFormat(string, result = {}) {\n    if (typeof string !== \"string\") {\n        return string;\n    }\n\n    string = parsePrefix(string, result);\n    string = parsePostfix(string, result);\n    parseOutput(string, result);\n    parseTotalLength(string, result);\n    parseCharacteristic(string, result);\n    parseOptionalCharacteristic(string, result);\n    parseAverage(string, result);\n    parseForceAverage(string, result);\n    parseMantissa(string, result);\n    parseOptionalMantissa(string, result);\n    parseTrimMantissa(string, result);\n    parseThousandSeparated(string, result);\n    parseSpaceSeparated(string, result);\n    parseNegative(string, result);\n    parseForceSign(string, result);\n\n    return result;\n}\n\nmodule.exports = {\n    parseFormat\n};\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst allSuffixes = [\n    {key: \"ZiB\", factor: Math.pow(1024, 7)},\n    {key: \"ZB\", factor: Math.pow(1000, 7)},\n    {key: \"YiB\", factor: Math.pow(1024, 8)},\n    {key: \"YB\", factor: Math.pow(1000, 8)},\n    {key: \"TiB\", factor: Math.pow(1024, 4)},\n    {key: \"TB\", factor: Math.pow(1000, 4)},\n    {key: \"PiB\", factor: Math.pow(1024, 5)},\n    {key: \"PB\", factor: Math.pow(1000, 5)},\n    {key: \"MiB\", factor: Math.pow(1024, 2)},\n    {key: \"MB\", factor: Math.pow(1000, 2)},\n    {key: \"KiB\", factor: Math.pow(1024, 1)},\n    {key: \"KB\", factor: Math.pow(1000, 1)},\n    {key: \"GiB\", factor: Math.pow(1024, 3)},\n    {key: \"GB\", factor: Math.pow(1000, 3)},\n    {key: \"EiB\", factor: Math.pow(1024, 6)},\n    {key: \"EB\", factor: Math.pow(1000, 6)},\n    {key: \"B\", factor: 1}\n];\n\n/**\n * Generate a RegExp where S get all RegExp specific characters escaped.\n *\n * @param {string} s - string representing a RegExp\n * @return {string}\n */\nfunction escapeRegExp(s) {\n    return s.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n}\n\n/**\n * Recursively compute the unformatted value.\n *\n * @param {string} inputString - string to unformat\n * @param {*} delimiters - Delimiters used to generate the inputString\n * @param {string} [currencySymbol] - symbol used for currency while generating the inputString\n * @param {function} ordinal - function used to generate an ordinal out of a number\n * @param {string} zeroFormat - string representing zero\n * @param {*} abbreviations - abbreviations used while generating the inputString\n * @param {NumbroFormat} format - format used while generating the inputString\n * @return {number|undefined}\n */\nfunction computeUnformattedValue(inputString, delimiters, currencySymbol = \"\", ordinal, zeroFormat, abbreviations, format) {\n    if (!isNaN(+inputString)) {\n        return +inputString;\n    }\n\n    let stripped = \"\";\n    // Negative\n\n    let newInput = inputString.replace(/(^[^(]*)\\((.*)\\)([^)]*$)/, \"$1$2$3\");\n\n    if (newInput !== inputString) {\n        return -1 * computeUnformattedValue(newInput, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n    }\n\n    // Byte\n\n    for (let i = 0; i < allSuffixes.length; i++) {\n        let suffix = allSuffixes[i];\n        stripped = inputString.replace(RegExp(`([0-9 ])(${suffix.key})$`), \"$1\");\n\n        if (stripped !== inputString) {\n            return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format) * suffix.factor;\n        }\n    }\n\n    // Percent\n\n    stripped = inputString.replace(\"%\", \"\");\n\n    if (stripped !== inputString) {\n        return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format) / 100;\n    }\n\n    // Ordinal\n\n    let possibleOrdinalValue = parseFloat(inputString);\n\n    if (isNaN(possibleOrdinalValue)) {\n        return undefined;\n    }\n\n    let ordinalString = ordinal(possibleOrdinalValue);\n    if (ordinalString && ordinalString !== \".\") { // if ordinal is \".\" it will be caught next round in the +inputString\n        stripped = inputString.replace(new RegExp(`${escapeRegExp(ordinalString)}$`), \"\");\n\n        if (stripped !== inputString) {\n            return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n        }\n    }\n\n    // Average\n\n    let inversedAbbreviations = {};\n    Object.keys(abbreviations).forEach((key) => {\n        inversedAbbreviations[abbreviations[key]] = key;\n    });\n\n    let abbreviationValues = Object.keys(inversedAbbreviations).sort().reverse();\n    let numberOfAbbreviations = abbreviationValues.length;\n\n    for (let i = 0; i < numberOfAbbreviations; i++) {\n        let value = abbreviationValues[i];\n        let key = inversedAbbreviations[value];\n\n        stripped = inputString.replace(value, \"\");\n        if (stripped !== inputString) {\n            let factor = undefined;\n            switch (key) { // eslint-disable-line default-case\n                case \"thousand\":\n                    factor = Math.pow(10, 3);\n                    break;\n                case \"million\":\n                    factor = Math.pow(10, 6);\n                    break;\n                case \"billion\":\n                    factor = Math.pow(10, 9);\n                    break;\n                case \"trillion\":\n                    factor = Math.pow(10, 12);\n                    break;\n            }\n            return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format) * factor;\n        }\n    }\n\n    return undefined;\n}\n\n/**\n * Removes in one pass all formatting symbols.\n *\n * @param {string} inputString - string to unformat\n * @param {*} delimiters - Delimiters used to generate the inputString\n * @param {string} [currencySymbol] - symbol used for currency while generating the inputString\n * @return {string}\n */\nfunction removeFormattingSymbols(inputString, delimiters, currencySymbol = \"\") {\n    // Currency\n\n    let stripped = inputString.replace(currencySymbol, \"\");\n\n    // Thousand separators\n\n    stripped = stripped.replace(new RegExp(`([0-9])${escapeRegExp(delimiters.thousands)}([0-9])`, \"g\"), \"$1$2\");\n\n    // Decimal\n\n    stripped = stripped.replace(delimiters.decimal, \".\");\n\n    return stripped;\n}\n\n/**\n * Unformat a numbro-generated string to retrieve the original value.\n *\n * @param {string} inputString - string to unformat\n * @param {*} delimiters - Delimiters used to generate the inputString\n * @param {string} [currencySymbol] - symbol used for currency while generating the inputString\n * @param {function} ordinal - function used to generate an ordinal out of a number\n * @param {string} zeroFormat - string representing zero\n * @param {*} abbreviations - abbreviations used while generating the inputString\n * @param {NumbroFormat} format - format used while generating the inputString\n * @return {number|undefined}\n */\nfunction unformatValue(inputString, delimiters, currencySymbol = \"\", ordinal, zeroFormat, abbreviations, format) {\n    if (inputString === \"\") {\n        return undefined;\n    }\n\n    // Zero Format\n\n    if (inputString === zeroFormat) {\n        return 0;\n    }\n\n    let value = removeFormattingSymbols(inputString, delimiters, currencySymbol);\n    return computeUnformattedValue(value, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n}\n\n/**\n * Check if the INPUTSTRING represents a time.\n *\n * @param {string} inputString - string to check\n * @param {*} delimiters - Delimiters used while generating the inputString\n * @return {boolean}\n */\nfunction matchesTime(inputString, delimiters) {\n    let separators = inputString.indexOf(\":\") && delimiters.thousands !== \":\";\n\n    if (!separators) {\n        return false;\n    }\n\n    let segments = inputString.split(\":\");\n    if (segments.length !== 3) {\n        return false;\n    }\n\n    let hours = +segments[0];\n    let minutes = +segments[1];\n    let seconds = +segments[2];\n\n    return !isNaN(hours) && !isNaN(minutes) && !isNaN(seconds);\n}\n\n/**\n * Unformat a numbro-generated string representing a time to retrieve the original value.\n *\n * @param {string} inputString - string to unformat\n * @return {number}\n */\nfunction unformatTime(inputString) {\n    let segments = inputString.split(\":\");\n\n    let hours = +segments[0];\n    let minutes = +segments[1];\n    let seconds = +segments[2];\n\n    return seconds + 60 * minutes + 3600 * hours;\n}\n\n/**\n * Unformat a numbro-generated string to retrieve the original value.\n *\n * @param {string} inputString - string to unformat\n * @param {NumbroFormat} format - format used  while generating the inputString\n * @return {number}\n */\nfunction unformat(inputString, format) {\n    // Avoid circular references\n    const globalState = require(\"./globalState\");\n\n    let delimiters = globalState.currentDelimiters();\n    let currencySymbol = globalState.currentCurrency().symbol;\n    let ordinal = globalState.currentOrdinal();\n    let zeroFormat = globalState.getZeroFormat();\n    let abbreviations = globalState.currentAbbreviations();\n\n    let value = undefined;\n\n    if (typeof inputString === \"string\") {\n        if (matchesTime(inputString, delimiters)) {\n            value = unformatTime(inputString);\n        } else {\n            value = unformatValue(inputString, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n        }\n    } else if (typeof inputString === \"number\") {\n        value = inputString;\n    } else {\n        return undefined;\n    }\n\n    if (value === undefined) {\n        return undefined;\n    }\n\n    return value;\n}\n\nmodule.exports = {\n    unformat\n};\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nlet unformatter = require(\"./unformatting\");\n\n// Simplified regexp supporting only `language`, `script`, and `region`\nconst bcp47RegExp = /^[a-z]{2,3}(-[a-zA-Z]{4})?(-([A-Z]{2}|[0-9]{3}))?$/;\n\nconst validOutputValues = [\n    \"currency\",\n    \"percent\",\n    \"byte\",\n    \"time\",\n    \"ordinal\",\n    \"number\"\n];\n\nconst validForceAverageValues = [\n    \"trillion\",\n    \"billion\",\n    \"million\",\n    \"thousand\"\n];\n\nconst validCurrencyPosition = [\n    \"prefix\",\n    \"infix\",\n    \"postfix\"\n];\n\nconst validNegativeValues = [\n    \"sign\",\n    \"parenthesis\"\n];\n\nconst validMandatoryAbbreviations = {\n    type: \"object\",\n    children: {\n        thousand: {\n            type: \"string\",\n            mandatory: true\n        },\n        million: {\n            type: \"string\",\n            mandatory: true\n        },\n        billion: {\n            type: \"string\",\n            mandatory: true\n        },\n        trillion: {\n            type: \"string\",\n            mandatory: true\n        }\n    },\n    mandatory: true\n};\n\nconst validAbbreviations = {\n    type: \"object\",\n    children: {\n        thousand: \"string\",\n        million: \"string\",\n        billion: \"string\",\n        trillion: \"string\"\n    }\n};\n\nconst validBaseValues = [\n    \"decimal\",\n    \"binary\",\n    \"general\"\n];\n\nconst validFormat = {\n    output: {\n        type: \"string\",\n        validValues: validOutputValues\n    },\n    base: {\n        type: \"string\",\n        validValues: validBaseValues,\n        restriction: (number, format) => format.output === \"byte\",\n        message: \"`base` must be provided only when the output is `byte`\",\n        mandatory: (format) => format.output === \"byte\"\n    },\n    characteristic: {\n        type: \"number\",\n        restriction: (number) => number >= 0,\n        message: \"value must be positive\"\n    },\n    prefix: \"string\",\n    postfix: \"string\",\n    forceAverage: {\n        type: \"string\",\n        validValues: validForceAverageValues\n    },\n    average: \"boolean\",\n    lowPrecision: {\n        type: \"boolean\",\n        restriction: (number, format) => format.average === true,\n        message: \"`lowPrecision` must be provided only when the option `average` is set\"\n    },\n    currencyPosition: {\n        type: \"string\",\n        validValues: validCurrencyPosition\n    },\n    currencySymbol: \"string\",\n    totalLength: {\n        type: \"number\",\n        restrictions: [\n            {\n                restriction: (number) => number >= 0,\n                message: \"value must be positive\"\n            },\n            {\n                restriction: (number, format) => !format.exponential,\n                message: \"`totalLength` is incompatible with `exponential`\"\n            }\n        ]\n    },\n    mantissa: {\n        type: \"number\",\n        restriction: (number) => number >= 0,\n        message: \"value must be positive\"\n    },\n    optionalMantissa: \"boolean\",\n    trimMantissa: \"boolean\",\n    roundingFunction: \"function\",\n    optionalCharacteristic: \"boolean\",\n    thousandSeparated: \"boolean\",\n    spaceSeparated: \"boolean\",\n    spaceSeparatedCurrency: \"boolean\",\n    spaceSeparatedAbbreviation: \"boolean\",\n    abbreviations: validAbbreviations,\n    negative: {\n        type: \"string\",\n        validValues: validNegativeValues\n    },\n    forceSign: \"boolean\",\n    exponential: {\n        type: \"boolean\"\n    },\n    prefixSymbol: {\n        type: \"boolean\",\n        restriction: (number, format) => format.output === \"percent\",\n        message: \"`prefixSymbol` can be provided only when the output is `percent`\"\n    }\n};\n\nconst validLanguage = {\n    languageTag: {\n        type: \"string\",\n        mandatory: true,\n        restriction: (tag) => {\n            return tag.match(bcp47RegExp);\n        },\n        message: \"the language tag must follow the BCP 47 specification (see https://tools.ieft.org/html/bcp47)\"\n    },\n    delimiters: {\n        type: \"object\",\n        children: {\n            thousands: \"string\",\n            decimal: \"string\",\n            thousandsSize: \"number\"\n        },\n        mandatory: true\n    },\n    abbreviations: validMandatoryAbbreviations,\n    spaceSeparated: \"boolean\",\n    spaceSeparatedCurrency: \"boolean\",\n    ordinal: {\n        type: \"function\",\n        mandatory: true\n    },\n    bytes: {\n        type: \"object\",\n        children: {\n            binarySuffixes: \"object\",\n            decimalSuffixes: \"object\"\n        }\n    },\n    currency: {\n        type: \"object\",\n        children: {\n            symbol: \"string\",\n            position: \"string\",\n            code: \"string\"\n        },\n        mandatory: true\n    },\n    defaults: \"format\",\n    ordinalFormat: \"format\",\n    byteFormat: \"format\",\n    percentageFormat: \"format\",\n    currencyFormat: \"format\",\n    timeDefaults: \"format\",\n    formats: {\n        type: \"object\",\n        children: {\n            fourDigits: {\n                type: \"format\",\n                mandatory: true\n            },\n            fullWithTwoDecimals: {\n                type: \"format\",\n                mandatory: true\n            },\n            fullWithTwoDecimalsNoCurrency: {\n                type: \"format\",\n                mandatory: true\n            },\n            fullWithNoDecimals: {\n                type: \"format\",\n                mandatory: true\n            }\n        }\n    }\n};\n\n/**\n * Check the validity of the provided input and format.\n * The check is NOT lazy.\n *\n * @param {string|number|Numbro} input - input to check\n * @param {NumbroFormat} format - format to check\n * @return {boolean} True when everything is correct\n */\nfunction validate(input, format) {\n    let validInput = validateInput(input);\n    let isFormatValid = validateFormat(format);\n\n    return validInput && isFormatValid;\n}\n\n/**\n * Check the validity of the numbro input.\n *\n * @param {string|number|Numbro} input - input to check\n * @return {boolean} True when everything is correct\n */\nfunction validateInput(input) {\n    let value = unformatter.unformat(input);\n\n    return value !== undefined;\n}\n\n/**\n * Check the validity of the provided format TOVALIDATE against SPEC.\n *\n * @param {NumbroFormat} toValidate - format to check\n * @param {*} spec - specification against which to check\n * @param {string} prefix - prefix use for error messages\n * @param {boolean} skipMandatoryCheck - `true` when the check for mandatory key must be skipped\n * @return {boolean} True when everything is correct\n */\nfunction validateSpec(toValidate, spec, prefix, skipMandatoryCheck = false) {\n    let results = Object.keys(toValidate).map((key) => {\n        if (!spec[key]) {\n            console.error(`${prefix} Invalid key: ${key}`); // eslint-disable-line no-console\n            return false;\n        }\n\n        let value = toValidate[key];\n        let data = spec[key];\n\n        if (typeof data === \"string\") {\n            data = {type: data};\n        }\n\n        if (data.type === \"format\") { // all formats are partial (a.k.a will be merged with some default values) thus no need to check mandatory values\n            let valid = validateSpec(value, validFormat, `[Validate ${key}]`, true);\n\n            if (!valid) {\n                return false;\n            }\n        } else if (typeof value !== data.type) {\n            console.error(`${prefix} ${key} type mismatched: \"${data.type}\" expected, \"${typeof value}\" provided`); // eslint-disable-line no-console\n            return false;\n        }\n\n        if (data.restrictions && data.restrictions.length) {\n            let length = data.restrictions.length;\n            for (let i = 0; i < length; i++) {\n                let {restriction, message} = data.restrictions[i];\n                if (!restriction(value, toValidate)) {\n                    console.error(`${prefix} ${key} invalid value: ${message}`); // eslint-disable-line no-console\n                    return false;\n                }\n            }\n        }\n\n        if (data.restriction && !data.restriction(value, toValidate)) {\n            console.error(`${prefix} ${key} invalid value: ${data.message}`); // eslint-disable-line no-console\n            return false;\n        }\n\n        if (data.validValues && data.validValues.indexOf(value) === -1) {\n            console.error(`${prefix} ${key} invalid value: must be among ${JSON.stringify(data.validValues)}, \"${value}\" provided`); // eslint-disable-line no-console\n            return false;\n        }\n\n        if (data.children) {\n            let valid = validateSpec(value, data.children, `[Validate ${key}]`);\n\n            if (!valid) {\n                return false;\n            }\n        }\n\n        return true;\n    });\n\n    if (!skipMandatoryCheck) {\n        results.push(...Object.keys(spec).map((key) => {\n            let data = spec[key];\n            if (typeof data === \"string\") {\n                data = {type: data};\n            }\n\n            if (data.mandatory) {\n                let mandatory = data.mandatory;\n                if (typeof mandatory === \"function\") {\n                    mandatory = mandatory(toValidate);\n                }\n\n                if (mandatory && toValidate[key] === undefined) {\n                    console.error(`${prefix} Missing mandatory key \"${key}\"`); // eslint-disable-line no-console\n                    return false;\n                }\n            }\n\n            return true;\n        }));\n    }\n\n    return results.reduce((acc, current) => {\n        return acc && current;\n    }, true);\n}\n\n/**\n * Check the provided FORMAT.\n *\n * @param {NumbroFormat} format - format to check\n * @return {boolean}\n */\nfunction validateFormat(format) {\n    return validateSpec(format, validFormat, \"[Validate format]\");\n}\n\n/**\n * Check the provided LANGUAGE.\n *\n * @param {NumbroLanguage} language - language to check\n * @return {boolean}\n */\nfunction validateLanguage(language) {\n    return validateSpec(language, validLanguage, \"[Validate language]\");\n}\n\nmodule.exports = {\n    validate,\n    validateFormat,\n    validateInput,\n    validateLanguage\n};\n","/** @license React v17.0.2\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';require(\"object-assign\");var f=require(\"react\"),g=60103;exports.Fragment=60107;if(\"function\"===typeof Symbol&&Symbol.for){var h=Symbol.for;g=h(\"react.element\");exports.Fragment=h(\"react.fragment\")}var m=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,n=Object.prototype.hasOwnProperty,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,k){var b,d={},e=null,l=null;void 0!==k&&(e=\"\"+k);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(l=a.ref);for(b in a)n.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:g,type:c,key:e,ref:l,props:d,_owner:m.current}}exports.jsx=q;exports.jsxs=q;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","import { sortAll } from './utils.js';\nimport drain from 'it-drain';\nimport filter from 'it-filter';\nimport take from 'it-take';\nexport class BaseDatastore {\n  open() {\n    return Promise.reject(new Error('.open is not implemented'));\n  }\n  close() {\n    return Promise.reject(new Error('.close is not implemented'));\n  }\n  put(key, val, options) {\n    return Promise.reject(new Error('.put is not implemented'));\n  }\n  get(key, options) {\n    return Promise.reject(new Error('.get is not implemented'));\n  }\n  has(key, options) {\n    return Promise.reject(new Error('.has is not implemented'));\n  }\n  delete(key, options) {\n    return Promise.reject(new Error('.delete is not implemented'));\n  }\n  async *putMany(source, options = {}) {\n    for await (const {key, value} of source) {\n      await this.put(key, value, options);\n      yield {\n        key,\n        value\n      };\n    }\n  }\n  async *getMany(source, options = {}) {\n    for await (const key of source) {\n      yield this.get(key, options);\n    }\n  }\n  async *deleteMany(source, options = {}) {\n    for await (const key of source) {\n      await this.delete(key, options);\n      yield key;\n    }\n  }\n  batch() {\n    let puts = [];\n    let dels = [];\n    return {\n      put(key, value) {\n        puts.push({\n          key,\n          value\n        });\n      },\n      delete(key) {\n        dels.push(key);\n      },\n      commit: async options => {\n        await drain(this.putMany(puts, options));\n        puts = [];\n        await drain(this.deleteMany(dels, options));\n        dels = [];\n      }\n    };\n  }\n  async *_all(q, options) {\n    throw new Error('._all is not implemented');\n  }\n  async *_allKeys(q, options) {\n    throw new Error('._allKeys is not implemented');\n  }\n  query(q, options) {\n    let it = this._all(q, options);\n    if (q.prefix != null) {\n      it = filter(it, e => e.key.toString().startsWith(q.prefix));\n    }\n    if (Array.isArray(q.filters)) {\n      it = q.filters.reduce((it, f) => filter(it, f), it);\n    }\n    if (Array.isArray(q.orders)) {\n      it = q.orders.reduce((it, f) => sortAll(it, f), it);\n    }\n    if (q.offset != null) {\n      let i = 0;\n      it = filter(it, () => i++ >= q.offset);\n    }\n    if (q.limit != null) {\n      it = take(it, q.limit);\n    }\n    return it;\n  }\n  queryKeys(q, options) {\n    let it = this._allKeys(q, options);\n    if (q.prefix != null) {\n      it = filter(it, key => key.toString().startsWith(q.prefix));\n    }\n    if (Array.isArray(q.filters)) {\n      it = q.filters.reduce((it, f) => filter(it, f), it);\n    }\n    if (Array.isArray(q.orders)) {\n      it = q.orders.reduce((it, f) => sortAll(it, f), it);\n    }\n    if (q.offset != null) {\n      let i = 0;\n      it = filter(it, () => i++ >= q.offset);\n    }\n    if (q.limit != null) {\n      it = take(it, q.limit);\n    }\n    return it;\n  }\n}","import errCode from 'err-code';\nexport function dbOpenFailedError(err) {\n  err = err || new Error('Cannot open database');\n  return errCode(err, 'ERR_DB_OPEN_FAILED');\n}\nexport function dbDeleteFailedError(err) {\n  err = err || new Error('Delete failed');\n  return errCode(err, 'ERR_DB_DELETE_FAILED');\n}\nexport function dbWriteFailedError(err) {\n  err = err || new Error('Write failed');\n  return errCode(err, 'ERR_DB_WRITE_FAILED');\n}\nexport function notFoundError(err) {\n  err = err || new Error('Not Found');\n  return errCode(err, 'ERR_NOT_FOUND');\n}\nexport function abortedError(err) {\n  err = err || new Error('Aborted');\n  return errCode(err, 'ERR_ABORTED');\n}","import { BaseDatastore } from './base.js';\nimport map from 'it-map';\nimport { pipe } from 'it-pipe';\nexport class KeyTransformDatastore extends BaseDatastore {\n  constructor(child, transform) {\n    super();\n    this.child = child;\n    this.transform = transform;\n  }\n  open() {\n    return this.child.open();\n  }\n  put(key, val, options) {\n    return this.child.put(this.transform.convert(key), val, options);\n  }\n  get(key, options) {\n    return this.child.get(this.transform.convert(key), options);\n  }\n  has(key, options) {\n    return this.child.has(this.transform.convert(key), options);\n  }\n  delete(key, options) {\n    return this.child.delete(this.transform.convert(key), options);\n  }\n  async *putMany(source, options = {}) {\n    const transform = this.transform;\n    const child = this.child;\n    yield* pipe(source, async function* (source) {\n      yield* map(source, ({key, value}) => ({\n        key: transform.convert(key),\n        value\n      }));\n    }, async function* (source) {\n      yield* child.putMany(source, options);\n    }, async function* (source) {\n      yield* map(source, ({key, value}) => ({\n        key: transform.invert(key),\n        value\n      }));\n    });\n  }\n  async *getMany(source, options = {}) {\n    const transform = this.transform;\n    const child = this.child;\n    yield* pipe(source, async function* (source) {\n      yield* map(source, key => transform.convert(key));\n    }, async function* (source) {\n      yield* child.getMany(source, options);\n    });\n  }\n  async *deleteMany(source, options = {}) {\n    const transform = this.transform;\n    const child = this.child;\n    yield* pipe(source, async function* (source) {\n      yield* map(source, key => transform.convert(key));\n    }, async function* (source) {\n      yield* child.deleteMany(source, options);\n    }, async function* (source) {\n      yield* map(source, key => transform.invert(key));\n    });\n  }\n  batch() {\n    const b = this.child.batch();\n    return {\n      put: (key, value) => {\n        b.put(this.transform.convert(key), value);\n      },\n      delete: key => {\n        b.delete(this.transform.convert(key));\n      },\n      commit: options => {\n        return b.commit(options);\n      }\n    };\n  }\n  query(q, options) {\n    const query = { ...q };\n    query.filters = (query.filters || []).map(filter => {\n      return ({key, value}) => filter({\n        key: this.transform.convert(key),\n        value\n      });\n    });\n    const {prefix} = q;\n    if (prefix != null && prefix !== '/') {\n      delete query.prefix;\n      query.filters.push(({key}) => {\n        return this.transform.invert(key).toString().startsWith(prefix);\n      });\n    }\n    if (query.orders) {\n      query.orders = query.orders.map(order => {\n        return (a, b) => order({\n          key: this.transform.invert(a.key),\n          value: a.value\n        }, {\n          key: this.transform.invert(b.key),\n          value: b.value\n        });\n      });\n    }\n    return map(this.child.query(query, options), ({key, value}) => {\n      return {\n        key: this.transform.invert(key),\n        value\n      };\n    });\n  }\n  queryKeys(q, options) {\n    const query = { ...q };\n    query.filters = (query.filters || []).map(filter => {\n      return key => filter(this.transform.convert(key));\n    });\n    const {prefix} = q;\n    if (prefix != null && prefix !== '/') {\n      delete query.prefix;\n      query.filters.push(key => {\n        return this.transform.invert(key).toString().startsWith(prefix);\n      });\n    }\n    if (query.orders) {\n      query.orders = query.orders.map(order => {\n        return (a, b) => order(this.transform.invert(a), this.transform.invert(b));\n      });\n    }\n    return map(this.child.queryKeys(query, options), key => {\n      return this.transform.invert(key);\n    });\n  }\n  close() {\n    return this.child.close();\n  }\n}","import { BaseDatastore } from './base.js';\nimport { Key } from 'interface-datastore/key';\nimport * as Errors from './errors.js';\nexport class MemoryDatastore extends BaseDatastore {\n  constructor() {\n    super();\n    this.data = {};\n  }\n  open() {\n    return Promise.resolve();\n  }\n  close() {\n    return Promise.resolve();\n  }\n  async put(key, val) {\n    this.data[key.toString()] = val;\n  }\n  async get(key) {\n    const exists = await this.has(key);\n    if (!exists)\n      throw Errors.notFoundError();\n    return this.data[key.toString()];\n  }\n  async has(key) {\n    return this.data[key.toString()] !== undefined;\n  }\n  async delete(key) {\n    delete this.data[key.toString()];\n  }\n  async *_all() {\n    yield* Object.entries(this.data).map(([key, value]) => ({\n      key: new Key(key),\n      value\n    }));\n  }\n  async *_allKeys() {\n    yield* Object.entries(this.data).map(([key]) => new Key(key));\n  }\n}","import filter from 'it-filter';\nimport take from 'it-take';\nimport merge from 'it-merge';\nimport { BaseDatastore } from './base.js';\nimport * as Errors from './errors.js';\nimport { sortAll } from './utils.js';\nexport class MountDatastore extends BaseDatastore {\n  constructor(mounts) {\n    super();\n    this.mounts = mounts.slice();\n  }\n  async open() {\n    await Promise.all(this.mounts.map(m => m.datastore.open()));\n  }\n  _lookup(key) {\n    for (const mount of this.mounts) {\n      if (mount.prefix.toString() === key.toString() || mount.prefix.isAncestorOf(key)) {\n        return {\n          datastore: mount.datastore,\n          mountpoint: mount.prefix\n        };\n      }\n    }\n  }\n  put(key, value, options) {\n    const match = this._lookup(key);\n    if (match == null) {\n      throw Errors.dbWriteFailedError(new Error('No datastore mounted for this key'));\n    }\n    return match.datastore.put(key, value, options);\n  }\n  get(key, options) {\n    const match = this._lookup(key);\n    if (match == null) {\n      throw Errors.notFoundError(new Error('No datastore mounted for this key'));\n    }\n    return match.datastore.get(key, options);\n  }\n  has(key, options) {\n    const match = this._lookup(key);\n    if (match == null) {\n      return Promise.resolve(false);\n    }\n    return match.datastore.has(key, options);\n  }\n  delete(key, options) {\n    const match = this._lookup(key);\n    if (match == null) {\n      throw Errors.dbDeleteFailedError(new Error('No datastore mounted for this key'));\n    }\n    return match.datastore.delete(key, options);\n  }\n  async close() {\n    await Promise.all(this.mounts.map(m => {\n      return m.datastore.close();\n    }));\n  }\n  batch() {\n    const batchMounts = {};\n    const lookup = key => {\n      const match = this._lookup(key);\n      if (match == null) {\n        throw new Error('No datastore mounted for this key');\n      }\n      const m = match.mountpoint.toString();\n      if (batchMounts[m] == null) {\n        batchMounts[m] = match.datastore.batch();\n      }\n      return { batch: batchMounts[m] };\n    };\n    return {\n      put: (key, value) => {\n        const match = lookup(key);\n        match.batch.put(key, value);\n      },\n      delete: key => {\n        const match = lookup(key);\n        match.batch.delete(key);\n      },\n      commit: async options => {\n        await Promise.all(Object.keys(batchMounts).map(p => batchMounts[p].commit(options)));\n      }\n    };\n  }\n  query(q, options) {\n    const qs = this.mounts.map(m => {\n      return m.datastore.query({\n        prefix: q.prefix,\n        filters: q.filters\n      }, options);\n    });\n    let it = merge(...qs);\n    if (q.filters)\n      q.filters.forEach(f => {\n        it = filter(it, f);\n      });\n    if (q.orders)\n      q.orders.forEach(o => {\n        it = sortAll(it, o);\n      });\n    if (q.offset != null) {\n      let i = 0;\n      it = filter(it, () => i++ >= q.offset);\n    }\n    if (q.limit != null)\n      it = take(it, q.limit);\n    return it;\n  }\n  queryKeys(q, options) {\n    const qs = this.mounts.map(m => {\n      return m.datastore.queryKeys({\n        prefix: q.prefix,\n        filters: q.filters\n      }, options);\n    });\n    let it = merge(...qs);\n    if (q.filters)\n      q.filters.forEach(f => {\n        it = filter(it, f);\n      });\n    if (q.orders)\n      q.orders.forEach(o => {\n        it = sortAll(it, o);\n      });\n    if (q.offset != null) {\n      let i = 0;\n      it = filter(it, () => i++ >= q.offset);\n    }\n    if (q.limit != null)\n      it = take(it, q.limit);\n    return it;\n  }\n}","import { Key } from 'interface-datastore';\nimport { KeyTransformDatastore } from './keytransform.js';\nexport class NamespaceDatastore extends KeyTransformDatastore {\n  constructor(child, prefix) {\n    super(child, {\n      convert(key) {\n        return prefix.child(key);\n      },\n      invert(key) {\n        if (prefix.toString() === '/') {\n          return key;\n        }\n        if (!prefix.isAncestorOf(key)) {\n          throw new Error(`Expected prefix: (${ prefix.toString() }) in key: ${ key.toString() }`);\n        }\n        return new Key(key.toString().slice(prefix.toString().length), false);\n      }\n    });\n  }\n}","import { Key } from 'interface-datastore/key';\nimport readme from './shard-readme.js';\nexport const PREFIX = '/repo/flatfs/shard/';\nexport const SHARDING_FN = 'SHARDING';\nexport const README_FN = '_README';\nexport class ShardBase {\n  constructor(param) {\n    this.param = param;\n    this.name = 'base';\n    this._padding = '';\n  }\n  fun(s) {\n    return 'implement me';\n  }\n  toString() {\n    return `${ PREFIX }v1/${ this.name }/${ this.param }`;\n  }\n}\nexport class Prefix extends ShardBase {\n  constructor(prefixLen) {\n    super(prefixLen);\n    this._padding = ''.padStart(prefixLen, '_');\n    this.name = 'prefix';\n  }\n  fun(noslash) {\n    return (noslash + this._padding).slice(0, this.param);\n  }\n}\nexport class Suffix extends ShardBase {\n  constructor(suffixLen) {\n    super(suffixLen);\n    this._padding = ''.padStart(suffixLen, '_');\n    this.name = 'suffix';\n  }\n  fun(noslash) {\n    const s = this._padding + noslash;\n    return s.slice(s.length - this.param);\n  }\n}\nexport class NextToLast extends ShardBase {\n  constructor(suffixLen) {\n    super(suffixLen);\n    this._padding = ''.padStart(suffixLen + 1, '_');\n    this.name = 'next-to-last';\n  }\n  fun(noslash) {\n    const s = this._padding + noslash;\n    const offset = s.length - this.param - 1;\n    return s.slice(offset, offset + this.param);\n  }\n}\nexport function parseShardFun(str) {\n  str = str.trim();\n  if (str.length === 0) {\n    throw new Error('empty shard string');\n  }\n  if (!str.startsWith(PREFIX)) {\n    throw new Error(`invalid or no path prefix: ${ str }`);\n  }\n  const parts = str.slice(PREFIX.length).split('/');\n  const version = parts[0];\n  if (version !== 'v1') {\n    throw new Error(`expect 'v1' version, got '${ version }'`);\n  }\n  const name = parts[1];\n  if (!parts[2]) {\n    throw new Error('missing param');\n  }\n  const param = parseInt(parts[2], 10);\n  switch (name) {\n  case 'prefix':\n    return new Prefix(param);\n  case 'suffix':\n    return new Suffix(param);\n  case 'next-to-last':\n    return new NextToLast(param);\n  default:\n    throw new Error(`unkown sharding function: ${ name }`);\n  }\n}\nexport const readShardFun = async (path, store) => {\n  const key = new Key(path).child(new Key(SHARDING_FN));\n  const get = typeof store.getRaw === 'function' ? store.getRaw.bind(store) : store.get.bind(store);\n  const res = await get(key);\n  return parseShardFun(new TextDecoder().decode(res || '').trim());\n};\nexport {\n  default as readme\n} from './shard-readme.js';","import { Key } from 'interface-datastore';\nimport {\n  readShardFun,\n  SHARDING_FN,\n  README_FN,\n  readme\n} from './shard.js';\nimport { BaseDatastore } from './base.js';\nimport { KeyTransformDatastore } from './keytransform.js';\nimport * as Errors from './errors.js';\nconst shardKey = new Key(SHARDING_FN);\nconst shardReadmeKey = new Key(README_FN);\nexport class ShardingDatastore extends BaseDatastore {\n  constructor(store, shard) {\n    super();\n    this.child = new KeyTransformDatastore(store, {\n      convert: this._convertKey.bind(this),\n      invert: this._invertKey.bind(this)\n    });\n    this.shard = shard;\n  }\n  async open() {\n    await this.child.open();\n    this.shard = await ShardingDatastore.create(this.child, this.shard);\n  }\n  _convertKey(key) {\n    const s = key.toString();\n    if (s === shardKey.toString() || s === shardReadmeKey.toString()) {\n      return key;\n    }\n    const parent = new Key(this.shard.fun(s));\n    return parent.child(key);\n  }\n  _invertKey(key) {\n    const s = key.toString();\n    if (s === shardKey.toString() || s === shardReadmeKey.toString()) {\n      return key;\n    }\n    return Key.withNamespaces(key.list().slice(1));\n  }\n  static async createOrOpen(store, shard) {\n    try {\n      await ShardingDatastore.create(store, shard);\n    } catch (err) {\n      if (err && err.message !== 'datastore exists')\n        throw err;\n    }\n    return ShardingDatastore.open(store);\n  }\n  static async open(store) {\n    const shard = await readShardFun('/', store);\n    return new ShardingDatastore(store, shard);\n  }\n  static async create(store, shard) {\n    const hasShard = await store.has(shardKey);\n    if (!hasShard && !shard) {\n      throw Errors.dbOpenFailedError(Error('Shard is required when datastore doesn\\'t have a shard key already.'));\n    }\n    if (!hasShard) {\n      const put = typeof store.putRaw === 'function' ? store.putRaw.bind(store) : store.put.bind(store);\n      await Promise.all([\n        put(shardKey, new TextEncoder().encode(shard.toString() + '\\n')),\n        put(shardReadmeKey, new TextEncoder().encode(readme))\n      ]);\n      return shard;\n    }\n    const diskShard = await readShardFun('/', store);\n    const a = (diskShard || '').toString();\n    const b = shard.toString();\n    if (a !== b) {\n      throw new Error(`specified fun ${ b } does not match repo shard fun ${ a }`);\n    }\n    return diskShard;\n  }\n  put(key, val, options) {\n    return this.child.put(key, val, options);\n  }\n  get(key, options) {\n    return this.child.get(key, options);\n  }\n  has(key, options) {\n    return this.child.has(key, options);\n  }\n  delete(key, options) {\n    return this.child.delete(key, options);\n  }\n  async *putMany(source, options = {}) {\n    yield* this.child.putMany(source, options);\n  }\n  async *getMany(source, options = {}) {\n    yield* this.child.getMany(source, options);\n  }\n  async *deleteMany(source, options = {}) {\n    yield* this.child.deleteMany(source, options);\n  }\n  batch() {\n    return this.child.batch();\n  }\n  query(q, options) {\n    const tq = {\n      ...q,\n      filters: [\n        ({key}) => key.toString() !== shardKey.toString(),\n        ({key}) => key.toString() !== shardReadmeKey.toString()\n      ].concat(q.filters || [])\n    };\n    return this.child.query(tq, options);\n  }\n  queryKeys(q, options) {\n    const tq = {\n      ...q,\n      filters: [\n        key => key.toString() !== shardKey.toString(),\n        key => key.toString() !== shardReadmeKey.toString()\n      ].concat(q.filters || [])\n    };\n    return this.child.queryKeys(tq, options);\n  }\n  close() {\n    return this.child.close();\n  }\n}","import { BaseDatastore } from './base.js';\nimport * as Errors from './errors.js';\nimport debug from 'debug';\nimport pushable from 'it-pushable';\nimport drain from 'it-drain';\nconst log = debug('datastore:core:tiered');\nexport class TieredDatastore extends BaseDatastore {\n  constructor(stores) {\n    super();\n    this.stores = stores.slice();\n  }\n  async open() {\n    try {\n      await Promise.all(this.stores.map(store => store.open()));\n    } catch (err) {\n      throw Errors.dbOpenFailedError();\n    }\n  }\n  async put(key, value) {\n    try {\n      await Promise.all(this.stores.map(store => store.put(key, value)));\n    } catch (err) {\n      throw Errors.dbWriteFailedError();\n    }\n  }\n  async get(key, options) {\n    for (const store of this.stores) {\n      try {\n        const res = await store.get(key, options);\n        if (res)\n          return res;\n      } catch (err) {\n        log(err);\n      }\n    }\n    throw Errors.notFoundError();\n  }\n  async has(key, options) {\n    for (const s of this.stores) {\n      if (await s.has(key, options)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  async delete(key, options) {\n    try {\n      await Promise.all(this.stores.map(store => store.delete(key, options)));\n    } catch (err) {\n      throw Errors.dbDeleteFailedError();\n    }\n  }\n  async *putMany(source, options = {}) {\n    let error;\n    const pushables = this.stores.map(store => {\n      const source = pushable();\n      drain(store.putMany(source, options)).catch(err => {\n        error = err;\n      });\n      return source;\n    });\n    try {\n      for await (const pair of source) {\n        if (error) {\n          throw error;\n        }\n        pushables.forEach(p => p.push(pair));\n        yield pair;\n      }\n    } finally {\n      pushables.forEach(p => p.end());\n    }\n  }\n  async *deleteMany(source, options = {}) {\n    let error;\n    const pushables = this.stores.map(store => {\n      const source = pushable();\n      drain(store.deleteMany(source, options)).catch(err => {\n        error = err;\n      });\n      return source;\n    });\n    try {\n      for await (const key of source) {\n        if (error) {\n          throw error;\n        }\n        pushables.forEach(p => p.push(key));\n        yield key;\n      }\n    } finally {\n      pushables.forEach(p => p.end());\n    }\n  }\n  async close() {\n    await Promise.all(this.stores.map(store => store.close()));\n  }\n  batch() {\n    const batches = this.stores.map(store => store.batch());\n    return {\n      put: (key, value) => {\n        batches.forEach(b => b.put(key, value));\n      },\n      delete: key => {\n        batches.forEach(b => b.delete(key));\n      },\n      commit: async options => {\n        for (const batch of batches) {\n          await batch.commit(options);\n        }\n      }\n    };\n  }\n  query(q, options) {\n    return this.stores[this.stores.length - 1].query(q, options);\n  }\n  queryKeys(q, options) {\n    return this.stores[this.stores.length - 1].queryKeys(q, options);\n  }\n}","import all from 'it-all';\nexport const sortAll = (iterable, sorter) => {\n  return async function* () {\n    const values = await all(iterable);\n    yield* values.sort(sorter);\n  }();\n};\nexport const replaceStartWith = (s, r) => {\n  const matcher = new RegExp('^' + r);\n  return s.replace(matcher, '');\n};","import { nanoid } from 'nanoid';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nconst pathSepS = '/';\nconst pathSepB = new TextEncoder().encode(pathSepS);\nconst pathSep = pathSepB[0];\nexport class Key {\n  constructor(s, clean) {\n    if (typeof s === 'string') {\n      this._buf = uint8ArrayFromString(s);\n    } else if (s instanceof Uint8Array) {\n      this._buf = s;\n    } else {\n      throw new Error('Invalid key, should be String of Uint8Array');\n    }\n    if (clean == null) {\n      clean = true;\n    }\n    if (clean) {\n      this.clean();\n    }\n    if (this._buf.byteLength === 0 || this._buf[0] !== pathSep) {\n      throw new Error('Invalid key');\n    }\n  }\n  toString(encoding = 'utf8') {\n    return uint8ArrayToString(this._buf, encoding);\n  }\n  uint8Array() {\n    return this._buf;\n  }\n  get [Symbol.toStringTag]() {\n    return `Key(${ this.toString() })`;\n  }\n  static withNamespaces(list) {\n    return new Key(list.join(pathSepS));\n  }\n  static random() {\n    return new Key(nanoid().replace(/-/g, ''));\n  }\n  static asKey(other) {\n    if (other instanceof Uint8Array || typeof other === 'string') {\n      return new Key(other);\n    }\n    if (other.uint8Array) {\n      return new Key(other.uint8Array());\n    }\n    return null;\n  }\n  clean() {\n    if (!this._buf || this._buf.byteLength === 0) {\n      this._buf = pathSepB;\n    }\n    if (this._buf[0] !== pathSep) {\n      const bytes = new Uint8Array(this._buf.byteLength + 1);\n      bytes.fill(pathSep, 0, 1);\n      bytes.set(this._buf, 1);\n      this._buf = bytes;\n    }\n    while (this._buf.byteLength > 1 && this._buf[this._buf.byteLength - 1] === pathSep) {\n      this._buf = this._buf.subarray(0, -1);\n    }\n  }\n  less(key) {\n    const list1 = this.list();\n    const list2 = key.list();\n    for (let i = 0; i < list1.length; i++) {\n      if (list2.length < i + 1) {\n        return false;\n      }\n      const c1 = list1[i];\n      const c2 = list2[i];\n      if (c1 < c2) {\n        return true;\n      } else if (c1 > c2) {\n        return false;\n      }\n    }\n    return list1.length < list2.length;\n  }\n  reverse() {\n    return Key.withNamespaces(this.list().slice().reverse());\n  }\n  namespaces() {\n    return this.list();\n  }\n  baseNamespace() {\n    const ns = this.namespaces();\n    return ns[ns.length - 1];\n  }\n  list() {\n    return this.toString().split(pathSepS).slice(1);\n  }\n  type() {\n    return namespaceType(this.baseNamespace());\n  }\n  name() {\n    return namespaceValue(this.baseNamespace());\n  }\n  instance(s) {\n    return new Key(this.toString() + ':' + s);\n  }\n  path() {\n    let p = this.parent().toString();\n    if (!p.endsWith(pathSepS)) {\n      p += pathSepS;\n    }\n    p += this.type();\n    return new Key(p);\n  }\n  parent() {\n    const list = this.list();\n    if (list.length === 1) {\n      return new Key(pathSepS);\n    }\n    return new Key(list.slice(0, -1).join(pathSepS));\n  }\n  child(key) {\n    if (this.toString() === pathSepS) {\n      return key;\n    } else if (key.toString() === pathSepS) {\n      return this;\n    }\n    return new Key(this.toString() + key.toString(), false);\n  }\n  isAncestorOf(other) {\n    if (other.toString() === this.toString()) {\n      return false;\n    }\n    return other.toString().startsWith(this.toString());\n  }\n  isDecendantOf(other) {\n    if (other.toString() === this.toString()) {\n      return false;\n    }\n    return this.toString().startsWith(other.toString());\n  }\n  isTopLevel() {\n    return this.list().length === 1;\n  }\n  concat(...keys) {\n    return Key.withNamespaces([\n      ...this.namespaces(),\n      ...flatten(keys.map(key => key.namespaces()))\n    ]);\n  }\n}\nfunction namespaceType(ns) {\n  const parts = ns.split(':');\n  if (parts.length < 2) {\n    return '';\n  }\n  return parts.slice(0, -1).join(':');\n}\nfunction namespaceValue(ns) {\n  const parts = ns.split(':');\n  return parts[parts.length - 1];\n}\nfunction flatten(arr) {\n  return [].concat(...arr);\n}","import { Wantlist } from '../wantlist/index.js';\nimport { base58btc } from 'multiformats/bases/base58';\nconst WantlistEntry = Wantlist.Entry;\nexport class BitswapMessageEntry {\n  constructor(cid, priority, wantType, cancel, sendDontHave) {\n    this.entry = new WantlistEntry(cid, priority, wantType);\n    this.cancel = Boolean(cancel);\n    this.sendDontHave = Boolean(sendDontHave);\n  }\n  get cid() {\n    return this.entry.cid;\n  }\n  set cid(cid) {\n    this.entry.cid = cid;\n  }\n  get priority() {\n    return this.entry.priority;\n  }\n  set priority(val) {\n    this.entry.priority = val;\n  }\n  get wantType() {\n    return this.entry.wantType;\n  }\n  set wantType(val) {\n    this.entry.wantType = val;\n  }\n  get [Symbol.toStringTag]() {\n    const cidStr = this.cid.toString(base58btc);\n    return `BitswapMessageEntry ${ cidStr } <cancel: ${ this.cancel }, priority: ${ this.priority }>`;\n  }\n  equals(other) {\n    return this.cancel === other.cancel && this.sendDontHave === other.sendDontHave && this.wantType === other.wantType && this.entry.equals(other.entry);\n  }\n}","import { CID } from 'multiformats/cid';\nimport errCode from 'err-code';\nconst IPFS_PREFIX = '/ipfs/';\nexport function toCidAndPath(string) {\n  if (string instanceof Uint8Array) {\n    try {\n      string = CID.decode(string);\n    } catch (err) {\n      throw errCode(err, 'ERR_INVALID_CID');\n    }\n  }\n  let cid = CID.asCID(string);\n  if (cid) {\n    return {\n      cid,\n      path: undefined\n    };\n  }\n  string = string.toString();\n  if (string.startsWith(IPFS_PREFIX)) {\n    string = string.substring(IPFS_PREFIX.length);\n  }\n  const parts = string.split('/');\n  let path;\n  try {\n    cid = CID.parse(parts.shift() || '');\n  } catch (err) {\n    throw errCode(err, 'ERR_INVALID_CID');\n  }\n  if (parts.length) {\n    path = `/${ parts.join('/') }`;\n  }\n  return {\n    cid,\n    path\n  };\n}","const empty = new Uint8Array(0);\nconst toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '');\nconst fromHex = hex => {\n  const hexes = hex.match(/../g);\n  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty;\n};\nconst equals = (aa, bb) => {\n  if (aa === bb)\n    return true;\n  if (aa.byteLength !== bb.byteLength) {\n    return false;\n  }\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false;\n    }\n  }\n  return true;\n};\nconst coerce = o => {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array')\n    return o;\n  if (o instanceof ArrayBuffer)\n    return new Uint8Array(o);\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);\n  }\n  throw new Error('Unknown type, must be binary type');\n};\nconst isBinary = o => o instanceof ArrayBuffer || ArrayBuffer.isView(o);\nconst fromString = str => new TextEncoder().encode(str);\nconst toString = b => new TextDecoder().decode(b);\nexport {\n  equals,\n  coerce,\n  isBinary,\n  fromHex,\n  toHex,\n  fromString,\n  toString,\n  empty\n};"],"names":["__createBinding","this","Object","create","o","m","k","k2","undefined","defineProperty","enumerable","get","__exportStar","exports","p","prototype","hasOwnProperty","call","value","Purchasing","Stake","IDO","Farming","Swap","SPLT","Lamports","utils","schema","keystore","account","RawWallet","require","rawWallet_1","default","account_1","keystore_1","schema_1","utils_1","lamports_1","splt_1","swap_1","farming_1","ido_1","stake_1","purchasing_1","toBuffer","arr","Buffer","Uint8Array","buffer","byteOffset","byteLength","minimalisticAssert","assert","val","msg","Error","equal","l","r","inherits_browserModule","ctor","superCtor","super_","constructor","writable","configurable","TempCtor","require$$0","inherits","require$$1","isSurrogatePair","i","charCodeAt","length","htonl","w","zero2","word","zero8","enc","Array","isArray","slice","res","replace","push","parseInt","c","toString","endian","start","end","len","b","a","d","e","buf","pos","ah","al","bh","lo","hi","bl","ch","cl","dh","dl","carry","eh","el","num","BlockHash","pending","pendingTotal","blockSize","outSize","hmacStrength","padLength","_delta8","_delta32","common","update","toArray","concat","join32","_update","digest","_pad","_digest","bytes","t","rotr32","ch32","x","y","z","maj32","p32","s","shaCommon","require$$2","rotl32","sum32","sum32_5","ft_1","sha1_K","SHA1","h","W","_1","toHex32","split32","require$$3","sum32_4","s0_256","s1_256","g0_256","g1_256","sha256_K","SHA256","_256","f","g","T1","T2","SHA224","_224","rotr64_hi","rotr64_lo","shr64_hi","shr64_lo","sum64","sum64_hi","sum64_lo","sum64_4_hi","sum64_4_lo","sum64_5_hi","sum64_5_lo","sha512_K","SHA512","_512","ch64_hi","xh","xl","yh","yl","zh","ch64_lo","zl","maj64_hi","maj64_lo","s0_512_hi","s0_512_lo","s1_512_hi","s1_512_lo","g0_512_hi","g0_512_lo","g1_512_hi","g1_512_lo","_prepareBlock","c0_hi","c0_lo","c1_hi","c1_lo","c2_hi","c2_lo","c3_hi","c3_lo","fh","fl","gh","gl","hh","hl","c4_hi","c4_lo","T1_hi","T1_lo","T2_hi","T2_lo","SHA384","_384","sha","require$$4","sum32_3","RIPEMD160","j","K","Kh","ripemd","A","B","C","D","E","Ah","Bh","Ch","Dh","Eh","T","rh","sh","Hmac","hash","key","Hash","inner","outer","_init","hmac","sha1","sha256","sha224","sha384","sha512","ripemd160","_permanentCensorErrors","_censorErrors","LogLevels","debug","info","warning","error","off","_logLevel","_globalLogger","_normalizeError","missing","forEach","form","normalize","join","String","fromCharCode","message","_checkNormalize","LogLevel","ErrorCode","HEX","Logger","version","_log","logLevel","args","level","toLowerCase","throwArgumentError","console","log","apply","levels","DEBUG","INFO","warn","WARNING","makeError","code","params","errors","UNKNOWN_ERROR","messageDetails","keys","hex","JSON","stringify","reason","url","NUMERIC_FAULT","fault","CALL_EXCEPTION","INSUFFICIENT_FUNDS","MISSING_NEW","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","TRANSACTION_REPLACED","UNPREDICTABLE_GAS_LIMIT","throwError","name","INVALID_ARGUMENT","argument","condition","assertArgument","checkNormalize","UNSUPPORTED_OPERATION","operation","checkSafeUint53","checkArgumentCount","count","expectedCount","MISSING_ARGUMENT","UNEXPECTED_ARGUMENT","checkNew","target","kind","checkAbstract","censorship","permanent","globalLogger","logger","addSlice","array","arguments","isInteger","arrayify","options","result","unshift","allowMissingPrefix","substring","toHexString","isHexable","match","isHexString","hexPad","v","isBytes","data","Struct","properties","assign","encode","serialize","SOLANA_SCHEMA","deserialize","deserializeUnchecked","Enum","super","enum","map","Map","MAX_SEED_LENGTH","PublicKey","_bn","isPublicKeyData","decoded","bs58","BN","equals","publicKey","eq","toBase58","toBytes","toJSON","toArrayLike","zeroPad","copy","fromPublicKey","seed","programId","seeds","TypeError","publicKeyBytes","is_on_curve","createProgramAddressSync","address","nonce","seedsWithNonce","err","findProgramAddressSync","pubkeyData","set","fields","naclLowLevel","nacl","gf","chk","den","den2","den4","den6","set25519","gf1","unpack25519","S","M","Z","pow2523","neq25519","I","pack25519","crypto_verify_32","Account","secretKey","_keypair","BPF_LOADER_DEPRECATED_PROGRAM_ID","PACKET_DATA_SIZE","SIGNATURE_LENGTH_IN_BYTES","property","BufferLayout","rustString","rsl","_decode","decode","bind","_encode","rslShim","offset","str","chars","alloc","span","decodeLength","size","elem","shift","encodeLength","rem_len","Message","header","accountKeys","recentBlockhash","instructions","indexToProgramIds","ix","programIdIndex","isAccountSigner","index","numRequiredSignatures","isAccountWritable","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","isProgramId","has","programIds","values","nonProgramIds","filter","_","numKeys","keyCount","shortvec","instruction","accounts","from","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","signDataLayout","Layout","transaction","signData","byteArray","accountCount","dataSlice","messageArgs","TransactionStatus","DEFAULT_SIGNATURE","fill","TransactionInstruction","opts","pubkey","isSigner","isWritable","Transaction","signature","signatures","feePayer","lastValidBlockHeight","nonceInfo","_message","_json","newOpts","blockhash","oldOpts","nonceInstruction","signers","add","items","item","compileMessage","accountMetas","accountMeta","includes","uniqueMetas","pubkeyString","uniqueIndex","findIndex","sort","localeCompare","feePayerIndex","payerMeta","splice","signedKeys","unsignedKeys","indexOf","meta","invariant","keyIndex","_compile","every","pair","serializeMessage","connection","getFeeForMessage","setSigners","seen","Set","sign","uniqueSigners","signer","_partialSign","partialSign","_addSignature","addSignature","sigpair","verifySignatures","_verifySignatures","requireAllSignatures","config","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","SYSVAR_CLOCK_PUBKEY","SYSVAR_EPOCH_SCHEDULE_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_SLOT_HASHES_PUBKEY","SYSVAR_SLOT_HISTORY_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","async","sendAndConfirmTransaction","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","status","confirmTransaction","sleep","ms","Promise","resolve","setTimeout","encodeData","type","allocLength","layout","layoutFields","decodeData","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","nonceAccount","u64","blob","encodeDecode","bigIntLayout","src","toBigIntLE","bigInt","toBufferLE","SystemInstruction","checkProgramId","typeIndex","ixType","entries","SYSTEM_INSTRUCTION_LAYOUTS","checkKeyLength","lamports","space","Create","fromPubkey","newAccountPubkey","Transfer","toPubkey","TransferWithSeed","basePubkey","Allocate","accountPubkey","base","AllocateWithSeed","Assign","AssignWithSeed","CreateWithSeed","authorized","InitializeNonceAccount","noncePubkey","AdvanceNonceAccount","WithdrawNonceAccount","AuthorizeNonceAccount","newAuthorizedPubkey","SystemProgram","expectedLength","freeze","UpgradeNonceAccount","BigInt","createAccountWithSeed","createAccount","initParams","nonceInitialize","instructionData","CHUNK_SIZE","Loader","Math","ceil","chunkSize","payer","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","allocate","owner","transfer","dataLayout","transactions","bytesLength","bytesLengthPadding","_rpcEndpoint","REQUESTS_PER_SECOND","all","BPF_LOADER_PROGRAM_ID","BpfLoader","getMinNumSignatures","elf","loaderProgramId","load","ComputeBudgetInstruction","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","units","additionalFee","RequestUnits","RequestHeapFrame","SetComputeUnitLimit","microLamports","SetComputeUnitPrice","ComputeBudgetProgram","objToString","objKeys","obj","isArrayProp","max","propVal","toStr","isFinite","returnVal","trailingZeros","n","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","slot","getEpochAndSlotIndex","epoch","getSlotsInEpoch","normalSlotIndex","normalEpochIndex","floor","getFirstSlotInEpoch","pow","getLastSlotInEpoch","SendTransactionError","logs","globalThis","fetch","TransactionExpiredBlockheightExceededError","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","createRpcResult","union","pick","jsonrpc","id","unknown","optional","any","UnknownRpcResult","jsonRpcResult","jsonRpcResultAndContext","context","number","notificationResultAndContext","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","GetEpochInfoResult","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","boolean","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","state","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","rpc","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","ConfirmedTransactionResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","ParsedConfirmedTransactionMetaResult","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","rewardType","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","Connection","endpoint","commitmentOrConfig","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","URL","protocol","wsEndpoint","httpHeaders","fetchMiddleware","disableRetryOnRateLimit","client","confirmTransactionInitialTimeout","useHttps","host","port","Number","makeWebsocketUrl","customFetch","fetchImpl","fetchWithMiddleware","init","modifiedFetchArgs","reject","modifiedInfo","modifiedInit","RpcClient","request","callback","method","body","agent","headers","too_many_requests_retries","waitTime","statusText","text","ok","createRpcClient","response","requests","batch","methodName","createRpcBatchRequest","RpcWebSocketClient","autoconnect","max_reconnects","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","rpcEndpoint","_buildArgs","unsafeRes","getBalanceAndContext","then","catch","configArg","tokenMintAddress","tokenAddress","ownerAddress","_args","arg","mintAddress","getAccountInfoAndContext","publicKeys","getMultipleAccountsInfoAndContext","configOrCommitment","extra","encoding","filters","strategy","rawSignature","decodedSignature","subscriptionCommitment","timeoutId","subscriptionId","done","confirmationPromise","onSignature","__type","PROCESSED","checkBlockHeight","getBlockHeight","_e","expiryPromise","timeoutMs","TIMED_OUT","currentBlockHeight","BLOCKHEIGHT_EXCEEDED","outcome","race","clearTimeout","removeSignatureListener","startSlot","limit","getSignatureStatuses","getSupply","excludeNonCirculatingAccountsList","addresses","epochSchedule","wireMessage","getRecentBlockhashAndContext","getLatestBlockhashAndContext","_buildArgsAtLeastConfirmed","rest","block","endSlot","transactionDetails","firstAvailableBlock","getFirstAvailableBlock","getConfirmedBlockSignatures","until","highestConfirmedRoot","getSlot","before","getConfirmedSignaturesForAddress2","accountInfo","fromAccountData","getNonceAndContext","to","disableCache","expired","Date","now","_pollNewBlockhash","startTime","cachedLatestBlockhash","cachedBlockhash","getLatestBlockhash","MS_PER_SLOT","transactionOrMessage","includeAccounts","originalTx","_blockhashWithExpiryBlockHeight","encodedTransaction","sigVerify","traceIndent","logTrace","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","notify","_updateSubscriptions","clearInterval","close","connect","activeWebSocketGeneration","isCurrentConnectionStillActive","callbacks","serverSubscriptionId","unsubscribeMethod","delete","_handleServerNotification","callbackArgs","cb","notification","_makeSubscription","subscriptionConfig","clientSubscriptionId","fastStableStringify","existingSubscription","onAccountChange","_unsubscribeClientSubscription","accountId","onProgramAccountChange","onLogs","mentions","onSlotChange","onSlotUpdate","subscriptionName","dispose","override","_err","onSignatureWithOptions","onRootChange","Keypair","keypair","skipValidation","TextEncoder","ED25519_INSTRUCTION_LAYOUT","Ed25519Program","instructionIndex","PUBLIC_KEY_BYTES","SIGNATURE_BYTES","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","privateKey","PRIVATE_KEY_BYTES","fromSecretKey","createInstructionWithPublicKey","STAKE_CONFIG_ID","Authorized","staker","withdrawer","Lockup","unixTimestamp","custodian","StakeInstruction","STAKE_INSTRUCTION_LAYOUTS","lockup","Initialize","stakePubkey","Delegate","newAuthorized","stakeAuthorizationType","Authorize","custodianPubkey","authoritySeed","authorityOwner","AuthorizeWithSeed","authorityBase","Split","splitStakePubkey","Merge","sourceStakePubKey","Withdraw","Deactivate","StakeProgram","StakeAuthorizationLayout","Staker","Withdrawer","maybeLockup","initialize","splitInstruction","publicKeyCreate","ecdsaSign","secp256k1","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","sha3","recoveryId","createInstructionWithEthAddress","ethAddress","publicKeyToEthAddress","rawAddress","startsWith","substr","ETHEREUM_ADDRESS_BYTES","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","recid","VALIDATOR_INFO_KEY","InfoString","website","details","keybaseUsername","ValidatorInfo","configKeys","rawInfo","parse","assertType","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","authorizedWithdrawer","votes","authorizedVoters","priorVoters","lastTimestamp","va","rootSlotValid","parseAuthorizedVoter","getPriorVoters","authorizedVoter","parsePriorVoters","epochOfLastAuthorizedSwitch","targetEpoch","idx","isEmpty","VoteInit","VoteInstruction","VOTE_INSTRUCTION_LAYOUTS","voteInit","InitializeAccount","voteAuthorizationType","authorizedWithdrawerPubkey","VoteProgram","VoteAuthorizationLayout","Voter","initializeAccount","sendAndConfirmRawTransaction","confirmationStrategyOrConfirmOptions","maybeConfirmOptions","confirmationStrategy","http","devnet","testnet","https","clusterApiUrl","cluster","tls","LAMPORTS_PER_SOL","base58btc","base32","Digest","Multiaddr","mafmt","CID","uint8ArrayToString","pathGatewayPattern","pathPattern","subdomainGatewayPattern","fqdnWithTld","isCID","Boolean","asCID","isMultiaddr","input","isIpfs","pattern","protocolMatch","hashMatch","formatted","convertToString","isIpns","ipnsId","hostname","test","isString","ipfsSubdomain","ipnsSubdomain","subdomain","ipfsUrl","ipnsUrl","path","module","multihash","multiaddr","peerMultiaddr","P2P","matches","cid","base32cid","isBase32EncodedMultibase","ipfsPath","ipnsPath","urlOrPath","cidPath","source","fn","entry","func","pushable","sources","output","rawPipe","fns","isIterable","Symbol","asyncIterator","iterator","next","isDuplex","sink","duplexPipelineFn","duplex","pipe","forgePbkdf2","forgeUtil","errcode","hashName","password","salt","iterations","keySize","hasher","types","dek","encode64","randomBytes","isNaN","1","isNumeric","hasSymbol","mathceil","mathfloor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","xc","yc","BigNumber","pow2_53","random53bitInt","decimal","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","P","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","prefix","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","ALPHABET","intCheck","round","isNum","alphabet","caseChanged","arrL","klo","khi","temp","xlo","xhi","cmp","c0","ne","toExponential","toFixedPoint","pows10","out","rd","ni","rm","sd","crypto","getRandomValues","EXPONENTIAL_AT","RANGE","rand","dp","sum","convertBase","baseOut","div","yL","yz","qc","q","more","xL","xi","remL","rem","yc0","rem0","prodL","prod","subtract","parseNumeric","nIsBig","nIsNeg","isModExp","nIsOdd","half","isOdd","ye","xe","xLTy","reverse","normalise","sqrtBase","xcL","ycL","zc","ylo","yhi","coeffToString","rep","format","g1","g2","intPart","fractionPart","isNeg","intDigits","n1","d1","md","exp","n0","d2","d0","globalObject","languageTag","delimiters","thousands","abbreviations","thousand","million","billion","trillion","spaceSeparated","ordinal","binarySuffixes","decimalSuffixes","currency","symbol","position","currencyFormat","thousandSeparated","totalLength","spaceSeparatedCurrency","formats","fourDigits","fullWithTwoDecimals","mantissa","fullWithTwoDecimalsNoCurrency","fullWithNoDecimals","globalState","validating","parsing","powers","defaultOptions","characteristic","forceAverage","average","optionalMantissa","negative","forceSign","roundingFunction","spaceSeparatedAbbreviation","currentBytes","general","scale","suffixes","marker","binary","_format","providedFormat","numbro","parseFormat","validateFormat","postfix","currentCurrency","clonedFormat","currencyPosition","currencySymbol","lowPrecision","formatNumber","_value","formatOrDefault","currentCurrencyDefaultFormat","prefixSymbol","currentPercentageDefaultFormat","_state$currentBytes","localBinarySuffixes","localDecimalSuffixes","baseInfo","_getFormatByteUnits","getFormatByteUnits","defaults","currentByteDefaultFormat","currentTimeDefaultFormat","hours","minutes","seconds","ordinalFn","currentOrdinal","currentOrdinalDefaultFormat","abs","power","min","zeroes","precision","_result$split2","split","_slicedToArray","_base$split2","_base$split2$","replaceDelimiters","currentDelimiters","thousandSeparator","thousandsSize","hasNegativeSign","counter","_ref3","_ref3$state","_ref3$defaults","currentDefaults","hasZeroFormat","getZeroFormat","_ref2","_ref2$characteristicP","characteristicPrecision","_value$toExponential$2","numberString","exponential","optionalCharacteristic","mantissaPrecision","trimMantissa","abbreviation","_ref","_ref$lowPrecision","_ref$spaceSeparated","_ref$totalLength","_ref$roundingFunction","isNegative","characteristicLength","currentAbbreviations","_data","trim","_result$toString$spli2","currentCharacteristic","_result$toString$spli3","currentMantissa","hasTrailingZeroes","_result$toString$spli5","missingZeros","defaultFormat","_key","getByteUnit","_key2","getBinaryByteUnit","_key3","getDecimalByteUnit","_key4","enUS","currentLanguageTag","languages","zeroFormat","globalDefaults","chooseLanguage","tag","currentLanguageData","currentLanguage","ordinalFormat","byteFormat","percentageFormat","timeFormat","setDefaults","setZeroFormat","languageData","registerLanguage","useLanguage","validateLanguage","setLanguage","fallbackTag","matchingLanguageTag","find","each","loadLanguagesInNode","tags","_subtract","other","otherValue","isNumbro","minus","toNumber","plus","multiply","times","divide","dividedBy","difference","clone","validator","loader","unformatter","formatter","manipulate","Numbro","normalizeInput","unformat","NaN","object","language","defaultCurrencyFormat","validate","allSuffixes","factor","escapeRegExp","unformatValue","inputString","computeUnformattedValue","u","stripped","newInput","RegExp","possibleOrdinalValue","parseFloat","ordinalString","inversedAbbreviations","abbreviationValues","numberOfAbbreviations","_i","segments","bcp47RegExp","validFormat","validValues","restriction","mandatory","restrictions","children","validLanguage","timeDefaults","validateInput","validateSpec","toValidate","spec","skipMandatoryCheck","results","_typeof","_data$restrictions$i","_toConsumableArray","reduce","acc","validInput","isFormatValid","for","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","ReactCurrentOwner","ref","__self","__source","defaultProps","$$typeof","props","_owner","jsx","jsxs","BaseDatastore","open","put","puts","dels","commit","drain","putMany","deleteMany","query","it","_all","orders","sortAll","take","queryKeys","_allKeys","dbOpenFailedError","errCode","dbDeleteFailedError","dbWriteFailedError","notFoundError","abortedError","KeyTransformDatastore","child","transform","convert","invert","getMany","order","MemoryDatastore","Errors","Key","MountDatastore","mounts","datastore","_lookup","mount","isAncestorOf","mountpoint","batchMounts","lookup","qs","merge","NamespaceDatastore","PREFIX","SHARDING_FN","README_FN","ShardBase","param","_padding","fun","Prefix","prefixLen","padStart","noslash","Suffix","suffixLen","NextToLast","parseShardFun","parts","readShardFun","store","getRaw","TextDecoder","shardKey","shardReadmeKey","ShardingDatastore","shard","_convertKey","_invertKey","list","hasShard","putRaw","readme","diskShard","tq","TieredDatastore","stores","pushables","batches","iterable","sorter","pathSepS","pathSepB","pathSep","clean","_buf","uint8ArrayFromString","uint8Array","toStringTag","nanoid","subarray","less","list1","list2","c1","c2","withNamespaces","namespaces","baseNamespace","ns","namespaceType","namespaceValue","endsWith","isDecendantOf","isTopLevel","WantlistEntry","Wantlist","BitswapMessageEntry","priority","wantType","cancel","sendDontHave","IPFS_PREFIX","toCidAndPath","empty","toHex","byte","fromHex","hexes","aa","bb","ii","ArrayBuffer","isView","isBinary","fromString"],"sourceRoot":""}